var pxtTargetBundle = {
  "id": "brainpad",
  "platformid": "codal",
  "nickname": "brainpad",
  "name": "GHI Brain Pad",
  "title": "GHI Brain Pad - Blocks / Javascript editor",
  "description": "A Blocks / JavaScript code editor for the GHI Brain Pad.",
  "corepkg": "brainpad",
  "ignoreDocsErrors": true,
  "bundleddirs": [
    "libs/animation",
    "libs/base",
    "libs/core",
    "libs/accelerometer",
    "libs/music",
    "libs/buttons",
    "libs/screen",
    "libs/display",
    "libs/serial",
    "libs/controller",
    "libs/game",
    "libs/brainpad",
    "libs/leds"
  ],
  "serial": {
    "useHF2": true,
    "useEditor": true,
    "log": true,
    "noDeploy": true,
    "editorTheme": {
      "graphBackground": "#d9d9d9",
      "lineColors": [
        "#009DDC",
        "#FB48C7",
        "#40bf4a",
        "#8073E5",
        "#d25b33"
      ]
    }
  },
  "simulator": {
    "autoRun": true,
    "streams": false,
    "aspectRatio": 1.8,
    "parts": false,
    "boardDefinition": {
      "visual": "brainpad",
      "gpioPinBlocks": [
        [
          "P0"
        ],
        [
          "P1"
        ],
        [
          "P2"
        ],
        [
          "P3"
        ],
        [
          "P4",
          "P5",
          "P6",
          "P7"
        ],
        [
          "P8",
          "P9",
          "P10",
          "P11",
          "P12"
        ],
        [
          "P16"
        ]
      ],
      "gpioPinMap": {
        "P0": "P0",
        "P1": "P1",
        "P2": "P2",
        "P3": "P3",
        "P4": "P4",
        "P5": "P5",
        "P6": "P6",
        "P7": "P7",
        "P8": "P8",
        "P9": "P9",
        "P10": "P10",
        "P11": "P11",
        "P12": "P12",
        "P13": "P13",
        "P14": "P14",
        "P15": "P15",
        "P16": "P16",
        "P19": "P19",
        "P20": "P20"
      },
      "i2cPins": {
        "SDA": "P2",
        "SCL": "P3"
      },
      "analogInPins": [
        "A0",
        "A4",
        "A5"
      ],
      "groundPins": [
        "GND_0",
        "GND_1",
        "GND_2"
      ],
      "threeVoltPins": [
        "PWR_0",
        "PWR_2"
      ],
      "attachPowerOnRight": true,
      "onboardComponents": [
        "accelerometer",
        "buttonpair",
        "speaker",
        "thermometer",
        "rgbsensor",
        "lightsensor",
        "microphone"
      ],
      "useCrocClips": true,
      "marginWhenBreadboarding": [
        0,
        0,
        80,
        0
      ]
    }
  },
  "cloud": {
    "workspace": false,
    "packages": true,
    "sharing": true,
    "publishing": true,
    "importing": false,
    "preferredPackages": [],
    "githubPackages": true
  },
  "compile": {
    "isNative": true,
    "useUF2": true,
    "hasHex": true,
    "deployDrives": ".*",
    "deployFileMarker": "INFO.TXT",
    "driveName": "BrainPad2",
    "openocdScript": "source [find interface/cmsis-dap.cfg]; source [find target/stm32f4x.cfg]",
    "flashCodeAlign": 256,
    "floatingPoint": true,
    "taggedInts": true,
    "upgrades": [
      {
        "type": "package",
        "map": {}
      },
      {
        "type": "api",
        "map": {}
      }
    ],
    "hidSelectors": [
      {
        "usagePage": "0xFF97",
        "usageId": "0x0001",
        "vid": "0x239A",
        "pid": "0x0018"
      },
      {
        "usagePage": "0xFF00",
        "usageId": "0x0001",
        "vid": "0x239A",
        "pid": "0x0018"
      },
      {
        "usagePage": "0xFF00",
        "usageId": "0x0001",
        "vid": "0x239A",
        "pid": "0x0019"
      },
      {
        "usagePage": "0xFF97",
        "usageId": "0x0001",
        "vid": "0x03EB",
        "pid": "0x2402"
      }
    ],
    "nativeType": "thumb",
    "jsRefCounting": false,
    "vtableShift": 2
  },
  "runtime": {
    "mathBlocks": true,
    "loopsBlocks": true,
    "logicBlocks": true,
    "variablesBlocks": true,
    "textBlocks": true,
    "listsBlocks": true,
    "functionBlocks": true,
    "onStartNamespace": "loops",
    "onStartColor": "#40bf4a",
    "onStartWeight": 100
  },
  "compileService": {
    "buildEngine": "codal",
    "codalTarget": {
      "name": "codal-brainpad",
      "url": "https://github.com/brainpad-board/codal-brainpad",
      "branch": "master",
      "type": "git"
    },
    "codalBinary": "BRAINPAD",
    "yottaConfig": {
      "pxt": {
        "board": {
          "id": "BOARD_ID_CPLAY"
        }
      }
    },
    "githubCorePackage": "lancaster-university/codal",
    "gittag": "master",
    "serviceId": "brainpad"
  },
  "appTheme": {
    "accentColor": "#0089BF",
    "logoUrl": "https://www.brainpad.com/",
    "logo": "docs/static/logo.png",
    "docsLogo": "docs/static/logo.square.png",
    "portraitLogo": "docs/static/logo.square.png",
    "footerLogo": "docs/static/logo.square.png",
    "organization": "Microsoft MakeCode",
    "organizationUrl": "https://makecode.com/",
    "organizationLogo": "docs/static/Microsoft-logo_rgb_c-gray-square.png",
    "organizationWideLogo": "docs/static/Microsoft-logo_rgb_c-gray.png",
    "homeUrl": "/brainpad-pulse/",
    "embedUrl": "https://makecode.brainpad.com/",
    "privacyUrl": "https://go.microsoft.com/fwlink/?LinkId=521839",
    "termsOfUseUrl": "https://go.microsoft.com/fwlink/?LinkID=206977",
    "githubUrl": "https://github.com/Microsoft/pxt-brainpad",
    "betaUrl": "https://makecode.com",
    "crowdinProject": "kindscript",
    "boardName": "BrainPad",
    "driveDisplayName": "BRAINPAD",
    "print": true,
    "debugger": true,
    "docMenu": [
      {
        "name": "Blocks",
        "path": "/brainpad-pulse/docs/blocks"
      },
      {
        "name": "JavaScript",
        "path": "/brainpad-pulse/docs/javascript"
      },
      {
        "name": "Reference",
        "path": "/brainpad-pulse/docs/reference"
      },
      {
        "name": "Buy",
        "path": "https://www.brainpad.com/buy"
      }
    ],
    "showHomeScreen": true,
    "homeScreenHero": "docs/static/hero.jpg",
    "invertedMenu": false,
    "invertedToolbox": false,
    "invertedMonaco": false,
    "monacoToolbox": true,
    "selectLanguage": true,
    "simAnimationEnter": "fly right in",
    "simAnimationExit": "fly right out",
    "highContrast": true,
    "greenScreen": true,
    "hasAudio": true,
    "usbHelp": [],
    "extendEditor": true,
    "disableBlockIcons": true,
    "socialOptions": {
      "twitterHandle": "ghielectronics",
      "orgTwitterHandle": "MSMakeCode",
      "hashtags": "MakeCode"
    },
    "blocklyOptions": {
      "grid": {}
    },
    "blocklyColors": {
      "insertionMarker": "#000000",
      "insertionMarkerOpacity": 0.5
    },
    "blockColors": {
      "loops": "#40bf4a",
      "logic": "#4cbfe6",
      "math": "#9966ff",
      "variables": "#FF6680",
      "text": "#ffab19",
      "advanced": "#00272B",
      "functions": "#005a9e",
      "arrays": "#8A1C7C"
    },
    "availableLocales": [
      "en",
      "ar",
      "cs",
      "da",
      "de",
      "el",
      "es-ES",
      "fi",
      "fr",
      "hu",
      "is",
      "it",
      "ja",
      "ko",
      "nl",
      "no",
      "pt-BR",
      "pt-PT",
      "ru",
      "si-LK",
      "sk",
      "sv-SE",
      "tr",
      "uk",
      "zh-CN",
      "zh-TW"
    ],
    "allowPackageExtensions": true,
    "TOC": [
      {
        "name": "About",
        "subitems": [],
        "path": "/about",
        "nextName": "FAQ",
        "nextPath": "/faq"
      },
      {
        "name": "FAQ",
        "subitems": [],
        "path": "/faq",
        "prevName": "About",
        "prevPath": "/about",
        "nextName": "Projects",
        "nextPath": "/projects"
      },
      {
        "name": "Projects",
        "subitems": [],
        "path": "/projects",
        "prevName": "FAQ",
        "prevPath": "/faq",
        "nextName": "Examples",
        "nextPath": "/examples"
      },
      {
        "name": "Examples",
        "subitems": [],
        "path": "/examples",
        "prevName": "Projects",
        "prevPath": "/projects",
        "nextName": "Reference",
        "nextPath": "/reference"
      },
      {
        "name": "Reference",
        "subitems": [
          {
            "name": "input",
            "subitems": [],
            "path": "/reference/input",
            "prevName": "Reference",
            "prevPath": "/reference",
            "nextName": "music",
            "nextPath": "/reference/music"
          },
          {
            "name": "music",
            "subitems": [],
            "path": "/reference/music",
            "prevName": "input",
            "prevPath": "/reference/input",
            "nextName": "pins",
            "nextPath": "/reference/pins"
          },
          {
            "name": "pins",
            "subitems": [],
            "path": "/reference/pins",
            "prevName": "music",
            "prevPath": "/reference/music",
            "nextName": "control",
            "nextPath": "/reference/control"
          },
          {
            "name": "control",
            "subitems": [],
            "path": "/reference/control",
            "prevName": "pins",
            "prevPath": "/reference/pins",
            "nextName": "serial",
            "nextPath": "/reference/serial"
          },
          {
            "name": "serial",
            "subitems": [],
            "path": "/reference/serial",
            "prevName": "control",
            "prevPath": "/reference/control",
            "nextName": "Blocks",
            "nextPath": "/blocks"
          }
        ],
        "path": "/reference",
        "prevName": "Examples",
        "prevPath": "/examples",
        "nextName": "input",
        "nextPath": "/reference/input"
      },
      {
        "name": "Blocks",
        "subitems": [
          {
            "name": "On Start",
            "subitems": [],
            "path": "/blocks/on-start",
            "prevName": "Blocks",
            "prevPath": "/blocks",
            "nextName": "Loops",
            "nextPath": "/blocks/loops"
          },
          {
            "name": "Loops",
            "subitems": [
              {
                "name": "repeat",
                "subitems": [],
                "path": "/blocks/loops/repeat",
                "prevName": "Loops",
                "prevPath": "/blocks/loops",
                "nextName": "for",
                "nextPath": "/blocks/loops/for"
              },
              {
                "name": "for",
                "subitems": [],
                "path": "/blocks/loops/for",
                "prevName": "repeat",
                "prevPath": "/blocks/loops/repeat",
                "nextName": "while",
                "nextPath": "/blocks/loops/while"
              },
              {
                "name": "while",
                "subitems": [],
                "path": "/blocks/loops/while",
                "prevName": "for",
                "prevPath": "/blocks/loops/for",
                "nextName": "Logic",
                "nextPath": "/blocks/logic"
              }
            ],
            "path": "/blocks/loops",
            "prevName": "On Start",
            "prevPath": "/blocks/on-start",
            "nextName": "repeat",
            "nextPath": "/blocks/loops/repeat"
          },
          {
            "name": "Logic",
            "subitems": [
              {
                "name": "if",
                "subitems": [],
                "path": "/blocks/logic/if",
                "prevName": "Logic",
                "prevPath": "/blocks/logic",
                "nextName": "Boolean",
                "nextPath": "/blocks/logic/boolean"
              },
              {
                "name": "Boolean",
                "subitems": [],
                "path": "/blocks/logic/boolean",
                "prevName": "if",
                "prevPath": "/blocks/logic/if",
                "nextName": "Variables",
                "nextPath": "/blocks/variables"
              }
            ],
            "path": "/blocks/logic",
            "prevName": "while",
            "prevPath": "/blocks/loops/while",
            "nextName": "if",
            "nextPath": "/blocks/logic/if"
          },
          {
            "name": "Variables",
            "subitems": [
              {
                "name": "assign",
                "subitems": [],
                "path": "/blocks/variables/assign",
                "prevName": "Variables",
                "prevPath": "/blocks/variables",
                "nextName": "change var",
                "nextPath": "/blocks/variables/change"
              },
              {
                "name": "change var",
                "subitems": [],
                "path": "/blocks/variables/change",
                "prevName": "assign",
                "prevPath": "/blocks/variables/assign",
                "nextName": "var",
                "nextPath": "/blocks/variables/var"
              },
              {
                "name": "var",
                "subitems": [],
                "path": "/blocks/variables/var",
                "prevName": "change var",
                "prevPath": "/blocks/variables/change",
                "nextName": "Math",
                "nextPath": "/blocks/math"
              }
            ],
            "path": "/blocks/variables",
            "prevName": "Boolean",
            "prevPath": "/blocks/logic/boolean",
            "nextName": "assign",
            "nextPath": "/blocks/variables/assign"
          },
          {
            "name": "Math",
            "subitems": [],
            "path": "/blocks/math",
            "prevName": "var",
            "prevPath": "/blocks/variables/var",
            "nextName": "JavaScript blocks",
            "nextPath": "/blocks/javascript-blocks"
          },
          {
            "name": "JavaScript blocks",
            "subitems": [],
            "path": "/blocks/javascript-blocks",
            "prevName": "Math",
            "prevPath": "/blocks/math",
            "nextName": "Custom blocks",
            "nextPath": "/blocks/custom"
          },
          {
            "name": "Custom blocks",
            "subitems": [],
            "path": "/blocks/custom",
            "prevName": "JavaScript blocks",
            "prevPath": "/blocks/javascript-blocks",
            "nextName": "JavaScript",
            "nextPath": "/javascript"
          }
        ],
        "path": "/blocks",
        "prevName": "serial",
        "prevPath": "/reference/serial",
        "nextName": "On Start",
        "nextPath": "/blocks/on-start"
      },
      {
        "name": "JavaScript",
        "subitems": [
          {
            "name": "Calling",
            "subitems": [],
            "path": "/javascript/call",
            "prevName": "JavaScript",
            "prevPath": "/javascript",
            "nextName": "Sequencing",
            "nextPath": "/javascript/sequence"
          },
          {
            "name": "Sequencing",
            "subitems": [],
            "path": "/javascript/sequence",
            "prevName": "Calling",
            "prevPath": "/javascript/call",
            "nextName": "Variables",
            "nextPath": "/javascript/variables"
          },
          {
            "name": "Variables",
            "subitems": [],
            "path": "/javascript/variables",
            "prevName": "Sequencing",
            "prevPath": "/javascript/sequence",
            "nextName": "Operators",
            "nextPath": "/javascript/operators"
          },
          {
            "name": "Operators",
            "subitems": [],
            "path": "/javascript/operators",
            "prevName": "Variables",
            "prevPath": "/javascript/variables",
            "nextName": "Statements",
            "nextPath": "/javascript/statements"
          },
          {
            "name": "Statements",
            "subitems": [],
            "path": "/javascript/statements",
            "prevName": "Operators",
            "prevPath": "/javascript/operators",
            "nextName": "Functions",
            "nextPath": "/javascript/functions"
          },
          {
            "name": "Functions",
            "subitems": [],
            "path": "/javascript/functions",
            "prevName": "Statements",
            "prevPath": "/javascript/statements",
            "nextName": "Types",
            "nextPath": "/javascript/types"
          },
          {
            "name": "Types",
            "subitems": [],
            "path": "/javascript/types",
            "prevName": "Functions",
            "prevPath": "/javascript/functions",
            "nextName": "Classes",
            "nextPath": "/javascript/classes"
          },
          {
            "name": "Classes",
            "subitems": [],
            "path": "/javascript/classes",
            "prevName": "Types",
            "prevPath": "/javascript/types",
            "nextName": "Interfaces",
            "nextPath": "/javascript/interfaces"
          },
          {
            "name": "Interfaces",
            "subitems": [],
            "path": "/javascript/interfaces",
            "prevName": "Classes",
            "prevPath": "/javascript/classes",
            "nextName": "Generics",
            "nextPath": "/javascript/generics"
          },
          {
            "name": "Generics",
            "subitems": [],
            "path": "/javascript/generics",
            "prevName": "Interfaces",
            "prevPath": "/javascript/interfaces",
            "nextName": "Types",
            "nextPath": "/types"
          }
        ],
        "path": "/javascript",
        "prevName": "Custom blocks",
        "prevPath": "/blocks/custom",
        "nextName": "Calling",
        "nextPath": "/javascript/call"
      },
      {
        "name": "Types",
        "subitems": [
          {
            "name": "Number",
            "subitems": [],
            "path": "/types/number",
            "prevName": "Types",
            "prevPath": "/types",
            "nextName": "String",
            "nextPath": "/types/string"
          },
          {
            "name": "String",
            "subitems": [],
            "path": "/types/string",
            "prevName": "Number",
            "prevPath": "/types/number",
            "nextName": "Boolean",
            "nextPath": "/types/boolean"
          },
          {
            "name": "Boolean",
            "subitems": [],
            "path": "/types/boolean",
            "prevName": "String",
            "prevPath": "/types/string",
            "nextName": "Array",
            "nextPath": "/types/array"
          },
          {
            "name": "Array",
            "subitems": [],
            "path": "/types/array",
            "prevName": "Boolean",
            "prevPath": "/types/boolean",
            "nextName": "Function",
            "nextPath": "/types/function"
          },
          {
            "name": "Function",
            "subitems": [],
            "path": "/types/function",
            "prevName": "Array",
            "prevPath": "/types/array",
            "nextName": "About",
            "nextPath": "/about"
          }
        ],
        "path": "/types",
        "prevName": "Generics",
        "prevPath": "/javascript/generics",
        "nextName": "Number",
        "nextPath": "/types/number"
      },
      {
        "name": "",
        "subitems": [
          {
            "name": "About",
            "subitems": [],
            "path": "/about",
            "prevName": "Function",
            "prevPath": "/types/function",
            "nextName": "Support",
            "nextPath": "/support"
          },
          {
            "name": "Support",
            "subitems": [],
            "path": "/support",
            "prevName": "About",
            "prevPath": "/about",
            "nextName": "Translate",
            "nextPath": "/translate"
          },
          {
            "name": "Translate",
            "subitems": [],
            "path": "/translate",
            "prevName": "Support",
            "prevPath": "/support",
            "nextName": "Sharing projects",
            "nextPath": "/share"
          },
          {
            "name": "Sharing projects",
            "subitems": [],
            "path": "/share",
            "prevName": "Translate",
            "prevPath": "/translate",
            "nextName": "Offline support",
            "nextPath": "/offline"
          },
          {
            "name": "Offline support",
            "subitems": [],
            "path": "/offline",
            "prevName": "Sharing projects",
            "prevPath": "/share",
            "nextName": "Save",
            "nextPath": "/save"
          },
          {
            "name": "Save",
            "subitems": [],
            "path": "/save",
            "prevName": "Offline support",
            "prevPath": "/offline",
            "nextName": "Command Line Interface",
            "nextPath": "/cli"
          }
        ],
        "prevName": "Function",
        "prevPath": "/types/function"
      },
      {
        "name": "",
        "subitems": [
          {
            "name": "Command Line Interface",
            "subitems": [],
            "path": "/cli",
            "prevName": "Save",
            "prevPath": "/save",
            "nextName": "Visual Studio Code support",
            "nextPath": "/code"
          },
          {
            "name": "Visual Studio Code support",
            "subitems": [],
            "path": "/code",
            "prevName": "Command Line Interface",
            "prevPath": "/cli",
            "nextName": "Blocks Embed",
            "nextPath": "/blocks-embed"
          },
          {
            "name": "Blocks Embed",
            "subitems": [],
            "path": "/blocks-embed",
            "prevName": "Visual Studio Code support",
            "prevPath": "/code",
            "nextName": "Hardware",
            "nextPath": "/device"
          }
        ],
        "prevName": "Save",
        "prevPath": "/save"
      },
      {
        "name": "Hardware",
        "subitems": [
          {
            "name": "Simulator",
            "subitems": [],
            "path": "/device/simulator",
            "prevName": "Hardware",
            "prevPath": "/device",
            "nextName": "USB",
            "nextPath": "/device/usb"
          },
          {
            "name": "USB",
            "subitems": [],
            "path": "/device/usb",
            "prevName": "Simulator",
            "prevPath": "/device/simulator"
          }
        ],
        "path": "/device",
        "prevName": "Blocks Embed",
        "prevPath": "/blocks-embed",
        "nextName": "Simulator",
        "nextPath": "/device/simulator"
      }
    ],
    "id": "brainpad",
    "title": "GHI Brain Pad - Blocks / Javascript editor",
    "name": "GHI Brain Pad",
    "description": "A Blocks / JavaScript code editor for the GHI Brain Pad.",
    "htmlDocIncludes": {}
  },
  "versions": {
    "target": "0.21.27",
    "pxt": "4.3.1"
  },
  "blocksprj": {
    "id": "blocksprj",
    "config": {
      "name": "{0}",
      "dependencies": {
        "brainpad": "*"
      },
      "description": "",
      "files": [
        "main.blocks",
        "main.ts",
        "README.md"
      ],
      "additionalFilePaths": []
    },
    "files": {
      "main.blocks": "<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"forever\"></block>\n</xml>",
      "main.ts": "\n",
      "README.md": ""
    }
  },
  "tsprj": {
    "id": "tsprj",
    "config": {
      "name": "{0}",
      "dependencies": {
        "brainpad": "*"
      },
      "description": "",
      "files": [
        "main.ts",
        "README.md"
      ],
      "additionalFilePaths": []
    },
    "files": {
      "main.ts": "\n",
      "README.md": ""
    }
  },
  "bundledpkgs": {
    "animation": {
      "README.md": "# Animations\n\nA small animation library.",
      "animation.ts": "/*\n    Animation library for sprites\n*/\n//% color=\"#03AA74\" weight=88 icon=\"\\uf021\"\nnamespace animation {\n    //Handles all the updates\n    let _onAnimUpdate: (() => void)[] = null;\n    let _onSpriteUpdate: (() => void)[] = null;\n\n    export class Animation {\n\n        frames: Image[];\n        index: number;\n        interval: number;\n        action: number;\n        lastTime: number;\n\n        constructor(action: number, interval: number) {\n            this.interval = interval;\n            this.index = -1;\n            this.action = action;\n            this.frames = [];\n            this.lastTime = control.millis();\n\n            this._init();\n        }\n\n        _init() {\n            if (!_onAnimUpdate) {\n                _onAnimUpdate = [];\n                game.eventContext().registerFrameHandler(15, () => {\n                    _onAnimUpdate.forEach(element => {\n                        element();\n                    });\n                });\n            }\n            _onAnimUpdate.push(() => this.update());\n        }\n\n        update() {\n            let currentTime = control.millis();\n            let dt = currentTime - this.lastTime;\n            if (dt >= this.interval && this.frames.length) {\n                this.index = (this.index + 1) % this.frames.length;\n                this.lastTime = currentTime;\n            }\n        }\n\n        getImage() {\n            return this.frames[this.index];\n        }\n\n        getAction() {\n            return this.action;\n        }\n\n        getInterval() {\n            return this.interval;\n        }\n\n        setInterval(interval: number) {\n            this.interval = interval;\n        }\n\n        /**\n        * Add an image frame to an animation\n        */\n        //% blockId=addAnimationFrame\n        //% block=\"add frame $frame=screen_image_picker to $this=variables_get(anim)\"\n        //% weight=40\n        //% help=animation/add-animation\n        addAnimationFrame(frame: Image) {\n            this.frames[++this.index] = frame;\n        }\n\n    }\n\n    //% shim=ENUM_GET\n    //% blockId=action_enum_shim\n    //% block=\"%arg\"\n    //% enumName=\"ActionKind\"\n    //% enumMemberName=\"action\"\n    //% enumPromptHint=\"e.g. Walking, Idle, Jumping, ...\"\n    //% enumInitialMembers=\"Walking, Idle, Jumping\"\n    //% weight=10\n    export function _actionEnumShim(arg: number) {\n        // This function should do nothing, but must take in a single\n        // argument of type number and return a number value.\n        return arg;\n    }\n\n    /**\n     * Create an animation\n     */\n    //% blockId=createAnimation\n    //% block=\"create animation of $action=action_enum_shim with interval $interval ms\"\n    //% interval.defl=1000\n    //% blockSetVariable=\"anim\"\n    //% weight=50\n    //% help=animation/create-animation\n    export function createAnimation(action: number, interval: number) {\n        return new Animation(action, interval);\n    }\n\n    /**\n     * Attach an animation to a sprite\n     */\n    //% blockId=attachAnimation\n    //% block=\"attach animation $set=variables_get(anim) to sprite $sprite=variables_get(mySprite)\"\n    //% weight=30\n    //% help=animation/attach-animation\n    export function attachAnimation(sprite: Sprite, set: Animation) {\n        if (!_onSpriteUpdate) {\n            //First attach register the update call back.\n            //Priority 16 is slightly lower than 15 for animation update loop.\n            //This is allow the animation to complete, so we have the new display ready to go.\n            _onSpriteUpdate = [];\n            game.eventContext().registerFrameHandler(16, () => {\n                _onSpriteUpdate.forEach(element => {\n                    element();\n                });\n            });\n        }\n\n        _onSpriteUpdate.push(() => {\n            if (sprite._action === set.action) {\n                let newImage = set.getImage();\n                //Update only if the image has changed\n                if (sprite.image !== newImage) {\n                    sprite.setImage(newImage)\n                }\n            }\n        })\n    }\n\n    /**\n     * Set an animation action to a sprite\n     */\n    //% blockId=setAction\n    //% block=\"activate animation $action=action_enum_shim on $sprite=variables_get(mySprite)\"\n    //% weight=20\n    //% help=animation/set-action\n    export function setAction(sprite: Sprite, action: number) {\n        sprite._action = action;\n    }\n\n}",
      "pxt.json": "{\n    \"name\": \"animation\",\n    \"description\": \"An animation library for sprite\",\n    \"files\": [\n        \"README.md\",\n        \"animation.ts\",\n        \"targetoverrides.ts\"\n    ],\n    \"public\": true,\n    \"dependencies\": {\n        \"game\": \"*\"\n    },\n    \"targetVersions\": {\n        \"target\": \"0.21.27\"\n    }\n}",
      "targetoverrides.ts": "// TODO any platform specific overrides"
    },
    "base": {
      "README.md": "# base\n\nThe base library, shared by all C++ targets (not only Codal-based).\n\n\n",
      "advmath.cpp": "#include \"pxtbase.h\"\n\nusing namespace std;\n\n#define SINGLE(op) return fromDouble(::op(toDouble(x)));\n\nnamespace Math_ {\n\n//%\nTNumber log2(TNumber x){SINGLE(log2)}\n//%\nTNumber exp(TNumber x){SINGLE(exp)}\n//%\nTNumber tanh(TNumber x){SINGLE(tanh)}\n//%\nTNumber sinh(TNumber x){SINGLE(sinh)}\n//%\nTNumber cosh(TNumber x){SINGLE(cosh)}\n//%\nTNumber atanh(TNumber x){SINGLE(atanh)}\n//%\nTNumber asinh(TNumber x){SINGLE(asinh)}\n//%\nTNumber acosh(TNumber x){SINGLE(acosh)}\n\n}",
      "buffer.cpp": "#include \"pxtbase.h\"\n#include <limits.h>\n\nusing namespace std;\n\n//% indexerGet=BufferMethods::getByte indexerSet=BufferMethods::setByte\nnamespace BufferMethods {\n//%\nuint8_t *getBytes(Buffer buf) {\n    return buf->data;\n}\n\n//%\nint getByte(Buffer buf, int off) {\n    if (buf && 0 <= off && off < buf->length)\n        return buf->data[off];\n    return 0;\n}\n\n//%\nvoid setByte(Buffer buf, int off, int v) {\n    if (buf && 0 <= off && off < buf->length)\n        buf->data[off] = v;\n}\n\nint writeBuffer(Buffer buf, int dstOffset, Buffer src, int srcOffset = 0, int length = -1) {\n    if (length < 0)\n        length = src->length;\n\n    if (srcOffset < 0 || dstOffset < 0 || dstOffset > buf->length)\n        return -1;\n\n    length = min(src->length - srcOffset, buf->length - dstOffset);\n\n    if (length < 0)\n        return -1;\n\n    if (buf == src) {\n        memmove(buf->data + dstOffset, src->data + srcOffset, length);\n    } else {\n        memcpy(buf->data + dstOffset, src->data + srcOffset, length);\n    }\n\n    return 0;\n}\n\n/**\n * Write a number in specified format in the buffer.\n */\n//%\nvoid setNumber(Buffer buf, NumberFormat format, int offset, TNumber value) {\n    if (offset < 0)\n        return;\n    setNumberCore(buf->data + offset, buf->length - offset, format, value);\n}\n\n/**\n * Read a number in specified format from the buffer.\n */\n//%\nTNumber getNumber(Buffer buf, NumberFormat format, int offset) {\n    if (offset < 0)\n        return fromInt(0);\n    return getNumberCore(buf->data + offset, buf->length - offset, format);\n}\n\n/** Returns the length of a Buffer object. */\n//% property\nint length(Buffer s) {\n    return s->length;\n}\n\n/**\n * Fill (a fragment) of the buffer with given value.\n */\n//%\nvoid fill(Buffer buf, int value, int offset = 0, int length = -1) {\n    if (offset < 0 || offset > buf->length)\n        return; // DEVICE_INVALID_PARAMETER;\n    if (length < 0)\n        length = buf->length;\n    length = min(length, buf->length - offset);\n    memset(buf->data + offset, value, length);\n}\n\n/**\n * Return a copy of a fragment of a buffer.\n */\n//%\nBuffer slice(Buffer buf, int offset = 0, int length = -1) {\n    offset = min((int)buf->length, offset);\n    if (length < 0)\n        length = buf->length;\n    length = min(length, buf->length - offset);\n    return mkBuffer(buf->data + offset, length);\n}\n\n/**\n * Shift buffer left in place, with zero padding.\n * @param offset number of bytes to shift; use negative value to shift right\n * @param start start offset in buffer. Default is 0.\n * @param length number of elements in buffer. If negative, length is set as the buffer length minus\n * start. eg: -1\n */\n//%\nvoid shift(Buffer buf, int offset, int start = 0, int length = -1) {\n    if (length < 0)\n        length = buf->length - start;\n    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||\n        offset == 0 || offset == INT_MIN)\n        return;\n    if (offset <= -length || offset >= length) {\n        fill(buf, 0);\n        return;\n    }\n\n    uint8_t *data = buf->data + start;\n    if (offset < 0) {\n        offset = -offset;\n        memmove(data + offset, data, length - offset);\n        memset(data, 0, offset);\n    } else {\n        length = length - offset;\n        memmove(data, data + offset, length);\n        memset(data + length, 0, offset);\n    }\n}\n\n/**\n * Convert a buffer to its hexadecimal representation.\n */\n//%\nString toHex(Buffer buf) {\n    const char *hex = \"0123456789abcdef\";\n    auto res = mkString(NULL, buf->length * 2);\n    for (int i = 0; i < buf->length; ++i) {\n        res->data[i << 1] = hex[buf->data[i] >> 4];\n        res->data[(i << 1) + 1] = hex[buf->data[i] & 0xf];\n    }\n    return res;\n}\n\n/**\n * Rotate buffer left in place.\n * @param offset number of bytes to shift; use negative value to shift right\n * @param start start offset in buffer. Default is 0.\n * @param length number of elements in buffer. If negative, length is set as the buffer length minus\n * start. eg: -1\n */\n//%\nvoid rotate(Buffer buf, int offset, int start = 0, int length = -1) {\n    if (length < 0)\n        length = buf->length - start;\n    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||\n        offset == 0 || offset == INT_MIN)\n        return;\n\n    if (offset < 0)\n        offset += length << 8; // try to make it positive\n    offset %= length;\n    if (offset < 0)\n        offset += length;\n\n    uint8_t *data = buf->data + start;\n\n    uint8_t *n_first = data + offset;\n    uint8_t *first = data;\n    uint8_t *next = n_first;\n    uint8_t *last = data + length;\n\n    while (first != next) {\n        uint8_t tmp = *first;\n        *first++ = *next;\n        *next++ = tmp;\n        if (next == last) {\n            next = n_first;\n        } else if (first == n_first) {\n            n_first = next;\n        }\n    }\n}\n\n/**\n * Write contents of `src` at `dstOffset` in current buffer.\n */\n//%\nvoid write(Buffer buf, int dstOffset, Buffer src) {\n    // srcOff and length not supported, we only do up to 4 args :/\n    writeBuffer(buf, dstOffset, src, 0, -1);\n}\n}\n\nnamespace control {\n/**\n * Create a new zero-initialized buffer.\n * @param size number of bytes in the buffer\n */\n//%\nBuffer createBuffer(int size) {\n    return mkBuffer(NULL, size);\n}\n}\n\nnamespace pxt {\nstatic int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {\n    if (szLeft < length) {\n        return -1;\n    }\n\n    if (swapBytes) {\n        uint8_t *p = dst + length;\n        for (int i = 0; i < length; ++i)\n            *--p = src[i];\n    } else {\n        if (length == 4 && ((uint32_t)dst & 3) == 0)\n            *(uint32_t *)dst = *(uint32_t *)src;\n        else if (length == 2 && ((uint32_t)dst & 1) == 0)\n            *(uint16_t *)dst = *(uint16_t *)src;\n        else\n            memcpy(dst, src, length);\n    }\n\n    return 0;\n}\n\nstatic int readBytes(uint8_t *src, uint8_t *dst, int length, bool swapBytes, int szLeft) {\n    if (szLeft < length) {\n        memset(dst, 0, length);\n        return -1;\n    }\n\n    if (swapBytes) {\n        uint8_t *p = src + length;\n        for (int i = 0; i < length; ++i)\n            dst[i] = *--p;\n    } else {\n        if (length == 4 && ((uint32_t)src & 3) == 0)\n            *(uint32_t *)dst = *(uint32_t *)src;\n        else if (length == 2 && ((uint32_t)src & 1) == 0)\n            *(uint16_t *)dst = *(uint16_t *)src;\n        else\n            memcpy(dst, src, length);\n    }\n\n    return 0;\n}\n\nvoid setNumberCore(uint8_t *buf, int szLeft, NumberFormat format, TNumber value) {\n    int8_t i8;\n    uint8_t u8;\n    int16_t i16;\n    uint16_t u16;\n    int32_t i32;\n    uint32_t u32;\n    float f32;\n    double f64;\n\n// Assume little endian\n#define WRITEBYTES(isz, swap, toInt)                                                               \\\n    isz = toInt(value);                                                                            \\\n    writeBytes(buf, (uint8_t *)&isz, sizeof(isz), swap, szLeft);                                   \\\n    break\n\n    switch (format) {\n    case NumberFormat::Int8LE:\n        WRITEBYTES(i8, false, toInt);\n    case NumberFormat::UInt8LE:\n        WRITEBYTES(u8, false, toInt);\n    case NumberFormat::Int16LE:\n        WRITEBYTES(i16, false, toInt);\n    case NumberFormat::UInt16LE:\n        WRITEBYTES(u16, false, toInt);\n    case NumberFormat::Int32LE:\n        WRITEBYTES(i32, false, toInt);\n    case NumberFormat::UInt32LE:\n        WRITEBYTES(u32, false, toUInt);\n\n    case NumberFormat::Int8BE:\n        WRITEBYTES(i8, true, toInt);\n    case NumberFormat::UInt8BE:\n        WRITEBYTES(u8, true, toInt);\n    case NumberFormat::Int16BE:\n        WRITEBYTES(i16, true, toInt);\n    case NumberFormat::UInt16BE:\n        WRITEBYTES(u16, true, toInt);\n    case NumberFormat::Int32BE:\n        WRITEBYTES(i32, true, toInt);\n    case NumberFormat::UInt32BE:\n        WRITEBYTES(u32, true, toUInt);\n\n    case NumberFormat::Float32LE:\n        WRITEBYTES(f32, false, toFloat);\n    case NumberFormat::Float32BE:\n        WRITEBYTES(f32, true, toFloat);\n    case NumberFormat::Float64LE:\n        WRITEBYTES(f64, false, toDouble);\n    case NumberFormat::Float64BE:\n        WRITEBYTES(f64, true, toDouble);\n    }\n}\n\nTNumber getNumberCore(uint8_t *buf, int szLeft, NumberFormat format) {\n    int8_t i8;\n    uint8_t u8;\n    int16_t i16;\n    uint16_t u16;\n    int32_t i32;\n    uint32_t u32;\n    float f32;\n    double f64;\n\n// Assume little endian\n#define READBYTES(isz, swap, conv)                                                                 \\\n    readBytes(buf, (uint8_t *)&isz, sizeof(isz), swap, szLeft);                                    \\\n    return conv(isz)\n\n    switch (format) {\n    case NumberFormat::Int8LE:\n        READBYTES(i8, false, fromInt);\n    case NumberFormat::UInt8LE:\n        READBYTES(u8, false, fromInt);\n    case NumberFormat::Int16LE:\n        READBYTES(i16, false, fromInt);\n    case NumberFormat::UInt16LE:\n        READBYTES(u16, false, fromInt);\n    case NumberFormat::Int32LE:\n        READBYTES(i32, false, fromInt);\n    case NumberFormat::UInt32LE:\n        READBYTES(u32, false, fromUInt);\n\n    case NumberFormat::Int8BE:\n        READBYTES(i8, true, fromInt);\n    case NumberFormat::UInt8BE:\n        READBYTES(u8, true, fromInt);\n    case NumberFormat::Int16BE:\n        READBYTES(i16, true, fromInt);\n    case NumberFormat::UInt16BE:\n        READBYTES(u16, true, fromInt);\n    case NumberFormat::Int32BE:\n        READBYTES(i32, true, fromInt);\n    case NumberFormat::UInt32BE:\n        READBYTES(u32, true, fromUInt);\n\n    case NumberFormat::Float32LE:\n        READBYTES(f32, false, fromFloat);\n    case NumberFormat::Float32BE:\n        READBYTES(f32, true, fromFloat);\n    case NumberFormat::Float64LE:\n        READBYTES(f64, false, fromDouble);\n    case NumberFormat::Float64BE:\n        READBYTES(f64, true, fromDouble);\n    }\n\n    return 0;\n}\n}",
      "buffer.ts": "/**\n * Control currents in Pins for analog/digital signals, servos, i2c, ...\n */\n//% color=#A80000 weight=85 icon=\"\\uf140\" advanced=true\n//% groups='[\"other\", \"Servo\", \"i2c\"]'\nnamespace pins {\n    /**\n     * Get the size in bytes of specified number format.\n     */\n    //%\n    export function sizeOf(format: NumberFormat) {\n        switch (format) {\n            case NumberFormat.Int8LE:\n            case NumberFormat.UInt8LE:\n            case NumberFormat.Int8BE:\n            case NumberFormat.UInt8BE:\n                return 1;\n            case NumberFormat.Int16LE:\n            case NumberFormat.UInt16LE:\n            case NumberFormat.Int16BE:\n            case NumberFormat.UInt16BE:\n                return 2;\n            case NumberFormat.Int32LE:\n            case NumberFormat.Int32BE:\n            case NumberFormat.UInt32BE:\n            case NumberFormat.UInt32LE:\n            case NumberFormat.Float32BE:\n            case NumberFormat.Float32LE:\n                return 4;\n            case NumberFormat.Float64BE:\n            case NumberFormat.Float64LE:\n                return 8;\n        }\n        return 0;\n    }\n\n    /**\n     * Create a new buffer initalized to bytes from given array.\n     * @param bytes data to initalize with\n     */\n    //%\n    export function createBufferFromArray(bytes: number[]) {\n        let buf = control.createBuffer(bytes.length)\n        for (let i = 0; i < bytes.length; ++i)\n            buf[i] = bytes[i]\n        return buf\n    }\n\n    function getFormat(pychar: string, isBig: boolean) {\n        switch (pychar) {\n            case 'B':\n                return NumberFormat.UInt8LE\n            case 'b':\n                return NumberFormat.Int8LE\n            case 'H':\n                return isBig ? NumberFormat.UInt16BE : NumberFormat.UInt16LE\n            case 'h':\n                return isBig ? NumberFormat.Int16BE : NumberFormat.Int16LE\n            case 'I':\n            case 'L':\n                return isBig ? NumberFormat.UInt32BE : NumberFormat.UInt32LE\n            case 'i':\n            case 'l':\n                return isBig ? NumberFormat.Int32BE : NumberFormat.Int32LE\n            case 'f':\n                return isBig ? NumberFormat.Float32BE : NumberFormat.Float32LE\n            case 'd':\n                return isBig ? NumberFormat.Float64BE : NumberFormat.Float64LE\n            default:\n                return null as NumberFormat\n        }\n    }\n\n    function packUnpackCore(format: string, nums: number[], buf: Buffer, isPack: boolean, off = 0) {\n        let isBig = false\n        let idx = 0\n        for (let i = 0; i < format.length; ++i) {\n            switch (format[i]) {\n                case ' ':\n                case '<':\n                case '=':\n                    isBig = false\n                    break\n                case '>':\n                case '!':\n                    isBig = true\n                    break\n                case 'x':\n                    off++\n                    break\n                default:\n                    let fmt = getFormat(format[i], isBig)\n                    if (fmt === null) {\n                        control.fail(\"Not supported format character: \" + format[i])\n                    } else {\n                        if (buf) {\n                            if (isPack)\n                                buf.setNumber(fmt, off, nums[idx++])\n                            else\n                                nums.push(buf.getNumber(fmt, off))\n                        }\n\n                        off += pins.sizeOf(fmt)\n                    }\n                    break\n            }\n        }\n        return off\n    }\n\n    export function packedSize(format: string) {\n        return packUnpackCore(format, null, null, true)\n    }\n\n    export function packBuffer(format: string, nums: number[]) {\n        let buf = control.createBuffer(packedSize(format))\n        packUnpackCore(format, nums, buf, true)\n        return buf\n    }\n\n    export function packIntoBuffer(format: string, buf: Buffer, offset: number, nums: number[]) {\n        packUnpackCore(format, nums, buf, true, offset)\n    }\n\n    export function unpackBuffer(format: string, buf: Buffer, offset = 0) {\n        let res: number[] = []\n        packUnpackCore(format, res, buf, false, offset)\n        return res\n    }\n}\n\n// see http://msgpack.org/ for the spec\n// it currently only implements numbers and their sequances\n// once we handle any type and typeof expressions we can do more\n\nnamespace msgpack {\n    function tagFormat(tag: number) {\n        switch (tag) {\n            case 0xCB: return NumberFormat.Float64BE\n            case 0xCC: return NumberFormat.UInt8BE\n            case 0xCD: return NumberFormat.UInt16BE\n            case 0xCE: return NumberFormat.UInt32BE\n            case 0xD0: return NumberFormat.Int8BE\n            case 0xD1: return NumberFormat.Int16BE\n            case 0xD2: return NumberFormat.Int32BE\n            default:\n                return null\n        }\n    }\n\n    function packNumberCore(buf: Buffer, offset: number, num: number) {\n        let tag = 0xCB\n        if (num == (num << 0) || num == (num >>> 0)) {\n            if (-31 <= num && num <= 127) {\n                if (buf) buf[offset] = num\n                return 1\n            } else if (0 <= num) {\n                if (num <= 0xff) {\n                    tag = 0xCC\n                } else if (num <= 0xffff) {\n                    tag = 0xCD\n                } else {\n                    tag = 0xCE\n                }\n            } else {\n                if (-0x7f <= num) {\n                    tag = 0xD0\n                } else if (-0x7fff <= num) {\n                    tag = 0xD1\n                } else {\n                    tag = 0xD2\n                }\n            }\n        }\n        let fmt = tagFormat(tag)\n        if (buf) {\n            buf[offset] = tag\n            buf.setNumber(fmt, offset + 1, num)\n        }\n        return pins.sizeOf(fmt) + 1\n    }\n\n    /**\n     * Unpacks a buffer into a number array.\n     */\n    export function unpackNumberArray(buf: Buffer, offset = 0): number[] {\n        let res: number[] = []\n\n        while (offset < buf.length) {\n            let fmt = tagFormat(buf[offset++])\n            if (fmt === null) {\n                let v = buf.getNumber(NumberFormat.Int8BE, offset - 1)\n                if (-31 <= v && v <= 127)\n                    res.push(v)\n                else\n                    return null\n            } else {\n                res.push(buf.getNumber(fmt, offset))\n                offset += pins.sizeOf(fmt)\n            }\n            // padding at the end\n            while (buf[offset] === 0xc1) offset++;\n        }\n\n        return res\n    }\n\n    /**\n     * Pack a number array into a buffer.\n     * @param nums the numbers to be packed\n     */\n    export function packNumberArray(nums: number[]): Buffer {\n        let off = 0\n        for (let n of nums) {\n            off += packNumberCore(null, off, n)\n        }\n        let buf = control.createBuffer(off)\n        off = 0\n        for (let n of nums) {\n            off += packNumberCore(buf, off, n)\n        }\n        return buf\n    }\n}\n\ninterface Buffer {\n    [index: number]: number;\n    // rest defined in buffer.cpp\n}",
      "console.ts": "/// <reference no-default-lib=\"true\"/>\n\n/**\n * Reading and writing data to the console output.\n */\n//% weight=12 color=#002050 icon=\"\\uf120\"\n//% advanced=true\nnamespace console {\n    type Listener = (text: string) => void;\n\n    //% whenUsed\n    const listeners: Listener[] = [function(text: string) { control.__log(text); }];\n\n    /**\n     * Write a line of text to the console output.\n     * @param value to send\n     */\n    //% weight=90\n    //% help=console/log blockGap=8\n    //% blockId=console_log block=\"console|log %text\"\n    //% text.shadowOptions.toString=true\n    export function log(text: string): void {\n        // pad text on the 32byte boundar\n        text += \"\\r\\n\";\n        // send to listeners\n        for (let i = 0; i < listeners.length; ++i)\n            listeners[i](text);\n    }\n\n    /**\n     * Write a name:value pair as a line of text to the console output.\n     * @param name name of the value stream, eg: \"x\"\n     * @param value to write\n     */\n    //% weight=88 blockGap=8\n    //% help=console/log-value\n    //% blockId=console_log_value block=\"console|log value %name|= %value\"\n    export function logValue(name: string, value: number): void {\n        log(name ? `${name}: ${value}` : `${value}`)\n    }\n\n    /**\n     * Adds a listener for the log messages\n     * @param listener\n     */\n    //%\n    export function addListener(listener: (text: string) => void) {\n        if (!listener) return;\n        listeners.push(listener);\n    }\n}",
      "control.cpp": "#include \"pxtbase.h\"\n\n\nnamespace control {\n    /**\n    * Gets the number of milliseconds elapsed since power on.\n    */\n    //% help=control/millis weight=50\n    //% blockId=control_running_time block=\"millis (ms)\"\n    int millis() {\n        return current_time_ms();\n    }\n\n    /**\n    * Used internally\n    */\n    //%\n    void internalOnEvent(int src, int value, Action handler, int flags = 16) {\n        registerWithDal(src, value, handler, flags);\n    }\n\n    /**\n     * Reset the device.\n     */\n    //% weight=30 async help=control/reset blockGap=8\n    //% blockId=\"control_reset\" block=\"reset\"\n    void reset() {\n        target_reset();\n    }\n\n    /**\n    * Block the current fiber for the given microseconds\n    * @param micros number of micro-seconds to wait. eg: 4\n    */\n    //% help=control/wait-micros weight=29 async\n    //% blockId=\"control_wait_us\" block=\"wait (µs)%micros\"\n    void waitMicros(int micros) {\n        sleep_us(micros);\n    }\n\n    /**\n     * Run other code in the parallel.\n     */\n    //% help=control/run-in-parallel handlerStatement=1\n    //% blockId=\"control_run_in_parallel\" block=\"run in parallel\" blockGap=8\n    void runInParallel(Action a) {\n        pxt::runInParallel(a);\n    }\n\n    /**\n    * Blocks the calling thread until the specified event is raised.\n    */\n    //% help=control/wait-for-event async\n    //% blockId=control_wait_for_event block=\"wait for event|from %src|with value %value\"\n    void waitForEvent(int src, int value) {\n        pxt::waitForEvent(src, value);\n    }\n\n    /**\n    * Derive a unique, consistent serial number of this device from internal data.\n    */\n    //% blockId=\"control_device_serial_number\" block=\"device serial number\" weight=9\n    //% help=control/device-serial-number\n    int deviceSerialNumber() {\n        return pxt::getSerialNumber();\n    }\n\n    /**\n    *\n    */\n    //%\n    void __log(String text) {\n        if (NULL == text) return;\n        pxt::sendSerial(text->data, text->length);\n    }\n}\n",
      "control.ts": "/**\n* Program controls and events.\n*/\n//% weight=10 color=\"#31bca3\" icon=\"\\uf110\" advanced=true\nnamespace control {\n    /**\n     * Deprecated, use ``control.runInParallel`` instead.\n     */\n    //% deprecated=1 hidden=1 help=control/run-in-background blockAllowMultiple=1 afterOnStart=true\n    //% blockId=\"control_run_in_background\" block=\"run in background\" blockGap=8 weight=0\n    export function runInBackground(a: () => void) {\n        control.runInParallel(a);\n    }\n\n    /**\n     * Display an error code and stop the program.\n     * @param code an error number to display. eg: 5\n     */\n    //% help=control/panic weight=29\n    //% blockId=\"control_panic\" block=\"panic %code\"\n    //% shim=pxtrt::panic\n    export function panic(code: number) { }\n\n    /**\n     * Display an error code and stop the program when the assertion is `false`.\n     */\n    //% help=control/assert weight=30\n    //% blockId=\"control_assert\" block=\"assert %cond|with value %code\"\n    export function assert(cond: boolean, code: number) {\n        if (!cond) {\n            fail(\"Assertion failed, code=\" + code)\n        }\n    }\n\n    export function fail(message: string) {\n    console.log(\"Fatal failure: \")\n        console.log(message)\n        panic(108)\n    }\n\n    export class AnimationQueue {\n        running: boolean;\n        eventID: number;\n        public interval: number;\n\n        constructor() {\n            this.running = false;\n            this.eventID = control.allocateNotifyEvent();\n            this.interval = 1;\n        }\n\n        /**\n         * Runs 'render' in a loop until it returns false or the 'stop' function is called\n         */\n        runUntilDone(render: () => boolean) {\n            const evid = this.eventID;\n\n            // if other animation, wait for turn\n            if (this.running)\n                control.waitForEvent(DAL.DEVICE_ID_NOTIFY, evid);\n\n            // check if the animation hasn't been cancelled since we've waiting\n            if (this.isCancelled(evid))\n                return;\n\n            // run animation\n            this.running = true;\n            while (this.running\n                && !this.isCancelled(evid)\n                && render()) {\n                pause(this.interval);\n            }\n\n            // check if the animation hasn't been cancelled since we've been waiting\n            if (this.isCancelled(evid))\n                return;\n\n            // we're done\n            this.running = false;\n            // unblock 1 fiber\n            control.raiseEvent(DAL.DEVICE_ID_NOTIFY_ONE, this.eventID);\n        }\n\n        isCancelled(evid: number) {\n            return this.eventID !== evid;\n        }\n\n        /**\n         * Cancels the current running animation and clears the queue\n         */\n        cancel() {\n            if (this.running) {\n                this.running = false;\n                const evid = this.eventID;\n                this.eventID = control.allocateNotifyEvent();\n                // unblock fibers\n                control.raiseEvent(DAL.DEVICE_ID_NOTIFY, evid);\n            }\n        }\n    }\n\n    class PollEvent {\n        public eid: number;\n        public vid: number;\n        public start: number;\n        public timeOut: number;\n        public condition: () => boolean;\n        public once: boolean;\n        constructor(eid: number, vid: number, start: number, timeOut: number, condition: () => boolean, once: boolean) {\n            this.eid = eid;\n            this.vid = vid;\n            this.start = start;\n            this.timeOut = timeOut;\n            this.condition = condition;\n            this.once = once;\n        }\n    }\n\n    let _pollEventQueue: PollEvent[] = undefined;\n\n    function pollEvents() {\n        while (_pollEventQueue.length > 0) {\n            const now = control.millis();\n            for (let i = 0; i < _pollEventQueue.length; ++i) {\n                const ev = _pollEventQueue[i];\n                if (ev.condition() || (ev.timeOut > 0 && now - ev.start > ev.timeOut)) {\n                    control.raiseEvent(ev.eid, ev.vid);\n                    if (ev.once) {\n                        _pollEventQueue.splice(i, 1);\n                        --i;\n                    }\n                }\n            }\n            pause(50);\n        }\n        // release fiber\n        _pollEventQueue = undefined;\n    }\n\n    export function __queuePollEvent(timeOut: number, condition: () => boolean, handler: () => void) {\n        const ev = new PollEvent(\n            control.allocateNotifyEvent(),\n            1,\n            control.millis(),\n            timeOut,\n            condition,\n            !handler\n        );\n\n        // start polling fiber if needed\n        if (!_pollEventQueue) {\n            _pollEventQueue = [ev];\n            control.runInParallel(pollEvents);\n        }\n        else {\n            // add to the queue\n            _pollEventQueue.push(ev)\n        }\n\n        // register event\n        if (handler)\n            control.onEvent(ev.eid, ev.vid, handler);\n        else // or wait\n            control.waitForEvent(ev.eid, ev.vid);\n    }\n\n    //% shim=pxt::getConfig\n    export declare function getConfigValue(key: int32, defl: int32): number;\n}\n\n/**\n * Busy wait for a condition to be true\n * @param condition condition to test for\n * @param timeOut if positive, maximum duration to wait for in milliseconds\n */\n//% blockId=\"pxt_pause_until\"\nfunction pauseUntil(condition: () => boolean, timeOut?: number): void {\n    if (!condition || condition()) return; // optimistic path\n    if (!timeOut) timeOut = 0;\n    control.__queuePollEvent(timeOut, condition, undefined);\n}\n\n/**\n * Repeats the code forever in the background. On each iteration, allows other codes to run.\n * @param body code to execute\n */\n//% help=loops/forever weight=100 afterOnStart=true blockNamespace=\"loops\"\n//% blockId=forever block=\"forever\" blockAllowMultiple=1\nfunction forever(a: () => void): void {\n    loops.forever(a);\n}\n\n/**\n * Pause for the specified time in milliseconds\n * @param ms how long to pause for, eg: 100, 200, 500, 1000, 2000\n */\n//% help=loops/pause weight=99\n//% async block=\"pause %pause=timePicker|ms\"\n//% blockId=device_pause blockNamespace=\"loops\"\nfunction pause(ms: number): void {\n    loops.pause(ms);\n}\n\n/**\n * Tagged hex literal converter\n */\n//% shim=@hex\nfunction hex(lits: any, ...args: any[]): Buffer { return null }\n\n// micro:bit compatibility\n// these functions allow some level of reuse\n// between micro:bit and other maker-style editors\nnamespace basic {\n    export function pause(millis: number) {\n        loops.pause(millis);\n    }\n}",
      "core.cpp": "#include \"pxtbase.h\"\n#include <limits.h>\n#include <stdlib.h>\n\nusing namespace std;\n\n#define p10(v) __builtin_powi(10, v)\n\nnamespace pxt {\n\nstatic HandlerBinding *handlerBindings;\n\nHandlerBinding *findBinding(int source, int value) {\n    for (auto p = handlerBindings; p; p = p->next) {\n        if (p->source == source && p->value == value) {\n            return p;\n        }\n    }\n    return 0;\n}\n\nvoid setBinding(int source, int value, Action act) {\n    auto curr = findBinding(source, value);\n    incr(act);\n    if (curr) {\n        decr(curr->action);\n        curr->action = act;\n        return;\n    }\n    curr = new HandlerBinding();\n    curr->next = handlerBindings;\n    curr->source = source;\n    curr->value = value;\n    curr->action = act;\n    handlerBindings = curr;\n}\n\nstatic const uint16_t emptyString[]\n    __attribute__((aligned(4))) = {0xffff, PXT_REF_TAG_STRING, 0, 0};\n\nstatic const uint16_t emptyBuffer[]\n    __attribute__((aligned(4))) = {0xffff, PXT_REF_TAG_BUFFER, 0, 0};\n\nString mkString(const char *data, int len) {\n    if (len < 0)\n        len = strlen(data);\n    if (len == 0)\n        return (String)emptyString;\n    String r = new (::operator new(sizeof(BoxedString) + len + 1)) BoxedString();\n    r->length = len;\n    if (data)\n        memcpy(r->data, data, len);\n    r->data[len] = 0;\n    MEMDBG(\"mkString: len=%d => %p\", len, r);\n    return r;\n}\n\nBuffer mkBuffer(const uint8_t *data, int len) {\n    if (len <= 0)\n        return (Buffer)emptyBuffer;\n    Buffer r = new (::operator new(sizeof(BoxedBuffer) + len)) BoxedBuffer();\n    r->length = len;\n    if (data)\n        memcpy(r->data, data, len);\n    else\n        memset(r->data, 0, len);\n    MEMDBG(\"mkBuffer: len=%d => %p\", len, r);\n    return r;\n}\n\n#ifndef X86_64\nTNumber mkNaN() {\n    // TODO optimize\n    return fromDouble(NAN);\n}\n#endif\n\nstatic unsigned random_value = 0xC0DA1;\n\nvoid seedRandom(unsigned seed) {\n    random_value = seed;\n}\n\nunsigned getRandom(unsigned max) {\n    unsigned m, result;\n\n    do {\n        m = (unsigned)max;\n        result = 0;\n\n        do {\n            // Cycle the LFSR (Linear Feedback Shift Register).\n            // We use an optimal sequence with a period of 2^32-1, as defined by Bruce Schneier here\n            // (a true legend in the field!),\n            // For those interested, it's documented in his paper:\n            // \"Pseudo-Random Sequence Generator for 32-Bit CPUs: A fast, machine-independent\n            // generator for 32-bit Microprocessors\"\n            // https://www.schneier.com/paper-pseudorandom-sequence.html\n            unsigned r = random_value;\n\n            r = ((((r >> 31) ^ (r >> 6) ^ (r >> 4) ^ (r >> 2) ^ (r >> 1) ^ r) & 1) << 31) |\n                (r >> 1);\n\n            random_value = r;\n\n            result = ((result << 1) | (r & 0x00000001));\n        } while (m >>= 1);\n    } while (result > (unsigned)max);\n\n    return result;\n}\n\nPXT_DEF_STRING(sTrue, \"\\x04\\x00true\")\nPXT_DEF_STRING(sFalse, \"\\x05\\x00\"\n                       \"false\")\nPXT_DEF_STRING(sUndefined, \"\\x09\\x00undefined\")\nPXT_DEF_STRING(sNull, \"\\x04\\x00null\")\nPXT_DEF_STRING(sObject, \"\\x08\\x00[Object]\")\nPXT_DEF_STRING(sFunction, \"\\x0A\\x00[Function]\")\nPXT_DEF_STRING(sNaN, \"\\x03\\x00NaN\")\nPXT_DEF_STRING(sInf, \"\\x08\\x00Infinity\")\nPXT_DEF_STRING(sMInf, \"\\x09\\x00-Infinity\")\n} // namespace pxt\n\n#ifndef X86_64\n\nnamespace String_ {\n\n//%\nString mkEmpty() {\n    return mkString(\"\", 0);\n}\n\n//%\nString fromCharCode(int code) {\n    char buf[] = {(char)code, 0};\n    return mkString(buf, 1);\n}\n\n//%\nString charAt(String s, int pos) {\n    if (s && 0 <= pos && pos < s->length) {\n        return fromCharCode(s->data[pos]);\n    } else {\n        return mkEmpty();\n    }\n}\n\n//%\nTNumber charCodeAt(String s, int pos) {\n    if (s && 0 <= pos && pos < s->length) {\n        return fromInt(s->data[pos]);\n    } else {\n        return mkNaN();\n    }\n}\n\n//%\nString concat(String s, String other) {\n    if (!s)\n        s = (String)sNull;\n    if (!other)\n        other = (String)sNull;\n    if (s->length == 0)\n        return (String)incrRC(other);\n    if (other->length == 0)\n        return (String)incrRC(s);\n    String r = mkString(NULL, s->length + other->length);\n    memcpy(r->data, s->data, s->length);\n    memcpy(r->data + s->length, other->data, other->length);\n    return r;\n}\n\nint compare(TValue a, TValue b) {\n    if (a == b)\n        return 0;\n\n    ValType ta = valType(a);\n    ValType tb = valType(b);\n\n    // TODO we assume here that undefined, null, true, false, etc\n    // are all less than strings - this isn't quite JS semantics\n    if (ta == ValType::String && isSpecial(b))\n        return 1;\n\n    if (tb == ValType::String && isSpecial(a))\n        return -1;\n\n    // conversions for numbers\n    if (ta != ValType::String) {\n        auto aa = numops::toString(a);\n        auto r = compare((TValue)aa, b);\n        decrRC(aa);\n        return r;\n    }\n\n    if (tb != ValType::String) {\n        auto bb = numops::toString(b);\n        auto r = compare(a, (TValue)bb);\n        decrRC(bb);\n        return r;\n    }\n\n    auto s = (String)a;\n    auto that = (String)b;\n\n    int compareResult = strcmp(s->data, that->data);\n    if (compareResult < 0)\n        return -1;\n    else if (compareResult > 0)\n        return 1;\n    return 0;\n}\n\n//%\nint length(String s) {\n    return s->length;\n}\n\n#define isspace(c) ((c) == ' ')\n\ndouble mystrtod(const char *p, char **endp) {\n    while (isspace(*p))\n        p++;\n    double m = 1;\n    double v = 0;\n    int dot = 0;\n    if (*p == '+')\n        p++;\n    if (*p == '-') {\n        m = -1;\n        p++;\n    }\n    if (*p == '0' && (p[1] | 0x20) == 'x') {\n        return m * strtol(p, endp, 16);\n    }\n    while (*p) {\n        int c = *p - '0';\n        if (0 <= c && c <= 9) {\n            v *= 10;\n            v += c;\n            if (dot)\n                m /= 10;\n        } else if (!dot && *p == '.') {\n            dot = 1;\n        } else if (*p == 'e' || *p == 'E') {\n            break;\n        } else {\n            while (isspace(*p))\n                p++;\n            if (*p)\n                return NAN;\n            break;\n        }\n        p++;\n    }\n\n    v *= m;\n\n    if (*p) {\n        p++;\n        int pw = strtol(p, endp, 10);\n        v *= p10(pw);\n    } else {\n        *endp = (char *)p;\n    }\n\n    return v;\n}\n\n//%\nTNumber toNumber(String s) {\n    // JSCHECK\n    char *endptr;\n    double v = mystrtod(s->data, &endptr);\n    if (endptr != s->data + s->length)\n        v = NAN;\n    else if (v == 0.0 || v == -0.0)\n        v = v;\n    else if (!isnormal(v))\n        v = NAN;\n    return fromDouble(v);\n}\n\n//%\nString substr(String s, int start, int length) {\n    if (length <= 0)\n        return mkEmpty();\n    if (start < 0)\n        start = max(s->length + start, 0);\n    length = min(length, s->length - start);\n    return mkString(s->data + start, length);\n}\n\n//%\nint indexOf(String s, String searchString, int start) {\n    if (!s || !searchString)\n        return -1;\n    if (start < 0 || start + searchString->length > s->length)\n        return -1;\n    const char *match = strstr(((const char *)s->data + start), searchString->data);\n    if (NULL == match)\n        return -1;\n    return match - s->data;\n}\n\n//%\nint includes(String s, String searchString, int start) {\n    return -1 != indexOf(s, searchString, start);\n}\n\n} // namespace String_\n\nnamespace Boolean_ {\n//%\nbool bang(int v) {\n    return v == 0;\n}\n} // namespace Boolean_\n\nnamespace pxt {\n\n// ES5 9.5, 9.6\nunsigned toUInt(TNumber v) {\n    if (isNumber(v))\n        return numValue(v);\n    if (isSpecial(v)) {\n        if ((intptr_t)v >> 6)\n            return 1;\n        else\n            return 0;\n    }\n    if (!v)\n        return 0;\n\n    double num = toDouble(v);\n    if (!isnormal(num))\n        return 0;\n    double rem = fmod(trunc(num), 4294967296.0);\n    if (rem < 0.0)\n        rem += 4294967296.0;\n    return (unsigned)rem;\n}\nint toInt(TNumber v) {\n    return (int)toUInt(v);\n}\n\n// only support double in tagged mode\ndouble toDouble(TNumber v) {\n    if (isTagged(v))\n        return toInt(v);\n\n    // JSCHECK\n    ValType t = valType(v);\n    if (t == ValType::Number) {\n        BoxedNumber *p = (BoxedNumber *)v;\n        return p->num;\n    } else if (t == ValType::String) {\n        return toDouble(String_::toNumber((String)v));\n    } else {\n        return NAN;\n    }\n}\n\nfloat toFloat(TNumber v) {\n    // TODO optimize?\n    return (float)toDouble(v);\n}\n\nTNumber fromDouble(double r) {\n#ifndef PXT_BOX_DEBUG\n    int ri = ((int)r) << 1;\n    if ((ri >> 1) == r)\n        return (TNumber)(ri | 1);\n#endif\n    BoxedNumber *p = new BoxedNumber();\n    p->num = r;\n    MEMDBG(\"mkNum: %d/1000 => %p\", (int)(r * 1000), p);\n    return (TNumber)p;\n}\n\nTNumber fromFloat(float r) {\n    // TODO optimize\n    return fromDouble(r);\n}\n\nTNumber fromInt(int v) {\n    if (canBeTagged(v))\n        return TAG_NUMBER(v);\n    return fromDouble(v);\n}\n\nTNumber fromUInt(unsigned v) {\n#ifndef PXT_BOX_DEBUG\n    if (v <= 0x3fffffff)\n        return TAG_NUMBER(v);\n#endif\n    return fromDouble(v);\n}\n\nTValue fromBool(bool v) {\n    if (v)\n        return TAG_TRUE;\n    else\n        return TAG_FALSE;\n}\n\nTNumber eqFixup(TNumber v) {\n    if (v == TAG_NULL)\n        return TAG_UNDEFINED;\n    if (v == TAG_TRUE)\n        return TAG_NUMBER(1);\n    if (v == TAG_FALSE)\n        return TAG_NUMBER(0);\n    return v;\n}\n\nbool eqq_bool(TValue a, TValue b) {\n    // TODO improve this\n\n    if (a == b)\n        return true;\n\n    ValType ta = valType(a);\n    ValType tb = valType(b);\n\n    if (ta == ValType::String || tb == ValType::String)\n        return String_::compare(a, b) == 0;\n\n    if (ta != tb)\n        return false;\n\n#ifndef PXT_BOX_DEBUG\n    int aa = (int)a;\n    int bb = (int)b;\n\n    // if at least one of the values is tagged, they are not equal\n    if ((aa | bb) & 3)\n        return false;\n#endif\n\n    if (ta == ValType::Number)\n        return toDouble(a) == toDouble(b);\n    else\n        return a == b;\n}\n\nbool eq_bool(TValue a, TValue b) {\n    return eqq_bool(eqFixup(a), eqFixup(b));\n}\n\n//%\nbool switch_eq(TValue a, TValue b) {\n    if (eqq_bool(eqFixup(a), eqFixup(b))) {\n        decr(b);\n        return true;\n    }\n    return false;\n}\n\n} // namespace pxt\n\nnamespace langsupp {\n//%\nTValue ptreq(TValue a, TValue b) {\n    return eq_bool(a, b) ? TAG_TRUE : TAG_FALSE;\n}\n\n//%\nTValue ptreqq(TValue a, TValue b) {\n    return eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;\n}\n\n//%\nTValue ptrneq(TValue a, TValue b) {\n    return !eq_bool(a, b) ? TAG_TRUE : TAG_FALSE;\n}\n\n//%\nTValue ptrneqq(TValue a, TValue b) {\n    return !eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;\n}\n} // namespace langsupp\n\n#define NUMOP(op) return fromDouble(toDouble(a) op toDouble(b));\n#define BITOP(op) return fromInt(toInt(a) op toInt(b));\nnamespace numops {\n\n//%\nint toBool(TValue v) {\n    if (isTagged(v)) {\n        if (v == TAG_UNDEFINED || v == TAG_NULL || v == TAG_FALSE || v == TAG_NUMBER(0))\n            return 0;\n        else\n            return 1;\n    }\n\n    ValType t = valType(v);\n    if (t == ValType::String) {\n        String s = (String)v;\n        if (s->length == 0)\n            return 0;\n    } else if (t == ValType::Number) {\n        double x = toDouble(v);\n        if (isnan(x) || x == 0.0 || x == -0.0)\n            return 0;\n        else\n            return 1;\n    }\n\n    return 1;\n}\n\n//%\nint toBoolDecr(TValue v) {\n    if (v == TAG_TRUE)\n        return 1;\n    if (v == TAG_FALSE)\n        return 0;\n    int r = toBool(v);\n    decr(v);\n    return r;\n}\n\n// TODO\n// The integer, non-overflow case for add/sub/bit opts is handled in assembly\n\n//%\nTNumber adds(TNumber a, TNumber b){NUMOP(+)}\n\n//%\nTNumber subs(TNumber a, TNumber b){NUMOP(-)}\n\n//%\nTNumber muls(TNumber a, TNumber b) {\n    if (bothNumbers(a, b)) {\n        int aa = (int)a;\n        int bb = (int)b;\n        // if both operands fit 15 bits, the result will not overflow int\n        if ((aa >> 15 == 0 || aa >> 15 == -1) && (bb >> 15 == 0 || bb >> 15 == -1)) {\n            // it may overflow 31 bit int though - use fromInt to convert properly\n            return fromInt((aa >> 1) * (bb >> 1));\n        }\n    }\n    NUMOP(*)\n}\n\n//%\nTNumber div(TNumber a, TNumber b){NUMOP(/)}\n\n//%\nTNumber mod(TNumber a, TNumber b) {\n    if (isNumber(a) && isNumber(b) && numValue(b))\n        BITOP(%)\n    return fromDouble(fmod(toDouble(a), toDouble(b)));\n}\n\n//%\nTNumber lsls(TNumber a, TNumber b){BITOP(<<)}\n\n//%\nTNumber lsrs(TNumber a, TNumber b) {\n    return fromUInt(toUInt(a) >> toUInt(b));\n}\n\n//%\nTNumber asrs(TNumber a, TNumber b){BITOP(>>)}\n\n//%\nTNumber eors(TNumber a, TNumber b){BITOP (^)}\n\n//%\nTNumber orrs(TNumber a, TNumber b){BITOP(|)}\n\n//%\nTNumber bnot(TNumber a) {\n    return fromInt(~toInt(a));\n}\n\n//%\nTNumber ands(TNumber a, TNumber b) {\n    BITOP(&)\n}\n\n#define CMPOP_RAW(op)                                                                              \\\n    if (bothNumbers(a, b))                                                                         \\\n        return (int)a op((int)b);                                                                  \\\n    return toDouble(a) op toDouble(b);\n\n#define CMPOP(op)                                                                                  \\\n    if (bothNumbers(a, b))                                                                         \\\n        return ((int)a op((int)b)) ? TAG_TRUE : TAG_FALSE;                                         \\\n    return toDouble(a) op toDouble(b) ? TAG_TRUE : TAG_FALSE;\n\n//%\nbool lt_bool(TNumber a, TNumber b){CMPOP_RAW(<)}\n\n//%\nTNumber le(TNumber a, TNumber b){CMPOP(<=)}\n\n//%\nTNumber lt(TNumber a, TNumber b){CMPOP(<)}\n\n//%\nTNumber ge(TNumber a, TNumber b){CMPOP(>=)}\n\n//%\nTNumber gt(TNumber a, TNumber b){CMPOP(>)}\n\n//%\nTNumber eq(TNumber a, TNumber b) {\n    return pxt::eq_bool(a, b) ? TAG_TRUE : TAG_FALSE;\n}\n\n//%\nTNumber neq(TNumber a, TNumber b) {\n    return !pxt::eq_bool(a, b) ? TAG_TRUE : TAG_FALSE;\n}\n\n//%\nTNumber eqq(TNumber a, TNumber b) {\n    return pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;\n}\n\n//%\nTNumber neqq(TNumber a, TNumber b) {\n    return !pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;\n}\n\nvoid mycvt(double d, char *buf) {\n    if (d < 0) {\n        *buf++ = '-';\n        d = -d;\n    }\n\n    if (!d) {\n        *buf++ = '0';\n        *buf++ = 0;\n        return;\n    }\n\n    int pw = (int)log10(d);\n    int e = 1;\n    int beforeDot = 1;\n\n    if (0.000001 <= d && d < 1e21) {\n        if (pw > 0) {\n            d /= p10(pw);\n            beforeDot = 1 + pw;\n        }\n    } else {\n        d /= p10(pw);\n        e = pw;\n    }\n\n    int sig = 0;\n    while (sig < 17 || beforeDot > 0) {\n        // printf(\"%f sig=%d bd=%d\\n\", d, sig, beforeDot);\n        int c = (int)d;\n        *buf++ = '0' + c;\n        d = (d - c) * 10;\n        if (--beforeDot == 0)\n            *buf++ = '.';\n        if (sig || c)\n            sig++;\n    }\n\n    buf--;\n    while (*buf == '0')\n        buf--;\n    if (*buf == '.')\n        buf--;\n    buf++;\n\n    if (e != 1) {\n        *buf++ = 'e';\n        itoa(e, buf);\n    } else {\n        *buf = 0;\n    }\n}\n\nString toString(TValue v) {\n    ValType t = valType(v);\n\n    if (t == ValType::String) {\n        return (String)(void *)incr(v);\n    } else if (t == ValType::Number) {\n        char buf[64];\n\n        if (isNumber(v)) {\n            itoa(numValue(v), buf);\n            return mkString(buf);\n        }\n\n        double x = toDouble(v);\n\n#ifdef PXT_BOX_DEBUG\n        if (x == (int)x) {\n            itoa((int)x, buf);\n            return mkString(buf);\n        }\n#endif\n\n        if (isnan(x))\n            return (String)(void *)sNaN;\n        if (isinf(x)) {\n            if (x < 0)\n                return (String)(void *)sMInf;\n            else\n                return (String)(void *)sInf;\n        }\n        mycvt(x, buf);\n\n        return mkString(buf);\n    } else if (t == ValType::Function) {\n        return (String)(void *)sFunction;\n    } else {\n        if (v == TAG_UNDEFINED)\n            return (String)(void *)sUndefined;\n        else if (v == TAG_FALSE)\n            return (String)(void *)sFalse;\n        else if (v == TAG_TRUE)\n            return (String)(void *)sTrue;\n        else if (v == TAG_NULL)\n            return (String)(void *)sNull;\n\n        auto vt = getVTable((RefObject *)v);\n        if (vt->methods[2]) {\n            // custom toString() method\n            // after running action, make sure it's actually a string\n            return stringConv(runAction1((Action)vt->methods[2], v));\n        }\n        return (String)(void *)sObject;\n    }\n}\n\nString stringConv(TValue v) {\n    ValType t = valType(v);\n    if (t == ValType::String) {\n        return (String)v;\n    } else {\n        auto r = toString(v);\n        decr(v);\n        return r;\n    }\n}\n} // namespace numops\n\nnamespace Math_ {\n//%\nTNumber pow(TNumber x, TNumber y) {\n#ifdef PXT_POWI\n    // regular pow() from math.h is 4k of code\n    return fromDouble(__builtin_powi(toDouble(x), toInt(y)));\n#else\n    return fromDouble(::pow(toDouble(x), toDouble(y)));\n#endif\n}\n\n//%\nTNumber atan2(TNumber y, TNumber x) {\n    return fromDouble(::atan2(toDouble(y), toDouble(x)));\n}\n\ndouble randomDouble() {\n    return getRandom(UINT_MAX) / ((double)UINT_MAX + 1) +\n           getRandom(0xffffff) / ((double)UINT_MAX * 0xffffff);\n}\n\n//%\nTNumber random() {\n    return fromDouble(randomDouble());\n}\n\n//%\nTNumber randomRange(TNumber min, TNumber max) {\n    if (isNumber(min) && isNumber(max)) {\n        int mini = numValue(min);\n        int maxi = numValue(max);\n        if (mini > maxi) {\n            int temp = mini;\n            mini = maxi;\n            maxi = temp;\n        }\n        if (maxi == mini)\n            return fromInt(mini);\n        else\n            return fromInt(mini + getRandom(maxi - mini));\n    } else {\n        double mind = toDouble(min);\n        double maxd = toDouble(max);\n        if (mind > maxd) {\n            double temp = mind;\n            mind = maxd;\n            maxd = temp;\n        }\n        if (maxd == mind)\n            return fromDouble(mind);\n        else {\n            return fromDouble(mind + randomDouble() * (maxd - mind));\n        }\n    }\n}\n\n#define SINGLE(op) return fromDouble(::op(toDouble(x)));\n\n//%\nTNumber log(TNumber x){SINGLE(log)}\n\n//%\nTNumber log10(TNumber x){SINGLE(log10)}\n\n//%\nTNumber tan(TNumber x){SINGLE(tan)}\n\n//%\nTNumber sin(TNumber x){SINGLE(sin)}\n\n//%\nTNumber cos(TNumber x){SINGLE(cos)}\n\n//%\nTNumber atan(TNumber x){SINGLE(atan)}\n\n//%\nTNumber asin(TNumber x){SINGLE(asin)}\n\n//%\nTNumber acos(TNumber x){SINGLE(acos)}\n\n//%\nTNumber sqrt(TNumber x){SINGLE(sqrt)}\n\n//%\nTNumber floor(TNumber x){SINGLE(floor)}\n\n//%\nTNumber ceil(TNumber x){SINGLE(ceil)}\n\n//%\nTNumber trunc(TNumber x){SINGLE(trunc)}\n\n//%\nTNumber round(TNumber x) {\n    // In C++, round(-1.5) == -2, while in JS, round(-1.5) == -1. Align to the JS convention for\n    // consistency between simulator and device. The following does rounding with ties (x.5) going\n    // towards positive infinity.\n    return fromDouble(::floor(toDouble(x) + 0.5));\n}\n\n//%\nint imul(int x, int y) {\n    return x * y;\n}\n\n//%\nint idiv(int x, int y) {\n    return x / y;\n}\n} // namespace Math_\n\nnamespace Array_ {\n//%\nRefCollection *mk(unsigned flags) {\n    auto r = new RefCollection();\n    MEMDBG(\"mkColl: => %p\", r);\n    return r;\n}\n//%\nint length(RefCollection *c) {\n    return c->length();\n}\n//%\nvoid setLength(RefCollection *c, int newLength) {\n    c->setLength(newLength);\n}\n//%\nvoid push(RefCollection *c, TValue x) {\n    c->push(x);\n}\n//%\nTValue pop(RefCollection *c) {\n    return c->pop();\n}\n//%\nTValue getAt(RefCollection *c, int x) {\n    return c->getAt(x);\n}\n//%\nvoid setAt(RefCollection *c, int x, TValue y) {\n    c->setAt(x, y);\n}\n//%\nTValue removeAt(RefCollection *c, int x) {\n    return c->removeAt(x);\n}\n//%\nvoid insertAt(RefCollection *c, int x, TValue value) {\n    c->insertAt(x, value);\n}\n//%\nint indexOf(RefCollection *c, TValue x, int start) {\n    return c->indexOf(x, start);\n}\n//%\nbool removeElement(RefCollection *c, TValue x) {\n    return c->removeElement(x);\n}\n} // namespace Array_\n\nnamespace pxt {\n//%\nvoid *ptrOfLiteral(int offset);\n\n//%\nunsigned programSize() {\n    return bytecode[17] * 2;\n}\n\n//%\nint getConfig(int key, int defl) {\n    int *cfgData;\n\n#ifdef PXT_BOOTLOADER_CFG_ADDR\n    cfgData = *(int **)(PXT_BOOTLOADER_CFG_ADDR);\n#ifdef PXT_BOOTLOADER_CFG_MAGIC\n    cfgData++;\n    if ((void*)0x200 <= cfgData && cfgData < (void*)PXT_BOOTLOADER_CFG_ADDR &&\n        cfgData[-1] == (int)PXT_BOOTLOADER_CFG_MAGIC)\n#endif\n        for (int i = 0;; i += 2) {\n            if (cfgData[i] == key)\n                return cfgData[i + 1];\n            if (cfgData[i] == 0)\n                break;\n        }\n#endif\n\n    cfgData = *(int **)&bytecode[18];\n    for (int i = 0;; i += 2) {\n        if (cfgData[i] == key)\n            return cfgData[i + 1];\n        if (cfgData[i] == 0)\n            return defl;\n    }\n}\n\n} // namespace pxt\n\nnamespace pxtrt {\n//%\nTValue ldloc(RefLocal *r) {\n    return r->v;\n}\n\n//%\nTValue ldlocRef(RefRefLocal *r) {\n    TValue tmp = r->v;\n    incr(tmp);\n    return tmp;\n}\n\n//%\nvoid stloc(RefLocal *r, TValue v) {\n    r->v = v;\n}\n\n//%\nvoid stlocRef(RefRefLocal *r, TValue v) {\n    decr(r->v);\n    r->v = v;\n}\n\n//%\nRefLocal *mkloc() {\n    auto r = new RefLocal();\n    MEMDBG(\"mkloc: => %p\", r);\n    return r;\n}\n\n//%\nRefRefLocal *mklocRef() {\n    auto r = new RefRefLocal();\n    MEMDBG(\"mklocRef: => %p\", r);\n    return r;\n}\n\n// All of the functions below unref() self. This is for performance reasons -\n// the code emitter will not emit the unrefs for them.\n\n//%\nTValue ldfld(RefRecord *r, int idx) {\n    TValue tmp = r->ld(idx);\n    r->unref();\n    return tmp;\n}\n\n//%\nTValue ldfldRef(RefRecord *r, int idx) {\n    TValue tmp = r->ldref(idx);\n    r->unref();\n    return tmp;\n}\n\n//%\nvoid stfld(RefRecord *r, int idx, TValue val) {\n    r->st(idx, val);\n    r->unref();\n}\n\n//%\nvoid stfldRef(RefRecord *r, int idx, TValue val) {\n    r->stref(idx, val);\n    r->unref();\n}\n\n// Store a captured local in a closure. It returns the action, so it can be chained.\n//%\nRefAction *stclo(RefAction *a, int idx, TValue v) {\n    // DBG(\"STCLO \"); a->print(); DBG(\"@%d = %p\\n\", idx, (void*)v);\n    a->stCore(idx, v);\n    return a;\n}\n\n//%\nvoid panic(int code) {\n    target_panic(code);\n}\n\n//%\nString emptyToNull(String s) {\n    if (!s || s->length == 0)\n        return NULL;\n    return s;\n}\n\n//%\nint ptrToBool(TValue p) {\n    if (p) {\n        decr(p);\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\n//%\nRefMap *mkMap() {\n    auto r = new RefMap();\n    MEMDBG(\"mkMap: => %p\", r);\n    return r;\n}\n\n//%\nTValue mapGet(RefMap *map, unsigned key) {\n    int i = map->findIdx(key);\n    if (i < 0) {\n        map->unref();\n        return 0;\n    }\n    TValue r = incr(map->values.get(i));\n    map->unref();\n    return r;\n}\n\n//%\nTValue mapGetRef(RefMap *map, unsigned key) {\n    return mapGet(map, key);\n}\n\n//%\nvoid mapSet(RefMap *map, unsigned key, TValue val) {\n    int i = map->findIdx(key);\n    if (i < 0) {\n        map->keys.push((TValue)key);\n        map->values.push(val);\n    } else {\n        map->values.setRef(i, val);\n    }\n    map->unref();\n}\n\n//%\nvoid mapSetRef(RefMap *map, unsigned key, TValue val) {\n    mapSet(map, key, val);\n}\n\n//\n// Debugger\n//\n\n// This is only to be called once at the beginning of lambda function\n//%\nvoid *getGlobalsPtr() {\n#ifdef DEVICE_GROUP_ID_USER\n    fiber_set_group(DEVICE_GROUP_ID_USER);\n#endif\n\n    return globals;\n}\n\n//%\nvoid runtimeWarning(String s) {\n    // noop for now\n}\n} // namespace pxtrt\n#endif\n\nnamespace pxt {\n\n//%\nValType valType(TValue v) {\n    if (isTagged(v)) {\n        if (!v)\n            return ValType::Undefined;\n\n        if (isNumber(v))\n            return ValType::Number;\n        if (v == TAG_TRUE || v == TAG_FALSE)\n            return ValType::Boolean;\n        else if (v == TAG_NULL)\n            return ValType::Object;\n        else {\n            oops();\n            return ValType::Object;\n        }\n    } else {\n        int tag = ((RefObject *)v)->vtable;\n\n        if (tag == PXT_REF_TAG_STRING)\n            return ValType::String;\n        else if (tag == PXT_REF_TAG_NUMBER)\n            return ValType::Number;\n        else if (tag == PXT_REF_TAG_ACTION || getVTable((RefObject *)v) == &RefAction_vtable)\n            return ValType::Function;\n\n        return ValType::Object;\n    }\n}\n\nPXT_DEF_STRING(sObjectTp, \"\\x06\\x00object\")\nPXT_DEF_STRING(sBooleanTp, \"\\x07\\x00boolean\")\nPXT_DEF_STRING(sStringTp, \"\\x06\\x00string\")\nPXT_DEF_STRING(sNumberTp, \"\\x06\\x00number\")\nPXT_DEF_STRING(sFunctionTp, \"\\x08\\x00function\")\nPXT_DEF_STRING(sUndefinedTp, \"\\x09\\x00undefined\")\n\n//%\nString typeOf(TValue v) {\n    switch (valType(v)) {\n    case ValType::Undefined:\n        return (String)sUndefinedTp;\n    case ValType::Boolean:\n        return (String)sBooleanTp;\n    case ValType::Number:\n        return (String)sNumberTp;\n    case ValType::String:\n        return (String)sStringTp;\n    case ValType::Object:\n        return (String)sObjectTp;\n    case ValType::Function:\n        return (String)sFunctionTp;\n    default:\n        oops();\n        return 0;\n    }\n}\n\n// Maybe in future we will want separate print methods; for now ignore\nvoid anyPrint(TValue v) {\n    if (valType(v) == ValType::Object) {\n        if (isRefCounted(v)) {\n            auto o = (RefObject *)v;\n            auto meth = ((RefObjectMethod)getVTable(o)->methods[1]);\n            if ((void *)meth == (void *)&anyPrint)\n                DMESG(\"[RefObject refs=%d vt=%p]\", o->refcnt, o->vtable);\n            else\n                meth(o);\n        } else {\n            DMESG(\"[Native %p]\", v);\n        }\n    } else {\n#ifndef X86_64\n        String s = numops::toString(v);\n        DMESG(\"[%s %p = %s]\", pxt::typeOf(v)->data, v, s->data);\n        decr((TValue)s);\n#endif\n    }\n}\n\nvoid dtorDoNothing() {}\n\n#define PRIM_VTABLE(name, sz)                                                                      \\\n    const VTable name = {sz,                                                                       \\\n                         0,                                                                        \\\n                         0,                                                                        \\\n                         {                                                                         \\\n                             (void *)&dtorDoNothing,                                               \\\n                             (void *)&anyPrint,                                                    \\\n                         }};\nPRIM_VTABLE(string_vt, 0)\nPRIM_VTABLE(image_vt, 0)\nPRIM_VTABLE(buffer_vt, 0)\nPRIM_VTABLE(number_vt, 12)\nPRIM_VTABLE(action_vt, 0)\n\nstatic const VTable *primVtables[] = {0,          // 0\n                                      &string_vt, // 1\n                                      &buffer_vt, // 2\n                                      &image_vt,  // 3\n                                      // filler:\n                                      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                                      0, 0, 0, 0, 0, 0, 0,\n                                      &number_vt, // 32\n                                      &action_vt, // 33\n                                      0};\n\nVTable *getVTable(RefObject *r) {\n    if (r->vtable >= 34)\n        return (VTable *)((uintptr_t)r->vtable << vtableShift);\n    if (r->vtable == 0)\n        target_panic(100);\n    return (VTable *)primVtables[r->vtable];\n}\n} // namespace pxt\n",
      "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum NumberFormat {\n    Int8LE = 1,\n    UInt8LE = 2,\n    Int16LE = 3,\n    UInt16LE = 4,\n    Int32LE = 5,\n    Int8BE = 6,\n    UInt8BE = 7,\n    Int16BE = 8,\n    UInt16BE = 9,\n    Int32BE = 10,\n\n    UInt32LE = 11,\n    UInt32BE = 12,\n    Float32LE = 13,\n    Float64LE = 14,\n    Float32BE = 15,\n    Float64BE = 16,\n    }\n\n\n    declare const enum ValType {\n    Undefined = 0,\n    Boolean = 1,\n    Number = 2,\n    String = 3,\n    Object = 4,\n    Function = 5,\n    }\n\n// Auto-generated. Do not edit. Really.\n",
      "eventcontext.ts": "namespace control {\n    /**\n     * Run code when a registered event happens.\n     * @param id the event compoent id\n     * @param value the event value to match\n     */\n    //% weight=20 blockGap=8 blockId=\"control_on_event\" block=\"on event|from %src|with value %value\"\n    //% blockExternalInputs=1\n    //% help=\"control/on-event\"\n    export function onEvent(src: number, value: number, handler: () => void, flags = 16) { // EVENT_LISTENER_DEFAULT_FLAGS\n        const ctx = control.eventContext();\n        if (!ctx)\n            control.internalOnEvent(src, value, handler, flags);\n        else\n            ctx.registerHandler(src, value, handler, flags);\n    }\n\n    class FrameCallback {\n        order: number\n        handler: () => void\n    }\n\n    class EventHandler {\n        src: number;\n        value: number;\n        handler: () => void;\n        flags: number;\n\n        constructor(src: number, value: number, handler: () => void, flags: number) {\n            this.src = src;\n            this.value = value;\n            this.handler = handler;\n        }\n\n        register() {\n            control.internalOnEvent(this.src, this.value, () => {\n                if (this.handler) this.handler();\n            }, this.flags)\n        }\n\n        unregister() {\n            control.internalOnEvent(this.src, this.value, doNothing, this.flags);\n        }\n    }\n\n    function doNothing() { }\n\n    export class EventContext {\n        private handlers: EventHandler[];\n        private frameCallbacks: FrameCallback[];\n        private frameWorker: number;\n        private frameNo: number;\n        private framesInSample: number;\n        private timeInSample: number;\n        public deltaTime: number;\n        static onStats: (stats: string) => void;\n\n        constructor() {\n            this.handlers = [];\n            this.frameNo = 0;\n            this.framesInSample = 0;\n            this.timeInSample = 0;\n            this.deltaTime = 0;\n            this.frameWorker = 0;\n        }\n\n        private registerFrameCallbacks() {\n            if (!this.frameCallbacks) return;\n\n            this.frameNo = 0;\n            this.framesInSample = 0;\n            this.timeInSample = 0;\n            this.deltaTime = 0;\n            let prevTime = control.millis();\n            const worker = this.frameWorker;\n            control.runInParallel(() => {\n                while (worker == this.frameWorker) {\n                    this.frameNo++\n                    let loopStart = control.millis()\n                    this.deltaTime = (loopStart - prevTime) / 1000.0\n                    prevTime = loopStart;\n                    for (let f of this.frameCallbacks) {\n                        f.handler()\n                    }\n                    let runtime = control.millis() - loopStart\n                    this.timeInSample += runtime\n                    this.framesInSample++\n                    if (this.timeInSample > 1000 || this.framesInSample > 30) {\n                        if (EventContext.onStats) {\n                            const fps = Math.round(this.framesInSample / (this.timeInSample / 1000));\n                            EventContext.onStats(`${fps}fps`)\n                        }\n                        this.timeInSample = 0\n                        this.framesInSample = 0\n                    }\n                    let delay = Math.max(1, 20 - runtime)\n                    pause(delay)\n                }\n            })\n        }\n\n        register() {\n            for (const h of this.handlers)\n                h.register();\n            this.registerFrameCallbacks();\n        }\n\n        unregister() {\n            for (const h of this.handlers)\n                h.unregister();\n            this.frameWorker++;\n        }\n\n        registerFrameHandler(order: number, handler: () => void) {\n            if (!this.frameCallbacks) {\n                this.frameCallbacks = [];\n                this.registerFrameCallbacks();\n            }\n\n            const fn = new FrameCallback()\n            fn.order = order\n            fn.handler = handler\n            for (let i = 0; i < this.frameCallbacks.length; ++i) {\n                if (this.frameCallbacks[i].order > order) {\n                    this.frameCallbacks.insertAt(i, fn)\n                    return\n                }\n            }\n            this.frameCallbacks.push(fn)\n        }\n\n        registerHandler(src: number, value: number, handler: () => void, flags: number) {\n            // already there?\n            for (const h of this.handlers) {\n                if (h.src == src && h.value == value) {\n                    h.flags = flags;\n                    h.handler = handler;\n                    return;\n                }\n            }\n            // register and push\n            const hn = new EventHandler(src, value, handler, flags);\n            this.handlers.push(hn);\n            hn.register();\n        }\n    }\n\n    let eventContexts: EventContext[];\n\n    /**\n     * Gets the current event context if any\n     */\n    export function eventContext(): EventContext {\n        return eventContexts ? eventContexts[eventContexts.length - 1] : undefined;\n    }\n\n    /**\n     * Pushes a new event context and clears all handlers\n     */\n    export function pushEventContext(): EventContext {\n        if (!eventContexts)\n            eventContexts = [];\n\n        // unregister previous context\n        const ctx = eventContext();\n        if (ctx) ctx.unregister();\n        // register again\n        const n = new EventContext();\n        eventContexts.push(n);\n        return n;\n    }\n\n    /**\n     * Pops the current event context and restore handlers if any previous context\n     */\n    export function popEventContext() {\n        if (!eventContexts) return;\n\n        // clear current context\n        const ctx = eventContexts.pop();\n        if (!ctx) return;\n        ctx.unregister();\n\n        // register old context again\n        const context = eventContexts[eventContexts.length - 1];\n        if (context)\n            context.register();\n        else\n            eventContexts = undefined;\n    }\n}",
      "loops.cpp": "#include \"pxtbase.h\"\n\nnamespace loops {\n\n/**\n * Repeats the code forever in the background. On each iteration, allows other codes to run.\n * @param body code to execute\n */\n//% help=loops/forever weight=100 afterOnStart=true deprecated=true\n//% blockId=forever_deprecated block=\"forever\" blockAllowMultiple=1\nvoid forever(Action a) {\n    runForever(a);\n}\n\n/**\n * Pause for the specified time in milliseconds\n * @param ms how long to pause for, eg: 100, 200, 500, 1000, 2000\n */\n//% help=loops/pause weight=99 deprecated=true\n//% async block=\"pause %pause=timePicker|ms\"\n//% blockId=device_pause_deprecated\nvoid pause(int ms) {\n    if (ms < 0) return;\n    sleep_ms(ms);\n}\n\n}",
      "math.ts": "namespace Math {\n\n    export const E = 2.718281828459045;\n    export const LN2 = 0.6931471805599453;\n    export const LN10 = 2.302585092994046;\n    export const LOG2E = 1.4426950408889634;\n    export const LOG10E = 0.4342944819032518;\n    export const PI = 3.141592653589793;\n    export const SQRT1_2 = 0.7071067811865476;\n    export const SQRT2 = 1.4142135623730951;\n\n    /**\n     * Re-maps a number from one range to another. That is, a value of ``from low`` would get mapped to ``to low``, a value of ``from high`` to ``to high``, values in-between to values in-between, etc.\n     * @param value value to map in ranges\n     * @param fromLow the lower bound of the value's current range\n     * @param fromHigh the upper bound of the value's current range, eg: 1023\n     * @param toLow the lower bound of the value's target range\n     * @param toHigh the upper bound of the value's target range, eg: 4\n     */\n    //% help=math/map weight=10 blockGap=8\n    //% blockId=math_map block=\"map %value|from low %fromLow|high %fromHigh|to low %toLow|high %toHigh\"\n    //% inlineInputMode=inline\n    export function map(value: number, fromLow: number, fromHigh: number, toLow: number, toHigh: number): number {\n        return ((value - fromLow) * (toHigh - toLow)) / (fromHigh - fromLow) + toLow;\n    }    \n\n    /**\n     * Constrains a number to be within a range\n     * @param x the number to constrain, all data types\n     * @param y the lower end of the range, all data types\n     * @param z the upper end of the range, all data types\n     */\n    //% help=math/constrain weight=11 blockGap=8\n    //% blockId=\"math_constrain_value\" block=\"constrain %value|between %low|and %high\"\n    export function constrain(value: number, low: number, high: number): number {\n        return value < low ? low : value > high ? high : value;\n    }\n\n    const b_m16: number[] = [0, 49, 49, 41, 90, 27, 117, 10]\n    /**\n     * Returns the sine of an input angle. This is an 8-bit approximation.\n     * @param theta input angle from 0-255\n     */\n    //% help=math/isin weight=11 advanced=true blockGap=8\n    export function isin(theta: number) {\n        //reference: based on FASTLed's sin approximation method: [https://github.com/FastLED/FastLED](MIT)\n        let offset = theta;\n        if( theta & 0x40 ) {\n            offset = 255 - offset;\n        }\n        offset &= 0x3F; // 0..63\n\n        let secoffset  = offset & 0x0F; // 0..15\n        if( theta & 0x40) secoffset++;\n\n        let section = offset >> 4; // 0..3\n        let s2 = section * 2;\n\n        let b = b_m16[s2];\n        let m16 = b_m16[s2+1];\n        let mx = (m16 * secoffset) >> 4;\n        \n        let y = mx + b;\n        if( theta & 0x80 ) y = -y;\n\n        y += 128;\n\n        return y;\n    }\n\n    /**\n     * Returns the cosine of an input angle. This is an 8-bit approximation. \n     * @param theta input angle from 0-255\n     */\n    //% help=math/icos weight=10 advanced=true blockGap=8\n    export function icos(theta: number) {\n        return isin(theta + 16384);\n    }\n}\n\nnamespace Number {\n    export const EPSILON = 2.220446049250313e-16;\n}",
      "ns.ts": "\n/**\n * Respond to and read data from buttons and sensors.\n */\n//% color=\"#B4009E\" weight=98 icon=\"\\uf192\"\nnamespace input {\n}\n",
      "pxt-core.d.ts": "/// <reference no-default-lib=\"true\"/>\n\ninterface Array<T> {\n    /**\n      * Get or set the length of an array. This number is one more than the index of the last element the array.\n      */\n    //% shim=Array_::length weight=84\n    //% blockId=\"lists_length\" block=\"length of %VALUE\" blockBuiltin=true blockNamespace=\"arrays\"\n    length: number;\n\n    /**\n      * Append a new element to an array.\n      * @param items New elements of the Array.\n      */\n    //% help=arrays/push\n    //% shim=Array_::push weight=50\n    //% blockId=\"array_push\" block=\"%list| add value %value| to end\" blockNamespace=\"arrays\"\n    push(item: T): void;\n\n    /**\n      * Remove the last element from an array and return it.\n      */\n    //% help=arrays/pop\n    //% shim=Array_::pop weight=45\n    //% blockId=\"array_pop\" block=\"get and remove last value from %list\" blockNamespace=\"arrays\"\n    //% blockGap=64\n    pop(): T;\n\n    /**\n      * Reverse the elements in an array. The first array element becomes the last, and the last array element becomes the first.\n      */\n    //% help=arrays/reverse\n    //% helper=arrayReverse weight=10\n    //% blockId=\"array_reverse\" block=\"reverse %list\" blockNamespace=\"arrays\"\n    reverse(): void;\n\n    /**\n      * Remove the first element from an array and return it. This method changes the length of the array.\n      */\n    //% help=arrays/shift\n    //% helper=arrayShift weight=30\n    //% blockId=\"array_shift\" block=\"get and remove first value from %list\" blockNamespace=\"arrays\"\n    shift(): T;\n\n    /**\n      * Add one element to the beginning of an array and return the new length of the array.\n      * @param element to insert at the start of the Array.\n      */\n    //% help=arrays/unshift\n    //% helper=arrayUnshift weight=25\n    //% blockId=\"array_unshift\" block=\"%list| insert %value| at beginning\" blockNamespace=\"arrays\"\n    //unshift(...values:T[]): number; //rest is not supported in our compiler yet.\n    unshift(value: T): number;\n\n    /**\n      * Return a section of an array.\n      * @param start The beginning of the specified portion of the array. eg: 0\n      * @param end The end of the specified portion of the array. eg: 0\n      */\n    //% help=arrays/slice\n    //% helper=arraySlice weight=41 blockNamespace=\"arrays\"\n    slice(start: number, end: number): T[];\n\n    /**\n      * Remove elements from an array.\n      * @param start The zero-based location in the array from which to start removing elements. eg: 0\n      * @param deleteCount The number of elements to remove. eg: 0\n      */\n    //% helper=arraySplice weight=40\n    splice(start: number, deleteCount: number): void;\n\n    /**\n      * joins all elements of an array into a string and returns this string.\n      * @param sep the string separator\n      */\n    //% helper=arrayJoin weight=40\n    join(sep: string): string;\n    \n    /**\n      * Tests whether at least one element in the array passes the test implemented by the provided function.\n      * @param callbackfn A function that accepts up to two arguments. The some method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arraySome weight=40\n    some(callbackfn: (value: T, index: number) => boolean): boolean;\n\n    /**\n      * Tests whether all elements in the array pass the test implemented by the provided function.\n      * @param callbackfn A function that accepts up to two arguments. The every method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arrayEvery weight=40\n    every(callbackfn: (value: T, index: number) => boolean): boolean;\n    \n    /**\n      * Sort the elements of an array in place and returns the array. The sort is not necessarily stable.\n      * @param specifies a function that defines the sort order. If omitted, the array is sorted according to the prmitive type\n      */\n    //% helper=arraySort weight=40\n    sort(callbackfn?: (value1: T, value2: T) => number): T[];\n\n    /**\n      * Call a defined callback function on each element of an array, and return an array containing the results.\n      * @param callbackfn A function that accepts up to two arguments. The map method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arrayMap weight=40\n    map<U>(callbackfn: (value: T, index: number) => U): U[];\n\n    /**\n      * Call a defined callback function on each element of an array.\n      * @param callbackfn A function that accepts up to two arguments. The forEach method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arrayForEach weight=40\n    forEach(callbackfn: (value: T, index: number) => void): void;\n    \n    /**\n      * Return the elements of an array that meet the condition specified in a callback function.\n      * @param callbackfn A function that accepts up to two arguments. The filter method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arrayFilter weight=40\n    filter(callbackfn: (value: T, index: number) => boolean): T[];\n\n    /**\n      * Call the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to three arguments. The reduce method calls the callbackfn function one time for each element in the array.\n      * @param initialValue Initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n      */\n    //% helper=arrayReduce weight=40\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number) => U, initialValue: U): U;\n\n\n    /** Remove the first occurence of an object. Returns true if removed. */\n    //% shim=Array_::removeElement weight=48\n    removeElement(element: T): boolean;\n\n    /** Remove the element at a certain index. */\n    //% help=arrays/remove-at\n    //% shim=Array_::removeAt weight=15\n    //% blockId=\"array_removeat\" block=\"%list| remove value at %index\" blockNamespace=\"arrays\"\n    removeAt(index: number): T;\n\n    /**\n     * Insert the value at a particular index, increases length by 1\n     * @param index the zero-based position in the list to insert the value, eg: 0\n     * @param the value to insert, eg: 0\n     */\n    //% help=arrays/insert-at\n    //% shim=Array_::insertAt weight=20\n    //% blockId=\"array_insertAt\" block=\"%list| insert at %index| value %value\" blockNamespace=\"arrays\"\n    insertAt(index: number, value: T): void;\n\n    /**\n      * Return the index of the first occurrence of a value in an array.\n      * @param item The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n      */\n    //% help=arrays/index-of\n    //% shim=Array_::indexOf weight=40\n    //% blockId=\"array_indexof\" block=\"%list| find index of %value\" blockNamespace=\"arrays\"\n    indexOf(item: T, fromIndex?: number): number;\n\n    /**\n     * Get the value at a particular index\n     * @param index the zero-based position in the list of the item, eg: 0\n     */\n    //% help=arrays/get\n    //% shim=Array_::getAt weight=85\n    get(index: number): T;\n\n    /**\n     * Store a value at a particular index\n     * @param index the zero-based position in the list to store the value, eg: 0\n     * @param the value to insert, eg: 0\n     */\n    //% help=arrays/set\n    //% shim=Array_::setAt weight=84\n    set(index: number, value: T): void;\n\n    [n: number]: T;\n}\n\ndeclare interface String {\n    // This block is currently disabled in favor of the built-in Blockly \"Create text with\" block, which compiles to \"\" + \"\"\n    // Add % sign back to the block annotation to re-enable\n    /**\n     * Returns a string that contains the concatenation of two or more strings.\n     * @param other The string to append to the end of the string.\n     */\n    //% shim=String_::concat weight=49\n    //% blockId=\"string_concat\" blockNamespace=\"text\"\n    // block=\"join %list=text|%other\"\n    concat(other: string): string;\n\n    /**\n     * Return the character at the specified index.\n     * @param index The zero-based index of the desired character.\n     */\n    //% shim=String_::charAt weight=48\n    //% help=text/char-at\n    //% blockId=\"string_get\" block=\"char from %this=text|at %pos\" blockNamespace=\"text\"\n    charAt(index: number): string;\n\n    /** Returns the length of a String object. */\n    //% property shim=String_::length weight=47\n    //% blockId=\"text_length\" block=\"length of %VALUE\" blockBuiltin=true blockNamespace=\"text\"\n    length: number;\n\n    /**\n     * Return the Unicode value of the character at the specified location.\n     * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.\n     */\n    //% shim=String_::charCodeAt\n    charCodeAt(index: number): number;\n\n    /**\n     * See how the order of characters in two strings is different (in ASCII encoding).\n     * @param that String to compare to target string\n     */\n    //% shim=String_::compare\n    //% help=text/compare\n    //% blockId=\"string_compare\" block=\"compare %this=text| to %that\" blockNamespace=\"text\"\n    compare(that: string): number;\n\n    /**\n     * Return a substring of the current string.\n     * @param start first character index; can be negative from counting from the end, eg:0\n     * @param length number of characters to extract\n     */\n    //% shim=String_::substr length.defl=10\n    //% help=text/substr\n    //% blockId=\"string_substr\" block=\"substring of %this=text|from %start|of length %length\" blockNamespace=\"text\"\n    substr(start: number, length?: number): string;\n\n    // This block is currently disabled, as it does not compile in some targets\n    // Add % sign back to the block annotation to re-enable\n    /** Returns a value indicating if the string is empty */\n    //% shim=String_::isEmpty\n    //% blockId=\"string_isempty\" blockNamespace=\"text\"\n    // block=\"%this=text| is empty\"\n    isEmpty(): boolean;\n\n    /**\n     * Returns the position of the first occurrence of a specified value in a string.\n     * @param searchValue the text to find\n     * @param start optional start index for the search\n     */\n    //% shim=String_::indexOf\n    //% help=text/index-of\n    //% blockId=\"string_indexof\" blockNamespace=\"text\"\n    indexOf(searchValue: string, start?: number): number;\n\n    /**\n     * Determines whether a string contains the characters of a specified string.\n     * @param searchValue the text to find\n     * @param start optional start index for the search\n     */\n    //% shim=String_::includes\n    //% help=text/includes\n    //% blockId=\"string_includes\" blockNamespace=\"text\"\n    includes(searchValue: string, start?: number): boolean;\n\n    [index: number]: string;\n}\n\n/**\n  * Convert a string to a number.\n  * @param s A string to convert into a number. eg: 123\n  */\n//% shim=String_::toNumber\n//% help=text/parse-float\n//% blockId=\"string_parsefloat\" block=\"parse to number %text\" blockNamespace=\"text\"\n//% text.defl=\"123\"\ndeclare function parseFloat(text: string): number;\n\ninterface Object { }\ninterface Function { }\ninterface IArguments { }\ninterface RegExp { }\ntype TemplateStringsArray = Array<string>;\n\ntype uint8 = number;\ntype uint16 = number;\ntype uint32 = number;\ntype int8 = number;\ntype int16 = number;\ntype int32 = number;\n\n\ndeclare interface Boolean {\n    /**\n     * Returns a string representation of an object.\n     */\n    //% shim=numops::toString\n    toString(): string;\n}\n\n/**\n * Combine, split, and search text strings.\n*/\n//% blockNamespace=\"Text\"\ndeclare namespace String {\n\n    /**\n     * Make a string from the given ASCII character code.\n     */\n    //% help=math/from-char-code\n    //% shim=String_::fromCharCode\n    //% weight=0\n    //% blockNamespace=\"Text\" blockId=\"stringFromCharCode\" block=\"text from char code %code\" weight=1\n    function fromCharCode(code: number): string;\n}\n\ndeclare interface Number {\n    /**\n     * Returns a string representation of a number.\n     */\n    //% shim=numops::toString\n    toString(): string;\n}\n\n/**\n * Add, remove, and replace items in lists.\n*/\n//% blockNamespace=\"Arrays\"\ndeclare namespace Array {\n}\n\n/**\n * More complex operations with numbers.\n*/\ndeclare namespace Math {\n    /**\n     * Returns the value of a base expression taken to a specified power.\n     * @param x The base value of the expression.\n     * @param y The exponent value of the expression.\n     */\n    //% shim=Math_::pow\n    function pow(x: number, y: number): number;\n\n    /**\n     * Returns a pseudorandom number between 0 and 1.\n     */\n    //% shim=Math_::random\n    //% help=math/random\n    function random(): number;\n\n    /**\n     * Returns a pseudorandom number between min and max included.\n     * If both numbers are integral, the result is integral.\n     * @param min the lower inclusive bound, eg: 0\n     * @param max the upper inclusive bound, eg: 10\n     */\n    //% blockId=\"device_random\" block=\"pick random %min|to %limit\"\n    //% help=math/random-range\n    //% shim=Math_::randomRange\n    function randomRange(min: number, max: number): number;\n\n    /**\n     * Returns the natural logarithm (base e) of a number.\n     * @param x A number\n     */\n    //% shim=Math_::log\n    function log(x: number): number;\n\n    /**\n     * Returns returns ``e^x``.\n     * @param x A number\n     */\n    //% shim=Math_::exp\n    function exp(x: number): number;\n\n    /**\n     * Returns the sine of a number.\n     * @param x An angle in radians\n     */\n    //% shim=Math_::sin\n    function sin(x: number): number;\n\n    /**\n     * Returns the cosine of a number.\n     * @param x An angle in radians\n     */\n    //% shim=Math_::cos\n    function cos(x: number): number;\n\n    /**\n     * Returns the tangent of a number.\n     * @param x An angle in radians\n     */\n    //% shim=Math_::tan\n    function tan(x: number): number;\n\n    /**\n     * Returns the arcsine (in radians) of a number\n     * @param x A number\n     */\n    //% shim=Math_::asin\n    function asin(x: number): number;\n\n    /**\n     * Returns the arccosine (in radians) of a number\n     * @param x A number\n     */\n    //% shim=Math_::acos\n    function acos(x: number): number;\n\n    /**\n     * Returns the arctangent (in radians) of a number\n     * @param x A number\n     */\n    //% shim=Math_::atan\n    function atan(x: number): number;\n\n    /**\n     * Returns the arctangent of the quotient of its arguments.\n     * @param y A number\n     * @param x A number\n     */\n    //% shim=Math_::atan2\n    function atan2(y: number, x: number): number;\n\n    /**\n     * Returns the square root of a number.\n     * @param x A numeric expression.\n     */\n    //% shim=Math_::sqrt\n    function sqrt(x: number): number;\n\n    /**\n     * Returns the smallest number greater than or equal to its numeric argument.\n     * @param x A numeric expression.\n     */\n    //% shim=Math_::ceil\n    function ceil(x: number): number;\n\n    /**\n      * Returns the greatest number less than or equal to its numeric argument.\n      * @param x A numeric expression.\n      */\n    //% shim=Math_::floor\n    function floor(x: number): number;\n\n    /**\n      * Returns the number with the decimal part truncated.\n      * @param x A numeric expression.\n      */\n    //% shim=Math_::trunc\n    function trunc(x: number): number;\n\n    /**\n      * Returns a supplied numeric expression rounded to the nearest number.\n      * @param x The value to be rounded to the nearest number.\n      */\n    //% shim=Math_::round\n    function round(x: number): number;\n\n    /**\n     * Returns the value of integer signed 32 bit multiplication of two numbers.\n     * @param x The first number\n     * @param y The second number\n     */\n    //% shim=Math_::imul\n    function imul(x: number, y: number): number;\n\n    /**\n     * Returns the value of integer signed 32 bit division of two numbers.\n     * @param x The first number\n     * @param y The second number\n     */\n    //% shim=Math_::idiv\n    function idiv(x: number, y: number): number;\n}\n",
      "pxt-helpers.ts": "type Action = () => void;\n\n\n/**\n  * Convert a string to an integer.\n  * @param s A string to convert into an integral number. eg: 123\n  */\n//% help=text/parse-int\n//% blockId=\"string_parseint\" block=\"parse to integer %text\" blockNamespace=\"text\"\n//% text.defl=\"123\"\n//% blockHidden=1\nfunction parseInt(text: string): number {\n    return parseFloat(text) >> 0;\n}\n\nnamespace helpers {\n    export function arraySplice<T>(arr: T[], start: number, len: number) {\n        if (start < 0) {\n            return;\n        }\n        for (let i = 0; i < len; ++i) {\n            arr.removeAt(start)\n        }\n    }\n\n    export function arrayReverse<T>(arr: T[]): void {\n        let len = arr.length;\n        for (let i = 0; i < len / 2; i++) {\n            swap(arr, i, len - i - 1);\n        }\n    }\n\n    export function arrayShift<T>(arr: T[]): T {\n        return arr.removeAt(0);\n    }\n\n    export function arrayJoin<T>(arr: T[], sep: string): string {\n        let r = \"\";\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i) {\n            if (i > 0 && sep)\n                r += sep;\n            r += arr[i] || \"\";\n        }\n        return r;\n    }\n\n    /*TODO: Enable this multiple value unshift, after rest is enabled in our compiler.\n        export function arrayUnshift<T>(arr: T[], ...values: T[]) : number {\n            for(let i = values.length; i > 0; --i) {\n                arr.insertAt(0, values[i - 1]);\n            }\n            return arr.length;\n        }\n    */\n    export function arrayUnshift<T>(arr: T[], value: T): number {\n        arr.insertAt(0, value);\n        return arr.length;\n    }\n\n    function swap<T>(arr: T[], i: number, j: number): void {\n        let temp: T = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n\n    function sortHelper<T>(arr: T[], callbackfn?: (value1: T, value2: T) => number): T[] {\n        if (arr.length <= 0 || !callbackfn) {\n            return arr;\n        }\n        let len = arr.length;\n        // simple selection sort.\n        for (let i = 0; i < len - 1; ++i) {\n            for (let j = i + 1; j < len; ++j) {\n                if (callbackfn(arr[i], arr[j]) > 0) {\n                    swap(arr, i, j);\n                }\n            }\n        }\n        return arr;\n    }\n\n    export function arraySort<T>(arr: T[], callbackfn?: (value1: T, value2: T) => number): T[] {\n        if (!callbackfn) {\n            //TODO: support native strings and number sorting\n            /* callbackfn = function (value1: string, value2: string) : number {\n                return value1.compare(value2);\n                }*/\n        }\n        return sortHelper(arr, callbackfn);\n    }\n\n    export function arrayMap<T, U>(arr: T[], callbackfn: (value: T, index: number) => U): U[] {\n        let res: U[] = []\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i) {\n            res.push(callbackfn(arr[i], i))\n        }\n        return res\n    }\n\n    export function arraySome<T>(arr: T[], callbackfn: (value: T, index: number) => boolean): boolean {\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i)\n            if (callbackfn(arr[i], i))\n                return true;\n        return false;\n    }\n\n    export function arrayEvery<T>(arr: T[], callbackfn: (value: T, index: number) => boolean): boolean {\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i)\n            if (!callbackfn(arr[i], i))\n                return false;\n        return true;\n    }\n\n    export function arrayForEach<T>(arr: T[], callbackfn: (value: T, index: number) => void): void {\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i) {\n            callbackfn(arr[i], i);\n        }\n    }\n\n    export function arrayFilter<T>(arr: T[], callbackfn: (value: T, index: number) => boolean): T[] {\n        let res: T[] = []\n        let len = arr.length\n        for (let i = 0; i < len; ++i) {\n            let v = arr[i] // need to cache\n            if (callbackfn(v, i)) res.push(v)\n        }\n        return res\n    }\n\n    export function arrayReduce<T, U>(arr: T[], callbackfn: (previousValue: U, currentValue: T, currentIndex: number) => U, initialValue: U): U {\n        let len = arr.length\n        for (let i = 0; i < len; ++i) {\n            initialValue = callbackfn(initialValue, arr[i], i)\n        }\n        return initialValue\n    }\n\n    export function arraySlice<T>(arr: T[], start: number, end: number): T[] {\n        const res: T[] = [];\n        const len = arr.length;\n\n        if (start < 0) {\n            start = Math.max(len + start, 0);\n        }\n\n        if (end < 0) {\n            end = len + end;\n        }\n\n        const sliceLength = end - start;\n\n        for (let i = 0; i < sliceLength; ++i) {\n            const index = i + start;\n            if (index >= len) {\n                break;\n            }\n            res.push(arr[index]);\n        }\n        return res;\n    }\n}\n\nnamespace Math {\n    export function clamp(min: number, max: number, value: number): number {\n        return Math.min(max, Math.max(min, value));\n    }\n\n    /**\n      * Returns the absolute value of a number (the value without regard to whether it is positive or negative).\n      * For example, the absolute value of -5 is the same as the absolute value of 5.\n      * @param x A numeric expression for which the absolute value is needed.\n      */\n    export function abs(x: number): number {\n        return x < 0 ? -x : x;\n    }\n\n    /**\n      * Returns the sign of the x, indicating whether x is positive, negative or zero.\n      * @param x The numeric expression to test\n      */\n    export function sign(x: number): number {\n        if (x == 0) return 0;\n        if (x > 0) return 1;\n        return -1;\n    }\n\n    /**\n      * Returns the larger of two supplied numeric expressions.\n      */\n    export function max(a: number, b: number): number {\n        if (a >= b) return a;\n        return b;\n    }\n\n    /**\n      * Returns the smaller of two supplied numeric expressions.\n      */\n    export function min(a: number, b: number): number {\n        if (a <= b) return a;\n        return b;\n    }\n\n    /**\n     * Rounds ``x`` to a number with the given number of ``digits``\n     * @param x the number to round\n     * @param digits the number of resulting digits\n     */\n    //%\n    export function roundWithPrecision(x: number, digits: number): number {\n        digits = digits | 0;\n        // invalid digits input\n        if (digits <= 0) return Math.round(x);\n        if (x == 0) return 0;\n        let r = 0;\n        do {\n            const d = Math.pow(10, digits);\n            r = Math.round(x * d) / d;\n            digits++;\n        } while (r == 0 && digits < 21);\n        return r;\n    }\n}\n\n\n//% blockHidden=1\nnamespace __internal {\n    /**\n     * A shim to render a boolean as a down/up toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleDownUp block=\"%down\"\n    //% down.fieldEditor=toggledownup\n    //% down.fieldOptions.decompileLiterals=true\n    export function __downUp(down: boolean): boolean {\n        return down;\n    }\n\n    /**\n     * A shim to render a boolean as a up/down toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleUpDown block=\"%up\"\n    //% up.fieldEditor=toggleupdown\n    //% up.fieldOptions.decompileLiterals=true\n    export function __upDown(up: boolean): boolean {\n        return up;\n    }\n\n    /**\n     * A shim to render a boolean as a high/low toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleHighLow block=\"%high\"\n    //% high.fieldEditor=togglehighlow\n    //% high.fieldOptions.decompileLiterals=true\n    export function __highLow(high: boolean): boolean {\n        return high;\n    }\n\n    /**\n     * A shim to render a boolean as a on/off toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleOnOff block=\"%on\"\n    //% on.fieldEditor=toggleonoff\n    //% on.fieldOptions.decompileLiterals=true\n    export function __onOff(on: boolean): boolean {\n        return on;\n    }\n\n    /**\n     * A shim to render a boolean as a yes/no toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleYesNo block=\"%yes\"\n    //% yes.fieldEditor=toggleyesno\n    //% yes.fieldOptions.decompileLiterals=true\n    export function __yesNo(yes: boolean): boolean {\n        return yes;\n    }\n\n    /**\n     * Get the color wheel field editor\n     * @param color color, eg: #ff0000\n     */\n    //% blockId=colorNumberPicker block=\"%value\"\n    //% blockHidden=true\n    //% shim=TD_ID colorSecondary=\"#FFFFFF\"\n    //% value.fieldEditor=\"colornumber\" value.fieldOptions.decompileLiterals=true\n    //% value.defl='#ff0000'\n    //% value.fieldOptions.colours='[\"#ff0000\",\"#ff8000\",\"#ffff00\",\"#ff9da5\",\"#00ff00\",\"#b09eff\",\"#00ffff\",\"#007fff\",\"#65471f\",\"#0000ff\",\"#7f00ff\",\"#ff0080\",\"#ff00ff\",\"#ffffff\",\"#999999\",\"#000000\"]'\n    //% value.fieldOptions.columns=4 value.fieldOptions.className='rgbColorPicker'\n    export function __colorNumberPicker(value: number) {\n        return value;\n    }\n\n    /**\n     * Get the color wheel field editor\n     * @param value value between 0 to 255 to get a color value, eg: 10\n     */\n    //% blockId=colorWheelPicker block=\"%value\"\n    //% blockHidden=true\n    //% shim=TD_ID colorSecondary=\"#FFFFFF\"\n    //% value.fieldEditor=\"colorwheel\" value.fieldOptions.decompileLiterals=true\n    //% value.fieldOptions.sliderWidth='200'\n    //% value.fieldOptions.min=0 value.fieldOptions.max=255\n    export function __colorWheelPicker(value: number) {\n        return value;\n    }\n\n    /**\n    * Get the color wheel field editor using HSV values\n    * @param value value between 0 to 255 to get a color value, eg: 10\n    */\n    //% blockId=colorWheelHsvPicker block=\"%value\"\n    //% blockHidden=true\n    //% shim=TD_ID colorSecondary=\"#FFFFFF\"\n    //% value.fieldEditor=\"colorwheel\" value.fieldOptions.decompileLiterals=true\n    //% value.fieldOptions.sliderWidth='200'\n    //% value.fieldOptions.min=0 value.fieldOptions.max=255\n    //% value.fieldOptions.channel=hsvfast\n    export function __colorWheelHsvPicker(value: number) {\n        return value;\n    }\n\n    /**\n     * A speed picker\n     * @param speed the speed, eg: 50\n     */\n    //% blockId=speedPicker block=\"%speed\" shim=TD_ID\n    //% speed.fieldEditor=\"speed\" colorSecondary=\"#FFFFFF\"\n    //% weight=0 blockHidden=1 speed.fieldOptions.decompileLiterals=1\n    export function __speedPicker(speed: number): number {\n        return speed;\n    }\n\n    /**\n     * A turn ratio picker\n     * @param turnratio the turn ratio, eg: 0\n     */\n    //% blockId=turnRatioPicker block=\"%turnratio\" shim=TD_ID\n    //% turnratio.fieldEditor=\"turnratio\" colorSecondary=\"#FFFFFF\"\n    //% weight=0 blockHidden=1 turnRatio.fieldOptions.decompileLiterals=1\n    export function __turnRatioPicker(turnratio: number): number {\n        return turnratio;\n    }\n\n    /**\n     * A field editor that displays a protractor\n     */\n    //% blockId=protractorPicker block=\"%angle\"\n    //% shim=TD_ID\n    //% angle.fieldEditor=protractor\n    //% angle.fieldOptions.decompileLiterals=1    \n    //% colorSecondary=\"#FFFFFF\"\n    //% blockHidden=1\n    export function __protractor(angle: number) {\n        return angle;\n    }\n\n    /**\n      * Get the time field editor\n      * @param ms time duration in milliseconds, eg: 500, 1000\n      */\n    //% blockId=timePicker block=\"%ms\"\n    //% blockHidden=true shim=TD_ID\n    //% colorSecondary=\"#FFFFFF\"\n    //% ms.fieldEditor=\"numberdropdown\" ms.fieldOptions.decompileLiterals=true\n    //% ms.fieldOptions.data='[[\"100 ms\", 100], [\"200 ms\", 200], [\"500 ms\", 500], [\"1 second\", 1000], [\"2 seconds\", 2000]]'\n    export function __timePicker(ms: number): number {\n        return ms;\n    }\n}",
      "pxt.cpp": "#include \"pxtbase.h\"\n\nusing namespace std;\n\nnamespace pxt {\n\nTValue incr(TValue e) {\n    if (isRefCounted(e)) {\n        getVTable((RefObject *)e);\n        ((RefObject *)e)->ref();\n    }\n    return e;\n}\n\nvoid decr(TValue e) {\n    if (isRefCounted(e)) {\n        ((RefObject *)e)->unref();\n    }\n}\n\n// TODO\nAction mkAction(int reflen, int totallen, int startptr) {\n    check(0 <= reflen && reflen <= totallen, ERR_SIZE, 1);\n    check(reflen <= totallen && totallen <= 255, ERR_SIZE, 2);\n    check(bytecode[startptr] == 0xffff, ERR_INVALID_BINARY_HEADER, 3);\n    check(bytecode[startptr + 1] == PXT_REF_TAG_ACTION, ERR_INVALID_BINARY_HEADER, 4);\n\n    uintptr_t tmp = (uintptr_t)&bytecode[startptr];\n\n    if (totallen == 0) {\n        return (TValue)tmp; // no closure needed\n    }\n\n    void *ptr = ::operator new(sizeof(RefAction) + totallen * sizeof(unsigned));\n    RefAction *r = new (ptr) RefAction();\n    r->len = totallen;\n    r->reflen = reflen;\n    r->func = (ActionCB)((tmp + 4) | 1);\n    memset(r->fields, 0, r->len * sizeof(unsigned));\n\n    MEMDBG(\"mkAction: start=%p => %p\", startptr, r);\n\n    return (Action)r;\n}\n\n// TODO\nTValue runAction3(Action a, TValue arg0, TValue arg1, TValue arg2) {\n    auto aa = (RefAction *)a;\n    if (aa->vtable == PXT_REF_TAG_ACTION) {\n        check(aa->refcnt == 0xffff, ERR_INVALID_BINARY_HEADER, 4);\n        return ((ActionCB)(((uintptr_t)a + 4) | 1))(NULL, arg0, arg1, arg2);\n    } else {\n        check(aa->refcnt != 0xffff, ERR_INVALID_BINARY_HEADER, 4);\n        return aa->runCore(arg0, arg1, arg2);\n    }\n}\n\nTValue runAction2(Action a, TValue arg0, TValue arg1) {\n    return runAction3(a, arg0, arg1, 0);\n}\n\nTValue runAction1(Action a, TValue arg0) {\n    return runAction3(a, arg0, 0, 0);\n}\n\nTValue runAction0(Action a) {\n    return runAction3(a, 0, 0, 0);\n}\n\nRefRecord *mkClassInstance(int vtableOffset) {\n    VTable *vtable = (VTable *)&bytecode[vtableOffset];\n\n    intcheck(vtable->methods[0] == &RefRecord_destroy, ERR_SIZE, 3);\n    intcheck(vtable->methods[1] == &RefRecord_print, ERR_SIZE, 4);\n\n    void *ptr = ::operator new(vtable->numbytes);\n    RefRecord *r = new (ptr) RefRecord(PXT_VTABLE_TO_INT(vtable));\n    memset(r->fields, 0, vtable->numbytes - sizeof(RefRecord));\n    MEMDBG(\"mkClass: vt=%p => %p\", vtable, r);\n    return r;\n}\n\nTValue RefRecord::ld(int idx) {\n    // intcheck((reflen == 255 ? 0 : reflen) <= idx && idx < len, ERR_OUT_OF_BOUNDS, 1);\n    return fields[idx];\n}\n\nTValue RefRecord::ldref(int idx) {\n    // DMESG(\"LD %p len=%d reflen=%d idx=%d\", this, len, reflen, idx);\n    // intcheck(0 <= idx && idx < reflen, ERR_OUT_OF_BOUNDS, 2);\n    TValue tmp = fields[idx];\n    incr(tmp);\n    return tmp;\n}\n\nvoid RefRecord::st(int idx, TValue v) {\n    // intcheck((reflen == 255 ? 0 : reflen) <= idx && idx < len, ERR_OUT_OF_BOUNDS, 3);\n    fields[idx] = v;\n}\n\nvoid RefRecord::stref(int idx, TValue v) {\n    // DMESG(\"ST %p len=%d reflen=%d idx=%d\", this, len, reflen, idx);\n    // intcheck(0 <= idx && idx < reflen, ERR_OUT_OF_BOUNDS, 4);\n    decr(fields[idx]);\n    fields[idx] = v;\n}\n\nvoid RefObject::destroyVT() {\n    ((RefObjectMethod)getVTable(this)->methods[0])(this);\n    ::operator delete(this);\n}\n\nvoid RefObject::printVT() {\n    ((RefObjectMethod)getVTable(this)->methods[1])(this);\n}\n\nvoid RefRecord_destroy(RefRecord *r) {\n    VTable *tbl = getVTable(r);\n    uint8_t *refmask = (uint8_t *)&tbl->methods[tbl->userdata & 0xff];\n    int len = (tbl->numbytes >> 2) - 1;\n    for (int i = 0; i < len; ++i) {\n        if (refmask[i])\n            decr(r->fields[i]);\n        r->fields[i] = 0;\n    }\n}\n\nvoid RefRecord_print(RefRecord *r) {\n    DMESG(\"RefRecord %p r=%d size=%d bytes\", r, r->refcnt, getVTable(r)->numbytes);\n}\n\nTValue Segment::get(unsigned i) {\n#ifdef DEBUG_BUILD\n    DMESG(\"In Segment::get index:%d\", i);\n    this->print();\n#endif\n\n    if (i < length) {\n        return data[i];\n    }\n    return Segment::DefaultValue;\n}\n\nvoid Segment::setRef(unsigned i, TValue value) {\n    decr(get(i));\n    set(i, value);\n}\n\nvoid Segment::set(unsigned i, TValue value) {\n    if (i < size) {\n        data[i] = value;\n    } else if (i < Segment::MaxSize) {\n        growByMin(i + 1);\n        data[i] = value;\n    } else {\n        return;\n    }\n    if (length <= i) {\n        length = i + 1;\n    }\n\n#ifdef DEBUG_BUILD\n    DMESG(\"In Segment::set\");\n    this->print();\n#endif\n\n    return;\n}\n\nramint_t Segment::growthFactor(ramint_t size) {\n    if (size == 0) {\n        return 4;\n    }\n    if (size < 64) {\n        return size * 2; // Double\n    }\n    if (size < 512) {\n        return size * 5 / 3; // Grow by 1.66 rate\n    }\n     // Grow by constant rate\n    if ((unsigned)size + 256 < MaxSize)\n        return size + 256;\n    else\n        return MaxSize;\n}\n\nvoid Segment::growByMin(ramint_t minSize) {\n    growBy(max(minSize, growthFactor(size)));\n}\n\nvoid Segment::growBy(ramint_t newSize) {\n#ifdef DEBUG_BUILD\n    DMESG(\"growBy: %d\", newSize);\n    this->print();\n#endif\n    if (size < newSize) {\n        // this will throw if unable to allocate\n        TValue *tmp = (TValue *)(::operator new(newSize * sizeof(TValue)));\n\n        // Copy existing data\n        if (size) {\n            memcpy(tmp, data, size * sizeof(TValue));\n        }\n        // fill the rest with default value\n        memset(tmp + size, 0, (newSize - size) * sizeof(TValue));\n\n        // free older segment;\n        ::operator delete(data);\n\n        data = tmp;\n        size = newSize;\n\n#ifdef DEBUG_BUILD\n        DMESG(\"growBy - after reallocation\");\n        this->print();\n#endif\n    }\n    // else { no shrinking yet; }\n    return;\n}\n\nvoid Segment::ensure(ramint_t newSize) {\n    if (newSize < size) {\n        return;\n    }\n    growByMin(newSize);\n}\n\nvoid Segment::setLength(unsigned newLength) {\n    if (newLength > size) {\n        ensure(length);\n    }\n    length = newLength;\n    return;\n}\n\nvoid Segment::push(TValue value) {\n    this->set(length, value);\n}\n\nTValue Segment::pop() {\n#ifdef DEBUG_BUILD\n    DMESG(\"In Segment::pop\");\n    this->print();\n#endif\n\n    if (length > 0) {\n        --length;\n        TValue value = data[length];\n        data[length] = Segment::DefaultValue;\n        return value;\n    }\n    return Segment::DefaultValue;\n}\n\n// this function removes an element at index i and shifts the rest of the elements to\n// left to fill the gap\nTValue Segment::remove(unsigned i) {\n#ifdef DEBUG_BUILD\n    DMESG(\"In Segment::remove index:%d\", i);\n    this->print();\n#endif\n    if (i < length) {\n        // value to return\n        TValue ret = data[i];\n        if (i + 1 < length) {\n            // Move the rest of the elements to fill in the gap.\n            memmove(data + i, data + i + 1, (length - i - 1) * sizeof(unsigned));\n        }\n        length--;\n        data[length] = Segment::DefaultValue;\n#ifdef DEBUG_BUILD\n        DMESG(\"After Segment::remove index:%d\", i);\n        this->print();\n#endif\n        return ret;\n    }\n    return Segment::DefaultValue;\n}\n\n// this function inserts element value at index i by shifting the rest of the elements right.\nvoid Segment::insert(unsigned i, TValue value) {\n#ifdef DEBUG_BUILD\n    DMESG(\"In Segment::insert index:%d value:%d\", i, value);\n    this->print();\n#endif\n\n    if (i < length) {\n        ensure(length + 1);\n        \n        // Move the rest of the elements to fill in the gap.\n        memmove(data + i + 1, data + i, (length - i) * sizeof(unsigned));\n\n        data[i] = value;\n        length++;\n    } else {\n        // This is insert beyond the length, just call set which will adjust the length\n        set(i, value);\n    }\n#ifdef DEBUG_BUILD\n    DMESG(\"After Segment::insert index:%d\", i);\n    this->print();\n#endif\n}\n\nvoid Segment::print() {\n    DMESG(\"Segment: %p, length: %d, size: %d\", data, (unsigned)length, (unsigned)size);\n    for (unsigned i = 0; i < size; i++) {\n        DMESG(\"-> %d\", (unsigned)(uintptr_t)data[i]);\n    }\n}\n\nbool Segment::isValidIndex(unsigned i) {\n    if (i > length) {\n        return false;\n    }\n    return true;\n}\n\nvoid Segment::destroy() {\n#ifdef DEBUG_BUILD\n    DMESG(\"In Segment::destroy\");\n    this->print();\n#endif\n    length = size = 0;\n    ::operator delete(data);\n    data = nullptr;\n}\n\nvoid RefCollection::push(TValue x) {\n    incr(x);\n    head.push(x);\n}\n\nTValue RefCollection::pop() {\n    TValue ret = head.pop();\n    incr(ret);\n    return ret;\n}\n\nTValue RefCollection::getAt(int i) {\n    TValue tmp = head.get(i);\n    incr(tmp);\n    return tmp;\n}\n\nTValue RefCollection::removeAt(int i) {\n    return head.remove(i);\n}\n\nvoid RefCollection::insertAt(int i, TValue value) {\n    head.insert(i, value);\n    incr(value);\n}\n\nvoid RefCollection::setAt(int i, TValue value) {\n    incr(value);\n    head.setRef(i, value);\n}\n\nint RefCollection::indexOf(TValue x, int start) {\n#ifndef X86_64\n    unsigned i = start;\n    while (head.isValidIndex(i)) {\n        if (pxt::eq_bool(head.get(i), x)) {\n            return (int)i;\n        }\n        i++;\n    }\n#endif\n    return -1;\n}\n\nbool RefCollection::removeElement(TValue x) {\n    int idx = indexOf(x, 0);\n    if (idx >= 0) {\n        decr(removeAt(idx));\n        return 1;\n    }\n    return 0;\n}\n\nnamespace Coll0 {\nPXT_VTABLE_BEGIN(RefCollection, 0, 0)\nPXT_VTABLE_END\n} // namespace Coll0\n\nRefCollection::RefCollection() : RefObject(0) {\n    vtable = PXT_VTABLE_TO_INT(&Coll0::RefCollection_vtable);\n}\n\nvoid RefCollection::destroy(RefCollection *t) {\n    for (unsigned i = 0; i < t->head.getLength(); i++) {\n        decr(t->head.get(i));\n    }\n    t->head.destroy();\n}\n\nvoid RefCollection::print(RefCollection *t) {\n    DMESG(\"RefCollection %p r=%d size=%d\", t, t->refcnt, t->head.getLength());\n    t->head.print();\n}\n\nPXT_VTABLE_CTOR(RefAction) {}\n\n// fields[] contain captured locals\nvoid RefAction::destroy(RefAction *t) {\n    for (int i = 0; i < t->reflen; ++i) {\n        decr(t->fields[i]);\n        t->fields[i] = 0;\n    }\n}\n\nvoid RefAction::print(RefAction *t) {\n    DMESG(\"RefAction %p r=%d pc=%X size=%d (%d refs)\", t, t->refcnt,\n          (const uint8_t *)t->func - (const uint8_t *)bytecode, t->len, t->reflen);\n}\n\nvoid RefLocal::print(RefLocal *t) {\n    DMESG(\"RefLocal %p r=%d v=%d\", t, t->refcnt, t->v);\n}\n\nvoid RefLocal::destroy(RefLocal *) {}\n\nPXT_VTABLE_CTOR(RefLocal) {\n    v = 0;\n}\n\nPXT_VTABLE_CTOR(RefRefLocal) {\n    v = 0;\n}\n\nvoid RefRefLocal::print(RefRefLocal *t) {\n    DMESG(\"RefRefLocal %p r=%d v=%p\", t, t->refcnt, (void *)t->v);\n}\n\nvoid RefRefLocal::destroy(RefRefLocal *t) {\n    decr(t->v);\n}\n\nPXT_VTABLE_BEGIN(RefMap, 0, RefMapMarker)\nPXT_VTABLE_END\nRefMap::RefMap() : PXT_VTABLE_INIT(RefMap) {}\n\nvoid RefMap::destroy(RefMap *t) {\n    for (unsigned i = 0; i < t->values.getLength(); ++i) {\n        decr(t->values.get(i));\n        t->values.set(i, 0);\n    }\n    t->keys.destroy();\n    t->values.destroy();\n}\n\nint RefMap::findIdx(unsigned key) {\n    for (unsigned i = 0; i < keys.getLength(); ++i) {\n        if ((uintptr_t)keys.get(i) == key)\n            return i;\n    }\n    return -1;\n}\n\nvoid RefMap::print(RefMap *t) {\n    DMESG(\"RefMap %p r=%d size=%d\", t, t->refcnt, t->keys.getLength());\n}\n\nvoid debugMemLeaks() {}\n\nvoid error(PXT_ERROR code, int subcode) {\n    DMESG(\"Error: %d [%d]\", code, subcode);\n    target_panic(42);\n}\n\nuint16_t *bytecode;\nTValue *globals;\n\nunsigned *allocate(ramint_t sz) {\n    unsigned *arr = new unsigned[sz];\n    memset(arr, 0, sz * sizeof(unsigned));\n    return arr;\n}\n\nvoid checkStr(bool cond, const char *msg) {\n    if (!cond) {\n        while (true) {\n            // uBit.display.scroll(msg, 100);\n            // uBit.sleep(100);\n        }\n    }\n}\n\nint templateHash() {\n    return ((int *)bytecode)[4];\n}\n\nint programHash() {\n    return ((int *)bytecode)[6];\n}\n\nint getNumGlobals() {\n    return bytecode[16];\n}\n\n#ifndef X86_64\nvoid exec_binary(unsigned *pc) {\n    // XXX re-enable once the calibration code is fixed and [editor/embedded.ts]\n    // properly prepends a call to [internal_main].\n    // ::touch_develop::internal_main();\n\n    // unique group for radio based on source hash\n    // ::touch_develop::micro_bit::radioDefaultGroup = programHash();\n\n    unsigned ver = *pc++;\n    checkStr(ver == 0x4209, \":( Bad runtime version\");\n\n    bytecode = *((uint16_t **)pc++); // the actual bytecode is here\n    globals = (TValue *)allocate(getNumGlobals());\n\n    // can be any valid address, best in RAM for speed\n    globals[0] = (TValue)&globals;\n\n    // just compare the first word\n    // TODO\n    checkStr(((uint32_t *)bytecode)[0] == 0x923B8E70 && (unsigned)templateHash() == *pc,\n             \":( Failed partial flash\");\n\n    uintptr_t startptr = (uintptr_t)bytecode;\n\n    startptr += 48; // header\n    startptr |= 1;  // Thumb state\n\n    initRuntime();\n\n    ((unsigned (*)())startptr)();\n\n    pxt::releaseFiber();\n}\n\nvoid start() {\n    exec_binary((unsigned *)functionsAndBytecode);\n}\n#endif\n\n} // namespace pxt\n",
      "pxt.json": "{\n    \"name\": \"base\",\n    \"description\": \"The base library\",\n    \"files\": [\n        \"README.md\",\n        \"pxt-core.d.ts\",\n        \"pxt.cpp\",\n        \"pxtbase.h\",\n        \"core.cpp\",\n        \"advmath.cpp\",\n        \"pxt-helpers.ts\",\n        \"buffer.cpp\",\n        \"buffer.ts\",\n        \"shims.d.ts\",\n        \"enums.d.ts\",\n        \"loops.cpp\",\n        \"math.ts\",\n        \"ns.ts\",\n        \"control.cpp\",\n        \"control.ts\",\n        \"console.ts\",\n        \"eventcontext.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"dependencies\": {},\n    \"targetVersions\": {\n        \"target\": \"0.21.27\"\n    }\n}",
      "pxtbase.h": "#ifndef __PXTBASE_H\n#define __PXTBASE_H\n\n#pragma GCC diagnostic ignored \"-Wunused-parameter\"\n#pragma GCC diagnostic ignored \"-Wformat\"\n#pragma GCC diagnostic ignored \"-Warray-bounds\"\n\n// needed for gcc6; not sure why\n#undef min\n#undef max\n\n#define NOLOG(...)                                                                                 \\\n    do {                                                                                           \\\n    } while (0)\n\n#define MEMDBG NOLOG\n\n#include \"pxtconfig.h\"\n\n#define intcheck(...) check(__VA_ARGS__)\n//#define intcheck(...) do {} while (0)\n\n#include <string.h>\n#include <stdint.h>\n#include <math.h>\n\n#ifdef POKY\nvoid* operator new (size_t size, void* ptr);\nvoid* operator new (size_t size);\n#else\n#include <new>\n#endif\n\n#include \"platform.h\"\n#include \"pxtcore.h\"\n\n#ifndef PXT_VTABLE_SHIFT\n#define PXT_VTABLE_SHIFT 2\n#endif\n\n#define CONCAT_1(a, b) a##b\n#define CONCAT_0(a, b) CONCAT_1(a, b)\n#define STATIC_ASSERT(e) enum { CONCAT_0(_static_assert_, __LINE__) = 1 / ((e) ? 1 : 0) };\n\n#ifndef ramint_t\n// this type limits size of arrays\n#ifdef __linux__\n#define ramint_t uint32_t\n#else\n#define ramint_t uint16_t\n#endif\n#endif\n\n#ifdef POKY\ninline void *operator new(size_t, void *p) {\n    return p;\n}\ninline void *operator new[](size_t, void *p) {\n    return p;\n}\n#endif\n\nnamespace pxt {\n\ntemplate <typename T> inline const T &max(const T &a, const T &b) {\n    if (a < b)\n        return b;\n    return a;\n}\n\ntemplate <typename T> inline const T &min(const T &a, const T &b) {\n    if (a < b)\n        return a;\n    return b;\n}\n\ntemplate <typename T> inline void swap(T &a, T &b) {\n    T tmp = a;\n    a = b;\n    b = tmp;\n}\n\n//\n// Tagged values (assume 4 bytes for now, Cortex-M0)\n//\nstruct TValueStruct {};\ntypedef TValueStruct *TValue;\n\ntypedef TValue TNumber;\ntypedef TValue Action;\ntypedef TValue ImageLiteral;\n\n// To be implemented by the target\nextern \"C\" void target_panic(int error_code);\nextern \"C\" void target_reset();\nvoid sleep_ms(unsigned ms);\nvoid sleep_us(uint64_t us);\nvoid releaseFiber();\nuint64_t current_time_us();\nint current_time_ms();\nvoid initRuntime();\nvoid sendSerial(const char *data, int len);\nvoid setSendToUART(void (*f)(const char *, int));\nint getSerialNumber();\nvoid registerWithDal(int id, int event, Action a, int flags = 16); // EVENT_LISTENER_DEFAULT_FLAGS\nvoid runInParallel(Action a);\nvoid runForever(Action a);\nvoid waitForEvent(int id, int event);\n//%\nunsigned afterProgramPage();\n//%\nvoid dumpDmesg();\n\n// also defined DMESG macro\n// end\n\n#define TAGGED_SPECIAL(n) (TValue)(void *)((n << 2) | 2)\n#define TAG_FALSE TAGGED_SPECIAL(2)\n#define TAG_TRUE TAGGED_SPECIAL(16)\n#define TAG_UNDEFINED (TValue)0\n#define TAG_NULL TAGGED_SPECIAL(1)\n#define TAG_NUMBER(n) (TNumber)(void *)((n << 1) | 1)\n\ninline bool isTagged(TValue v) {\n    return ((intptr_t)v & 3) || !v;\n}\n\ninline bool isNumber(TValue v) {\n    return (intptr_t)v & 1;\n}\n\ninline bool isSpecial(TValue v) {\n    return (intptr_t)v & 2;\n}\n\ninline bool bothNumbers(TValue a, TValue b) {\n    return (intptr_t)a & (intptr_t)b & 1;\n}\n\ninline int numValue(TValue n) {\n    return (intptr_t)n >> 1;\n}\n\n#ifdef PXT_BOX_DEBUG\ninline bool canBeTagged(int) {\n    return false;\n}\n#else\ninline bool canBeTagged(int v) {\n    return (v << 1) >> 1 == v;\n}\n#endif\n\ntypedef enum {\n    ERR_INVALID_BINARY_HEADER = 5,\n    ERR_OUT_OF_BOUNDS = 8,\n    ERR_REF_DELETED = 7,\n    ERR_SIZE = 9,\n} PXT_ERROR;\n\nextern const unsigned functionsAndBytecode[];\nextern TValue *globals;\nextern uint16_t *bytecode;\nclass RefRecord;\n\n// Utility functions\n\n//%\nTValue runAction3(Action a, TValue arg0, TValue arg1, TValue arg2);\n//%\nTValue runAction2(Action a, TValue arg0, TValue arg1);\n//%\nTValue runAction1(Action a, TValue arg0);\n//%\nTValue runAction0(Action a);\n//%\nAction mkAction(int reflen, int totallen, int startptr);\n// allocate [sz] words and clear them\n//%\nunsigned *allocate(ramint_t sz);\n//%\nint templateHash();\n//%\nint programHash();\n//%\nunsigned programSize();\n//%\nint getNumGlobals();\n//%\nRefRecord *mkClassInstance(int vtableOffset);\n//%\nvoid debugMemLeaks();\n//%\nvoid anyPrint(TValue v);\n\nint getConfig(int key, int defl = -1);\n\n//%\nint toInt(TNumber v);\n//%\nunsigned toUInt(TNumber v);\n//%\ndouble toDouble(TNumber v);\n//%\nfloat toFloat(TNumber v);\n//%\nTNumber fromDouble(double r);\n//%\nTNumber fromFloat(float r);\n\n//%\nTNumber fromInt(int v);\n//%\nTNumber fromUInt(unsigned v);\n//%\nTValue fromBool(bool v);\n//%\nbool eq_bool(TValue a, TValue b);\n//%\nbool eqq_bool(TValue a, TValue b);\n\nvoid error(PXT_ERROR code, int subcode = 0);\nvoid exec_binary(unsigned *pc);\nvoid start();\n\nstruct HandlerBinding {\n    HandlerBinding *next;\n    int source;\n    int value;\n    Action action;\n};\nHandlerBinding *findBinding(int source, int value);\nvoid setBinding(int source, int value, Action act);\n\n// The standard calling convention is:\n//   - when a pointer is loaded from a local/global/field etc, and incr()ed\n//     (in other words, its presence on stack counts as a reference)\n//   - after a function call, all pointers are popped off the stack and decr()ed\n// This does not apply to the RefRecord and st/ld(ref) methods - they unref()\n// the RefRecord* this.\n//%\nTValue incr(TValue e);\n//%\nvoid decr(TValue e);\n\nclass RefObject;\n\nstatic inline RefObject *incrRC(RefObject *r) {\n    return (RefObject *)incr((TValue)r);\n}\nstatic inline void decrRC(RefObject *r) {\n    decr((TValue)r);\n}\n\ninline void *ptrOfLiteral(int offset) {\n    return &bytecode[offset];\n}\n\n// Checks if object is ref-counted, and has a custom PXT vtable in front\n// TODO\ninline bool isRefCounted(TValue e) {\n    return !isTagged(e) && (*((unsigned *)e) & 1) == 1;\n}\n\ninline void check(int cond, PXT_ERROR code, int subcode = 0) {\n    if (!cond)\n        error(code, subcode);\n}\n\ninline void oops() {\n    target_panic(47);\n}\n\nclass RefObject;\n\ntypedef void (*RefObjectMethod)(RefObject *self);\ntypedef void *PVoid;\ntypedef void **PPVoid;\n\ntypedef void *Object_;\n\nconst PPVoid RefMapMarker = (PPVoid)(void *)43;\n\nstruct VTable {\n    uint16_t numbytes; // in the entire object, including the vtable pointer\n    uint16_t userdata;\n    PVoid *ifaceTable;\n    PVoid methods[3]; // we only use up to three methods here; pxt will generate more\n                      // refmask sits at &methods[nummethods]\n};\n\nconst int vtableShift = PXT_VTABLE_SHIFT;\n\n// A base abstract class for ref-counted objects.\nclass RefObject {\n  public:\n    uint16_t refcnt;\n    uint16_t vtable;\n\n    RefObject(uint16_t vt) {\n        refcnt = 3;\n        vtable = vt;\n    }\n\n    void destroyVT();\n    void printVT();\n\n    inline bool isReadOnly() { return refcnt == 0xffff; }\n\n    // Increment/decrement the ref-count. Decrementing to zero deletes the current object.\n    inline void ref() {\n        if (isReadOnly())\n            return;\n        MEMDBG(\"INCR: %p refs=%d\", this, this->refcnt);\n        check(refcnt > 1, ERR_REF_DELETED);\n        refcnt += 2;\n    }\n\n    inline void unref() {\n        if (isReadOnly())\n            return;\n        MEMDBG(\"DECR: %p refs=%d\", this, this->refcnt);\n        check(refcnt > 1, ERR_REF_DELETED);\n        check((refcnt & 1), ERR_REF_DELETED);\n        refcnt -= 2;\n        if (refcnt == 1) {\n            destroyVT();\n        }\n    }\n};\n\nclass Segment {\n  private:\n    TValue *data;\n    ramint_t length;\n    ramint_t size;\n\n    // this just gives max value of ramint_t\n    static constexpr ramint_t MaxSize = (((1U << (8 * sizeof(ramint_t) - 1)) - 1) << 1) + 1;\n    static constexpr TValue DefaultValue = TAG_UNDEFINED;\n\n    static ramint_t growthFactor(ramint_t size);\n    void growByMin(ramint_t minSize);\n    void growBy(ramint_t newSize);\n    void ensure(ramint_t newSize);\n\n  public:\n    Segment() : data(nullptr), length(0), size(0){};\n\n    TValue get(unsigned i);\n    void set(unsigned i, TValue value);\n    void setRef(unsigned i, TValue value);\n\n    unsigned getLength() { return length; };\n    void setLength(unsigned newLength);\n    void resize(unsigned newLength) { setLength(newLength); }\n\n    void push(TValue value);\n    TValue pop();\n\n    TValue remove(unsigned i);\n    void insert(unsigned i, TValue value);\n\n    bool isValidIndex(unsigned i);\n\n    void destroy();\n\n    void print();\n};\n\n// A ref-counted collection of either primitive or ref-counted objects (String, Image,\n// user-defined record, another collection)\nclass RefCollection : public RefObject {\n  private:\n    Segment head;\n\n  public:\n    RefCollection();\n\n    static void destroy(RefCollection *coll);\n    static void print(RefCollection *coll);\n\n    unsigned length() { return head.getLength(); }\n    void setLength(unsigned newLength) { head.setLength(newLength); }\n\n    void push(TValue x);\n    TValue pop();\n    TValue getAt(int i);\n    void setAt(int i, TValue x);\n    // removes the element at index i and shifts the other elements left\n    TValue removeAt(int i);\n    // inserts the element at index i and moves the other elements right.\n    void insertAt(int i, TValue x);\n\n    int indexOf(TValue x, int start);\n    bool removeElement(TValue x);\n};\n\nclass RefMap : public RefObject {\n  public:\n    Segment keys;\n    Segment values;\n\n    RefMap();\n    static void destroy(RefMap *map);\n    static void print(RefMap *map);\n    int findIdx(unsigned key);\n};\n\n// A ref-counted, user-defined JS object.\nclass RefRecord : public RefObject {\n  public:\n    // The object is allocated, so that there is space at the end for the fields.\n    TValue fields[];\n\n    RefRecord(uint16_t v) : RefObject(v) {}\n\n    TValue ld(int idx);\n    TValue ldref(int idx);\n    void st(int idx, TValue v);\n    void stref(int idx, TValue v);\n};\n\n//%\nVTable *getVTable(RefObject *r);\n\n// these are needed when constructing vtables for user-defined classes\n//%\nvoid RefRecord_destroy(RefRecord *r);\n//%\nvoid RefRecord_print(RefRecord *r);\n\nclass RefAction;\ntypedef TValue (*ActionCB)(TValue *captured, TValue arg0, TValue arg1, TValue arg2);\n\n// Ref-counted function pointer.\nclass RefAction : public RefObject {\n  public:\n    // This is the same as for RefRecord.\n    uint8_t len;\n    uint8_t reflen;\n    ActionCB func; // The function pointer\n    // fields[] contain captured locals\n    TValue fields[];\n\n    static void destroy(RefAction *act);\n    static void print(RefAction *act);\n\n    RefAction();\n\n    inline void stCore(int idx, TValue v) {\n        // DMESG(\"ST [%d] = %d \", idx, v); this->print();\n        intcheck(0 <= idx && idx < len, ERR_OUT_OF_BOUNDS, 10);\n        intcheck(fields[idx] == 0, ERR_OUT_OF_BOUNDS, 11); // only one assignment permitted\n        fields[idx] = v;\n    }\n\n    inline TValue runCore(TValue arg0, TValue arg1,\n                          TValue arg2) // internal; use runAction*() functions\n    {\n        this->ref();\n        TValue r = this->func(&this->fields[0], arg0, arg1, arg2);\n        this->unref();\n        return r;\n    }\n};\n\n// These two are used to represent locals written from inside inline functions\nclass RefLocal : public RefObject {\n  public:\n    TValue v;\n    static void destroy(RefLocal *l);\n    static void print(RefLocal *l);\n    RefLocal();\n};\n\nclass RefRefLocal : public RefObject {\n  public:\n    TValue v;\n    static void destroy(RefRefLocal *l);\n    static void print(RefRefLocal *l);\n    RefRefLocal();\n};\n\ntypedef int color;\n\n// note: this is hardcoded in PXT (hexfile.ts)\n\n#define PXT_REF_TAG_STRING 1\n#define PXT_REF_TAG_BUFFER 2\n#define PXT_REF_TAG_IMAGE 3\n#define PXT_REF_TAG_NUMBER 32\n#define PXT_REF_TAG_ACTION 33\n\nclass BoxedNumber : public RefObject {\n  public:\n    double num;\n    BoxedNumber() : RefObject(PXT_REF_TAG_NUMBER) {}\n} __attribute__((packed));\n\nclass BoxedString : public RefObject {\n  public:\n    uint16_t length;\n    char data[0];\n    BoxedString() : RefObject(PXT_REF_TAG_STRING) {}\n};\n\nclass BoxedBuffer : public RefObject {\n  public:\n    // data needs to be word-aligned, so we use 32 bits for length\n    int length;\n    uint8_t data[0];\n    BoxedBuffer() : RefObject(PXT_REF_TAG_BUFFER) {}\n};\n\n\n// the first byte of data indicates the format - currently 0xE1 or 0xE4 to 1 or 4 bit bitmaps\n// second byte indicates width in pixels\n// third byte indicates the height (which should also match the size of the buffer)\n// just like ordinary buffers, these can be layed out in flash\nclass RefImage : public RefObject {\n    uintptr_t _buffer;\n    uint8_t _data[0];\n\n  public:\n    RefImage(BoxedBuffer *buf);\n    RefImage(uint32_t sz);\n\n    bool hasBuffer() { return !(_buffer & 1); }\n    BoxedBuffer *buffer() { return hasBuffer() ? (BoxedBuffer *)_buffer : NULL; }\n    void setBuffer(BoxedBuffer *b);\n    bool isDirty() { return (_buffer & 3) == 3; }\n    void clearDirty() { if (isDirty()) _buffer &= ~2; }\n\n    uint8_t *data() { return hasBuffer() ? buffer()->data : _data; }\n    int length() { return hasBuffer() ? buffer()->length : (_buffer >> 2); }\n    int pixLength() { return length() - 4; }\n\n    int height();\n    int width();\n    int byteHeight();\n    int wordHeight();\n    int bpp();\n\n    bool hasPadding() { return (height() & 0x1f) != 0; }\n\n    uint8_t *pix() { return data() + 4; }\n    uint8_t *pix(int x, int y);\n    uint8_t fillMask(color c);\n    bool inRange(int x, int y);\n    void clamp(int *x, int *y);\n    void makeWritable();\n\n    static void destroy(RefImage *t);\n    static void print(RefImage *t);\n};\n\nRefImage *mkImage(int w, int h, int bpp);\n\n\ntypedef BoxedBuffer *Buffer;\ntypedef BoxedString *String;\ntypedef RefImage *Image_;\n\n// keep in sync with github/pxt/pxtsim/libgeneric.ts\nenum class NumberFormat {\n    Int8LE = 1,\n    UInt8LE,\n    Int16LE,\n    UInt16LE,\n    Int32LE,\n    Int8BE,\n    UInt8BE,\n    Int16BE,\n    UInt16BE,\n    Int32BE,\n\n    UInt32LE,\n    UInt32BE,\n    Float32LE,\n    Float64LE,\n    Float32BE,\n    Float64BE,\n};\n\n// data can be NULL in both cases\nString mkString(const char *data, int len = -1);\nBuffer mkBuffer(const uint8_t *data, int len);\n\nTNumber getNumberCore(uint8_t *buf, int size, NumberFormat format);\nvoid setNumberCore(uint8_t *buf, int size, NumberFormat format, TNumber value);\n\nTNumber mkNaN();\n\nvoid seedRandom(unsigned seed);\n// max is inclusive\nunsigned getRandom(unsigned max);\n\nextern const VTable string_vt;\nextern const VTable image_vt;\nextern const VTable buffer_vt;\nextern const VTable number_vt;\nextern const VTable RefAction_vtable;\n\nenum class ValType {\n    Undefined,\n    Boolean,\n    Number,\n    String,\n    Object,\n    Function,\n};\n\nValType valType(TValue v);\n} // namespace pxt\n\n#define PXT_DEF_STRING(name, val)                                                                  \\\n    static const char name[] __attribute__((aligned(4))) = \"\\xff\\xff\\x01\\x00\" val;\n\nusing namespace pxt;\n\nnamespace numops {\n//%\nString stringConv(TValue v);\n//%\nString toString(TValue v);\n}\n\nnamespace pins {\nBuffer createBuffer(int size);\n}\n\nnamespace String_ {\n//%\nint compare(TValue a, TValue b);\n}\n\n// The ARM Thumb generator in the JavaScript code is parsing\n// the hex file and looks for the magic numbers as present here.\n//\n// Then it fetches function pointer addresses from there.\n//\n// The vtable pointers are there, so that the ::emptyData for various types\n// can be patched with the right vtable.\n//\n#define PXT_SHIMS_BEGIN                                                                            \\\n    namespace pxt {                                                                                \\\n    const unsigned functionsAndBytecode[]                                                          \\\n        __attribute__((aligned(0x20))) = {0x08010801, 0x42424242, 0x08010801, 0x8de9d83e,\n\n#define PXT_SHIMS_END                                                                              \\\n    }                                                                                              \\\n    ;                                                                                              \\\n    }\n\n#ifndef X86_64\n#pragma GCC diagnostic ignored \"-Wpmf-conversions\"\n#endif\n\n#define PXT_VTABLE_TO_INT(vt) ((uintptr_t)(vt) >> vtableShift)\n#define PXT_VTABLE_BEGIN(classname, flags, iface)                                                  \\\n    const VTable classname##_vtable __attribute__((aligned(1 << vtableShift))) = {                 \\\n        sizeof(classname), flags, iface, {(void *)&classname::destroy, (void *)&classname::print,\n\n#define PXT_VTABLE_END                                                                             \\\n    }                                                                                              \\\n    }                                                                                              \\\n    ;\n\n#define PXT_VTABLE_INIT(classname) RefObject(PXT_VTABLE_TO_INT(&classname##_vtable))\n\n#define PXT_VTABLE_CTOR(classname)                                                                 \\\n    PXT_VTABLE_BEGIN(classname, 0, 0)                                                              \\\n    PXT_VTABLE_END classname::classname() : PXT_VTABLE_INIT(classname)\n\n#define PXT_MAIN                                                                                   \\\n    int main() {                                                                                   \\\n        pxt::start();                                                                              \\\n        return 0;                                                                                  \\\n    }\n\n#define PXT_FNPTR(x) (unsigned)(void *)(x)\n\n#define PXT_ABI(...)\n\n#define JOIN(a, b) a##b\n/// Defines getClassName() function to fetch the singleton\n#define SINGLETON(ClassName)                                                                       \\\n    static ClassName *JOIN(inst, ClassName);                                                       \\\n    ClassName *JOIN(get, ClassName)() {                                                            \\\n        if (!JOIN(inst, ClassName))                                                                \\\n            JOIN(inst, ClassName) = new ClassName();                                               \\\n        return JOIN(inst, ClassName);                                                              \\\n    }\n\n#endif\n",
      "shims.d.ts": "// Auto-generated. Do not edit.\n\n\n\n    //% indexerGet=BufferMethods::getByte indexerSet=BufferMethods::setByte\ndeclare interface Buffer {\n    /**\n     * Write a number in specified format in the buffer.\n     */\n    //% shim=BufferMethods::setNumber\n    setNumber(format: NumberFormat, offset: int32, value: number): void;\n\n    /**\n     * Read a number in specified format from the buffer.\n     */\n    //% shim=BufferMethods::getNumber\n    getNumber(format: NumberFormat, offset: int32): number;\n\n    /** Returns the length of a Buffer object. */\n    //% property shim=BufferMethods::length\n    length: int32;\n\n    /**\n     * Fill (a fragment) of the buffer with given value.\n     */\n    //% offset.defl=0 length.defl=-1 shim=BufferMethods::fill\n    fill(value: int32, offset?: int32, length?: int32): void;\n\n    /**\n     * Return a copy of a fragment of a buffer.\n     */\n    //% offset.defl=0 length.defl=-1 shim=BufferMethods::slice\n    slice(offset?: int32, length?: int32): Buffer;\n\n    /**\n     * Shift buffer left in place, with zero padding.\n     * @param offset number of bytes to shift; use negative value to shift right\n     * @param start start offset in buffer. Default is 0.\n     * @param length number of elements in buffer. If negative, length is set as the buffer length minus\n     * start. eg: -1\n     */\n    //% start.defl=0 length.defl=-1 shim=BufferMethods::shift\n    shift(offset: int32, start?: int32, length?: int32): void;\n\n    /**\n     * Convert a buffer to its hexadecimal representation.\n     */\n    //% shim=BufferMethods::toHex\n    toHex(): string;\n\n    /**\n     * Rotate buffer left in place.\n     * @param offset number of bytes to shift; use negative value to shift right\n     * @param start start offset in buffer. Default is 0.\n     * @param length number of elements in buffer. If negative, length is set as the buffer length minus\n     * start. eg: -1\n     */\n    //% start.defl=0 length.defl=-1 shim=BufferMethods::rotate\n    rotate(offset: int32, start?: int32, length?: int32): void;\n\n    /**\n     * Write contents of `src` at `dstOffset` in current buffer.\n     */\n    //% shim=BufferMethods::write\n    write(dstOffset: int32, src: Buffer): void;\n}\ndeclare namespace control {\n\n    /**\n     * Create a new zero-initialized buffer.\n     * @param size number of bytes in the buffer\n     */\n    //% shim=control::createBuffer\n    function createBuffer(size: int32): Buffer;\n}\ndeclare namespace loops {\n\n    /**\n     * Repeats the code forever in the background. On each iteration, allows other codes to run.\n     * @param body code to execute\n     */\n    //% help=loops/forever weight=100 afterOnStart=true deprecated=true\n    //% blockId=forever_deprecated block=\"forever\" blockAllowMultiple=1 shim=loops::forever\n    function forever(a: () => void): void;\n\n    /**\n     * Pause for the specified time in milliseconds\n     * @param ms how long to pause for, eg: 100, 200, 500, 1000, 2000\n     */\n    //% help=loops/pause weight=99 deprecated=true\n    //% async block=\"pause %pause=timePicker|ms\"\n    //% blockId=device_pause_deprecated shim=loops::pause\n    function pause(ms: int32): void;\n}\ndeclare namespace control {\n\n    /**\n     * Gets the number of milliseconds elapsed since power on.\n     */\n    //% help=control/millis weight=50\n    //% blockId=control_running_time block=\"millis (ms)\" shim=control::millis\n    function millis(): int32;\n\n    /**\n     * Used internally\n     */\n    //% flags.defl=16 shim=control::internalOnEvent\n    function internalOnEvent(src: int32, value: int32, handler: () => void, flags?: int32): void;\n\n    /**\n     * Reset the device.\n     */\n    //% weight=30 async help=control/reset blockGap=8\n    //% blockId=\"control_reset\" block=\"reset\" shim=control::reset\n    function reset(): void;\n\n    /**\n     * Block the current fiber for the given microseconds\n     * @param micros number of micro-seconds to wait. eg: 4\n     */\n    //% help=control/wait-micros weight=29 async\n    //% blockId=\"control_wait_us\" block=\"wait (µs)%micros\" shim=control::waitMicros\n    function waitMicros(micros: int32): void;\n\n    /**\n     * Run other code in the parallel.\n     */\n    //% help=control/run-in-parallel handlerStatement=1\n    //% blockId=\"control_run_in_parallel\" block=\"run in parallel\" blockGap=8 shim=control::runInParallel\n    function runInParallel(a: () => void): void;\n\n    /**\n     * Blocks the calling thread until the specified event is raised.\n     */\n    //% help=control/wait-for-event async\n    //% blockId=control_wait_for_event block=\"wait for event|from %src|with value %value\" shim=control::waitForEvent\n    function waitForEvent(src: int32, value: int32): void;\n\n    /**\n     * Derive a unique, consistent serial number of this device from internal data.\n     */\n    //% blockId=\"control_device_serial_number\" block=\"device serial number\" weight=9\n    //% help=control/device-serial-number shim=control::deviceSerialNumber\n    function deviceSerialNumber(): int32;\n\n    /**\n     *\n     */\n    //% shim=control::__log\n    function __log(text: string): void;\n}\n\n// Auto-generated. Do not edit. Really.\n",
      "test.ts": "let i = 1\nlet f = 0.5\nlet plus = i + f\nlet minus = i - f\n\nlet r = Math.random()\nlet ri = Math.randomRange(5, 10)\n\nforever(() => {\n    pause(100)\n})\n"
    },
    "core": {
      "README.md": "#core \n\nThe core library",
      "codal.cpp": "#include \"pxt.h\"\n\nvoid cpu_clock_init(void);\n\nPXT_ABI(__aeabi_dadd)\nPXT_ABI(__aeabi_dcmplt)\nPXT_ABI(__aeabi_dcmpgt)\nPXT_ABI(__aeabi_dsub)\nPXT_ABI(__aeabi_ddiv)\nPXT_ABI(__aeabi_dmul)\n\n#define PXT_COMM_BASE 0x20001000  // 4k in\n\nnamespace pxt {\n\nvoid platform_init();\nvoid usb_init();\n\n// The first two word are used to tell the bootloader that a single reset should start the\n// bootloader and the MSD device, not us.\n// The rest is reserved for partial flashing checksums.\n__attribute__((section(\".binmeta\"))) __attribute__((used)) const uint32_t pxt_binmeta[] = {\n    0x87eeb07c, 0x87eeb07c, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff,\n    0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff,\n};\n\nCODAL_TIMER devTimer;\nEvent lastEvent;\nMessageBus devMessageBus;\ncodal::CodalDevice device;\n\nstruct FreeList {\n    FreeList *next;\n};\n\nstatic void commInit() {\n    int commSize = bytecode[20];\n    if (!commSize) return;\n\n    FreeList *head = NULL;        \n    void *commBase = (void*)PXT_COMM_BASE;\n    for (;;) {\n        void *p = malloc(4);\n        // assume 4 byte alloc header; if we're not hitting 8 byte alignment, try allocating 8 bytes, not 4\n        // without the volatile, gcc assumes 8 byte alignment on malloc()\n        volatile unsigned hp = (unsigned)p;\n        if (hp & 4) {\n            free(p);\n            p = malloc(8);\n        }\n        if (p == commBase) {\n            free(p);\n            // allocate the comm section; this is never freed\n            p = malloc(commSize);\n            if (p != commBase)\n                target_panic(999);\n            break;\n        }\n        if (p > commBase) \n            target_panic(999);\n        auto f = (FreeList*)p;\n        f->next = head;\n        head = f;\n    }\n    // free all the filler stuff\n    while (head) {\n        auto p = head;\n        head = head->next;\n        free(p);\n    }\n}\n\nstatic void initCodal() {\n    cpu_clock_init();\n\n    commInit();\n\n    // Bring up fiber scheduler.\n    scheduler_init(devMessageBus);\n\n    // We probably don't need that - components are initialized when one obtains\n    // the reference to it.\n    // devMessageBus.listen(DEVICE_ID_MESSAGE_BUS_LISTENER, DEVICE_EVT_ANY, this,\n    // &CircuitPlayground::onListenerRegisteredEvent);\n\n    for (int i = 0; i < DEVICE_COMPONENT_COUNT; i++) {\n        if (CodalComponent::components[i])\n            CodalComponent::components[i]->init();\n    }\n\n    usb_init();\n}\n\n// ---------------------------------------------------------------------------\n// An adapter for the API expected by the run-time.\n// ---------------------------------------------------------------------------\n\n// We have the invariant that if [dispatchEvent] is registered against the DAL\n// for a given event, then [handlersMap] contains a valid entry for that\n// event.\nvoid dispatchEvent(Event e) {\n    lastEvent = e;\n\n    auto curr = findBinding(e.source, e.value);\n    auto value = fromInt(e.value);\n    if (curr)\n        runAction1(curr->action, value);\n\n    curr = findBinding(e.source, DEVICE_EVT_ANY);\n    if (curr)\n        runAction1(curr->action, value);\n}\n\nvoid registerWithDal(int id, int event, Action a, int flags) {\n    // first time?\n    if (!findBinding(id, event))\n        devMessageBus.listen(id, event, dispatchEvent, flags);\n    setBinding(id, event, a);\n}\n\nvoid fiberDone(void *a) {\n    decr((Action)a);\n    release_fiber();\n}\n\nvoid releaseFiber() {\n    release_fiber();    \n}\n\nvoid sleep_ms(unsigned ms) {\n    fiber_sleep(ms);\n}\n\nvoid sleep_us(uint64_t us) {\n    target_wait_us(us);\n}\n\nvoid forever_stub(void *a) {\n    while (true) {\n        runAction0((Action)a);\n        fiber_sleep(20);\n    }\n}\n\nvoid runForever(Action a) {\n    if (a != 0) {\n        incr(a);\n        create_fiber(forever_stub, (void *)a);\n    }\n}\n\nvoid runInParallel(Action a) {\n    if (a != 0) {\n        incr(a);\n        create_fiber((void (*)(void *))runAction0, (void *)a, fiberDone);\n    }\n}\n\nvoid waitForEvent(int id, int event) {\n    fiber_wait_for_event(id, event);\n}\n\nvoid initRuntime() {\n    initCodal();\n    platform_init();\n}\n\n//%\nunsigned afterProgramPage() {\n    unsigned ptr = (unsigned)&bytecode[0];\n    ptr += programSize();\n    ptr = (ptr + (PAGE_SIZE - 1)) & ~(PAGE_SIZE - 1);\n    return ptr;\n}\n\nint getSerialNumber() {\n    return device.getSerialNumber();\n}\n\nint current_time_ms() {\n    return system_timer_current_time();\n}\n}\n",
      "control.cpp": "#include \"pxt.h\"\n\nnamespace control {\n\n/**\n * Announce that an event happened to registered handlers.\n * @param src ID of the MicroBit Component that generated the event\n * @param value Component specific code indicating the cause of the event.\n */\n//% weight=21 blockGap=12 blockId=\"control_raise_event\"\n//% help=control/raise-event\n//% block=\"raise event|from %src|with value %value\" blockExternalInputs=1\nvoid raiseEvent(int src, int value) {\n    Event evt(src, value);\n}\n\n/**\n* Determine the version of system software currently running.\n*/\n//% blockId=\"control_device_dal_version\" block=\"device dal version\"\n//% help=control/device-dal-version\nString deviceDalVersion() {\n    return mkString(device.getVersion());\n}\n\n/**\n* Allocates the next user notification event\n*/\n//% help=control/allocate-notify-event\nint allocateNotifyEvent() {\n    return ::allocateNotifyEvent();\n}\n\n/** Write a message to DMESG debugging buffer. */\n//%\nvoid dmesg(String s) {\n    DMESG(\"# %s\", s->data);\n}\n\n/** Write a message and value (pointer) to DMESG debugging buffer. */\n//%\nvoid dmesgPtr(String str, Object_ ptr) {\n    DMESG(\"# %s: %p\", str->data, ptr);\n}\n\n\n}\n",
      "dal.d.ts": "// Auto-generated. Do not edit.\ndeclare const enum DAL {\n    // built/codal/libraries/codal-core/inc/core/CodalComponent.h\n    DEVICE_ID_BUTTON_A = 1,\n    DEVICE_ID_BUTTON_B = 2,\n    DEVICE_ID_BUTTON_AB = 3,\n    DEVICE_ID_BUTTON_RESET = 4,\n    DEVICE_ID_ACCELEROMETER = 5,\n    DEVICE_ID_COMPASS = 6,\n    DEVICE_ID_DISPLAY = 7,\n    DEVICE_ID_THERMOMETER = 8,\n    DEVICE_ID_RADIO = 9,\n    DEVICE_ID_RADIO_DATA_READY = 10,\n    DEVICE_ID_MULTIBUTTON_ATTACH = 11,\n    DEVICE_ID_SERIAL = 12,\n    DEVICE_ID_GESTURE = 13,\n    DEVICE_ID_SYSTEM_TIMER = 14,\n    DEVICE_ID_SCHEDULER = 15,\n    DEVICE_ID_COMPONENT = 16,\n    DEVICE_ID_LIGHT_SENSOR = 17,\n    DEVICE_ID_TOUCH_SENSOR = 18,\n    DEVICE_ID_SYSTEM_DAC = 19,\n    DEVICE_ID_SYSTEM_MICROPHONE = 20,\n    DEVICE_ID_SYSTEM_LEVEL_DETECTOR = 21,\n    DEVICE_ID_SYSTEM_LEVEL_DETECTOR_SPL = 22,\n    DEVICE_ID_MSC = 23,\n    DEVICE_ID_SPI = 24,\n    DEVICE_ID_IO_P0 = 100,\n    DEVICE_ID_MESSAGE_BUS_LISTENER = 1021,\n    DEVICE_ID_NOTIFY_ONE = 1022,\n    DEVICE_ID_NOTIFY = 1023,\n    DEVICE_COMPONENT_RUNNING = 4096,\n    DEVICE_COMPONENT_STATUS_SYSTEM_TICK = 8192,\n    DEVICE_COMPONENT_STATUS_IDLE_TICK = 16384,\n    DEVICE_COMPONENT_LISTENERS_CONFIGURED = 1,\n    DEVICE_COMPONENT_EVT_SYSTEM_TICK = 1,\n    // built/codal/libraries/codal-core/inc/core/CodalFiber.h\n    DEVICE_SCHEDULER_RUNNING = 1,\n    DEVICE_SCHEDULER_IDLE = 2,\n    DEVICE_FIBER_FLAG_FOB = 1,\n    DEVICE_FIBER_FLAG_PARENT = 2,\n    DEVICE_FIBER_FLAG_CHILD = 4,\n    DEVICE_FIBER_FLAG_DO_NOT_PAGE = 8,\n    DEVICE_SCHEDULER_EVT_TICK = 1,\n    DEVICE_SCHEDULER_EVT_IDLE = 2,\n    // built/codal/libraries/codal-core/inc/core/CodalListener.h\n    MESSAGE_BUS_LISTENER_PARAMETERISED = 1,\n    MESSAGE_BUS_LISTENER_METHOD = 2,\n    MESSAGE_BUS_LISTENER_BUSY = 4,\n    MESSAGE_BUS_LISTENER_REENTRANT = 8,\n    MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY = 16,\n    MESSAGE_BUS_LISTENER_DROP_IF_BUSY = 32,\n    MESSAGE_BUS_LISTENER_NONBLOCKING = 64,\n    MESSAGE_BUS_LISTENER_URGENT = 128,\n    MESSAGE_BUS_LISTENER_DELETING = 32768,\n    MESSAGE_BUS_LISTENER_IMMEDIATE = 192,\n    // built/codal/libraries/codal-core/inc/core/ErrorNo.h\n    DEVICE_OK = 0,\n    DEVICE_INVALID_PARAMETER = -1001,\n    DEVICE_NOT_SUPPORTED = -1002,\n    DEVICE_CALIBRATION_IN_PROGRESS = -1003,\n    DEVICE_CALIBRATION_REQUIRED = -1004,\n    DEVICE_NO_RESOURCES = -1005,\n    DEVICE_BUSY = -1006,\n    DEVICE_CANCELLED = -1007,\n    DEVICE_I2C_ERROR = -1010,\n    DEVICE_SERIAL_IN_USE = -1011,\n    DEVICE_NO_DATA = -1012,\n    DEVICE_NOT_IMPLEMENTED = -1013,\n    DEVICE_SPI_ERROR = -1014,\n    DEVICE_OOM = 20,\n    DEVICE_HEAP_ERROR = 30,\n    DEVICE_NULL_DEREFERENCE = 40,\n    DEVICE_USB_ERROR = 50,\n    // built/codal/libraries/codal-core/inc/core/NotifyEvents.h\n    DISPLAY_EVT_FREE = 1,\n    CODAL_SERIAL_EVT_TX_EMPTY = 2,\n    BLE_EVT_SERIAL_TX_EMPTY = 3,\n    DEVICE_NOTIFY_USER_EVENT_BASE = 1024,\n    // built/codal/libraries/codal-core/inc/driver-models/AbstractButton.h\n    DEVICE_BUTTON_EVT_DOWN = 1,\n    DEVICE_BUTTON_EVT_UP = 2,\n    DEVICE_BUTTON_EVT_CLICK = 3,\n    DEVICE_BUTTON_EVT_LONG_CLICK = 4,\n    DEVICE_BUTTON_EVT_HOLD = 5,\n    DEVICE_BUTTON_EVT_DOUBLE_CLICK = 6,\n    DEVICE_BUTTON_LONG_CLICK_TIME = 1000,\n    DEVICE_BUTTON_HOLD_TIME = 1500,\n    DEVICE_BUTTON_STATE = 1,\n    DEVICE_BUTTON_STATE_HOLD_TRIGGERED = 2,\n    DEVICE_BUTTON_STATE_CLICK = 4,\n    DEVICE_BUTTON_STATE_LONG_CLICK = 8,\n    DEVICE_BUTTON_SIGMA_MIN = 0,\n    DEVICE_BUTTON_SIGMA_MAX = 12,\n    DEVICE_BUTTON_SIGMA_THRESH_HI = 8,\n    DEVICE_BUTTON_SIGMA_THRESH_LO = 2,\n    DEVICE_BUTTON_DOUBLE_CLICK_THRESH = 50,\n    DEVICE_BUTTON_SIMPLE_EVENTS = 0,\n    DEVICE_BUTTON_ALL_EVENTS = 1,\n    ACTIVE_LOW = 0,\n    ACTIVE_HIGH = 1,\n    // built/codal/libraries/codal-core/inc/driver-models/Accelerometer.h\n    ACCELEROMETER_IMU_DATA_VALID = 2,\n    ACCELEROMETER_EVT_DATA_UPDATE = 1,\n    ACCELEROMETER_EVT_NONE = 0,\n    ACCELEROMETER_EVT_TILT_UP = 1,\n    ACCELEROMETER_EVT_TILT_DOWN = 2,\n    ACCELEROMETER_EVT_TILT_LEFT = 3,\n    ACCELEROMETER_EVT_TILT_RIGHT = 4,\n    ACCELEROMETER_EVT_FACE_UP = 5,\n    ACCELEROMETER_EVT_FACE_DOWN = 6,\n    ACCELEROMETER_EVT_FREEFALL = 7,\n    ACCELEROMETER_EVT_3G = 8,\n    ACCELEROMETER_EVT_6G = 9,\n    ACCELEROMETER_EVT_8G = 10,\n    ACCELEROMETER_EVT_SHAKE = 11,\n    ACCELEROMETER_REST_TOLERANCE = 200,\n    ACCELEROMETER_TILT_TOLERANCE = 200,\n    ACCELEROMETER_FREEFALL_TOLERANCE = 400,\n    ACCELEROMETER_SHAKE_TOLERANCE = 400,\n    ACCELEROMETER_3G_TOLERANCE = 3072,\n    ACCELEROMETER_6G_TOLERANCE = 6144,\n    ACCELEROMETER_8G_TOLERANCE = 8192,\n    ACCELEROMETER_GESTURE_DAMPING = 5,\n    ACCELEROMETER_SHAKE_DAMPING = 10,\n    ACCELEROMETER_SHAKE_RTX = 30,\n    ACCELEROMETER_SHAKE_COUNT_THRESHOLD = 4,\n    // built/codal/libraries/codal-core/inc/driver-models/Compass.h\n    COMPASS_STATUS_RUNNING = 1,\n    COMPASS_STATUS_CALIBRATED = 2,\n    COMPASS_STATUS_CALIBRATING = 4,\n    COMPASS_STATUS_ADDED_TO_IDLE = 8,\n    COMPASS_EVT_DATA_UPDATE = 1,\n    COMPASS_EVT_CONFIG_NEEDED = 2,\n    COMPASS_EVT_CALIBRATE = 3,\n    COMPASS_EVT_CALIBRATION_NEEDED = 4,\n    // built/codal/libraries/codal-core/inc/driver-models/Pin.h\n    IO_STATUS_DIGITAL_IN = 1,\n    IO_STATUS_DIGITAL_OUT = 2,\n    IO_STATUS_ANALOG_IN = 4,\n    IO_STATUS_ANALOG_OUT = 8,\n    IO_STATUS_TOUCH_IN = 16,\n    IO_STATUS_EVENT_ON_EDGE = 32,\n    IO_STATUS_EVENT_PULSE_ON_EDGE = 64,\n    DEVICE_PIN_MAX_OUTPUT = 1023,\n    DEVICE_PIN_MAX_SERVO_RANGE = 180,\n    DEVICE_PIN_DEFAULT_SERVO_RANGE = 2000,\n    DEVICE_PIN_DEFAULT_SERVO_CENTER = 1500,\n    DEVICE_PIN_EVENT_NONE = 0,\n    DEVICE_PIN_EVENT_ON_EDGE = 1,\n    DEVICE_PIN_EVENT_ON_PULSE = 2,\n    DEVICE_PIN_EVENT_ON_TOUCH = 3,\n    DEVICE_PIN_EVT_RISE = 2,\n    DEVICE_PIN_EVT_FALL = 3,\n    DEVICE_PIN_EVT_PULSE_HI = 4,\n    DEVICE_PIN_EVT_PULSE_LO = 5,\n    PIN_CAPABILITY_DIGITAL = 1,\n    PIN_CAPABILITY_ANALOG = 2,\n    PIN_CAPABILITY_AD = 3,\n    PIN_CAPABILITY_ALL = 3,\n    None = 0,\n    Down = 1,\n    Up = 2,\n    // built/codal/libraries/codal-core/inc/driver-models/SPIFlash.h\n    SPIFLASH_PAGE_SIZE = 256,\n    SPIFLASH_SMALL_ROW_PAGES = 16,\n    SPIFLASH_BIG_ROW_PAGES = 256,\n    // built/codal/libraries/codal-core/inc/driver-models/Serial.h\n    CODAL_SERIAL_DEFAULT_BAUD_RATE = 115200,\n    CODAL_SERIAL_DEFAULT_BUFFER_SIZE = 20,\n    CODAL_SERIAL_EVT_DELIM_MATCH = 1,\n    CODAL_SERIAL_EVT_HEAD_MATCH = 2,\n    CODAL_SERIAL_EVT_RX_FULL = 3,\n    CODAL_SERIAL_RX_IN_USE = 1,\n    CODAL_SERIAL_TX_IN_USE = 2,\n    CODAL_SERIAL_RX_BUFF_INIT = 4,\n    CODAL_SERIAL_TX_BUFF_INIT = 8,\n    ASYNC = 0,\n    SYNC_SPINWAIT = 1,\n    SYNC_SLEEP = 2,\n    RxInterrupt = 0,\n    TxInterrupt = 1,\n    // built/codal/libraries/codal-core/inc/driver-models/Timer.h\n    CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE = 10,\n    // built/codal/libraries/codal-core/inc/drivers/AnalogSensor.h\n    ANALOG_THRESHOLD_LOW = 1,\n    ANALOG_THRESHOLD_HIGH = 2,\n    ANALOG_SENSOR_UPDATE_NEEDED = 3,\n    ANALOG_SENSOR_INITIALISED = 1,\n    ANALOG_SENSOR_HIGH_THRESHOLD_PASSED = 2,\n    ANALOG_SENSOR_LOW_THRESHOLD_PASSED = 4,\n    ANALOG_SENSOR_LOW_THRESHOLD_ENABLED = 8,\n    ANALOG_SENSOR_HIGH_THRESHOLD_ENABLED = 16,\n    // built/codal/libraries/codal-core/inc/drivers/AnimatedDisplay.h\n    DISPLAY_EVT_ANIMATION_COMPLETE = 1,\n    DISPLAY_DEFAULT_AUTOCLEAR = 1,\n    DISPLAY_SPACING = 1,\n    DISPLAY_ANIMATE_DEFAULT_POS = -255,\n    DISPLAY_DEFAULT_SCROLL_SPEED = 120,\n    DISPLAY_DEFAULT_SCROLL_STRIDE = -1,\n    DISPLAY_DEFAULT_PRINT_SPEED = 400,\n    ANIMATION_MODE_NONE = 0,\n    ANIMATION_MODE_STOPPED = 1,\n    ANIMATION_MODE_SCROLL_TEXT = 2,\n    ANIMATION_MODE_PRINT_TEXT = 3,\n    ANIMATION_MODE_SCROLL_IMAGE = 4,\n    ANIMATION_MODE_ANIMATE_IMAGE = 5,\n    ANIMATION_MODE_ANIMATE_IMAGE_WITH_CLEAR = 6,\n    ANIMATION_MODE_PRINT_CHARACTER = 7,\n    // built/codal/libraries/codal-core/inc/drivers/FAT.h\n    FAT_RESERVED_SECTORS = 1,\n    FAT_ROOT_DIR_SECTORS = 4,\n    // built/codal/libraries/codal-core/inc/drivers/HID.h\n    HID_REQUEST_GET_REPORT = 1,\n    HID_REQUEST_GET_IDLE = 2,\n    HID_REQUEST_GET_PROTOCOL = 3,\n    HID_REQUEST_SET_REPORT = 9,\n    HID_REQUEST_SET_IDLE = 10,\n    HID_REQUEST_SET_PROTOCOL = 11,\n    // built/codal/libraries/codal-core/inc/drivers/HIDKeyboard.h\n    HID_KEYBOARD_NUM_REPORTS = 3,\n    HID_KEYBOARD_REPORT_GENERIC = 1,\n    HID_KEYBOARD_REPORT_CONSUMER = 2,\n    HID_KEYBOARD_KEYSTATE_SIZE_GENERIC = 8,\n    HID_KEYBOARD_KEYSTATE_SIZE_CONSUMER = 2,\n    HID_KEYBOARD_MODIFIER_OFFSET = 2,\n    HID_KEYBOARD_DELAY_DEFAULT = 10,\n    PressKey = 0,\n    ReleaseKey = 1,\n    // built/codal/libraries/codal-core/inc/drivers/KeyMap.h\n    KEYMAP_ALL_KEYS_UP_Val = 1,\n    KEYMAP_ALL_KEYS_UP_POS = 28,\n    KEYMAP_NORMAL_KEY_Val = 0,\n    KEYMAP_MODIFIER_KEY_Val = 1,\n    KEYMAP_MODIFIER_POS = 29,\n    KEYMAP_MEDIA_KEY_Val = 1,\n    KEYMAP_MEDIA_POS = 30,\n    KEYMAP_KEY_UP_Val = 0,\n    KEYMAP_KEY_DOWN_Val = 1,\n    KEYMAP_KEY_DOWN_POS = 31,\n    // built/codal/libraries/codal-core/inc/drivers/LEDMatrix.h\n    LED_MATRIX_GREYSCALE_BIT_DEPTH = 8,\n    LED_MATRIX_EVT_LIGHT_SENSE = 2,\n    LED_MATRIX_EVT_FRAME_TIMEOUT = 3,\n    LED_MATRIX_MINIMUM_BRIGHTNESS = 1,\n    LED_MATRIX_MAXIMUM_BRIGHTNESS = 255,\n    LED_MATRIX_DEFAULT_BRIGHTNESS = 255,\n    DISPLAY_MODE_BLACK_AND_WHITE = 0,\n    DISPLAY_MODE_GREYSCALE = 1,\n    DISPLAY_MODE_BLACK_AND_WHITE_LIGHT_SENSE = 2,\n    MATRIX_DISPLAY_ROTATION_0 = 0,\n    MATRIX_DISPLAY_ROTATION_90 = 1,\n    MATRIX_DISPLAY_ROTATION_180 = 2,\n    MATRIX_DISPLAY_ROTATION_270 = 3,\n    NO_CONN = 0,\n    // built/codal/libraries/codal-core/inc/drivers/MultiButton.h\n    MULTI_BUTTON_STATE_1 = 1,\n    MULTI_BUTTON_STATE_2 = 2,\n    MULTI_BUTTON_HOLD_TRIGGERED_1 = 4,\n    MULTI_BUTTON_HOLD_TRIGGERED_2 = 8,\n    MULTI_BUTTON_SUPRESSED_1 = 16,\n    MULTI_BUTTON_SUPRESSED_2 = 32,\n    MULTI_BUTTON_ATTACHED = 64,\n    // built/codal/libraries/codal-core/inc/drivers/ST7735.h\n    MADCTL_MY = 128,\n    MADCTL_MX = 64,\n    MADCTL_MV = 32,\n    MADCTL_ML = 16,\n    MADCTL_RGB = 0,\n    MADCTL_BGR = 8,\n    MADCTL_MH = 4,\n    // built/codal/libraries/codal-core/inc/drivers/TouchButton.h\n    TOUCH_BUTTON_CALIBRATION_PERIOD = 10,\n    TOUCH_BUTTON_CALIBRATION_LINEAR_OFFSET = 2,\n    TOUCH_BUTTON_CALIBRATION_PERCENTAGE_OFFSET = 5,\n    TOUCH_BUTTON_CALIBRATING = 16,\n    // built/codal/libraries/codal-core/inc/drivers/TouchSensor.h\n    TOUCH_SENSOR_MAX_BUTTONS = 10,\n    TOUCH_SENSOR_SAMPLE_PERIOD = 50,\n    TOUCH_SENSE_SAMPLE_MAX = 1000,\n    TOUCH_SENSOR_UPDATE_NEEDED = 1,\n    // built/codal/libraries/codal-core/inc/drivers/USB_HID_Keys.h\n    KEY_MOD_LCTRL = 1,\n    KEY_MOD_LSHIFT = 2,\n    KEY_MOD_LALT = 4,\n    KEY_MOD_LMETA = 8,\n    KEY_MOD_RCTRL = 16,\n    KEY_MOD_RSHIFT = 32,\n    KEY_MOD_RALT = 64,\n    KEY_MOD_RMETA = 128,\n    KEY_NONE = 0,\n    KEY_ERR_OVF = 1,\n    KEY_A = 4,\n    KEY_B = 5,\n    KEY_C = 6,\n    KEY_D = 7,\n    KEY_E = 8,\n    KEY_F = 9,\n    KEY_G = 10,\n    KEY_H = 11,\n    KEY_I = 12,\n    KEY_J = 13,\n    KEY_K = 14,\n    KEY_L = 15,\n    KEY_M = 16,\n    KEY_N = 17,\n    KEY_O = 18,\n    KEY_P = 19,\n    KEY_Q = 20,\n    KEY_R = 21,\n    KEY_S = 22,\n    KEY_T = 23,\n    KEY_U = 24,\n    KEY_V = 25,\n    KEY_W = 26,\n    KEY_X = 27,\n    KEY_Y = 28,\n    KEY_Z = 29,\n    KEY_1 = 30,\n    KEY_2 = 31,\n    KEY_3 = 32,\n    KEY_4 = 33,\n    KEY_5 = 34,\n    KEY_6 = 35,\n    KEY_7 = 36,\n    KEY_8 = 37,\n    KEY_9 = 38,\n    KEY_0 = 39,\n    KEY_ENTER = 40,\n    KEY_ESC = 41,\n    KEY_BACKSPACE = 42,\n    KEY_TAB = 43,\n    KEY_SPACE = 44,\n    KEY_MINUS = 45,\n    KEY_EQUAL = 46,\n    KEY_LEFTBRACE = 47,\n    KEY_RIGHTBRACE = 48,\n    KEY_BACKSLASH = 49,\n    KEY_HASHTILDE = 50,\n    KEY_SEMICOLON = 51,\n    KEY_APOSTROPHE = 52,\n    KEY_GRAVE = 53,\n    KEY_COMMA = 54,\n    KEY_DOT = 55,\n    KEY_SLASH = 56,\n    KEY_CAPSLOCK = 57,\n    KEY_F1 = 58,\n    KEY_F2 = 59,\n    KEY_F3 = 60,\n    KEY_F4 = 61,\n    KEY_F5 = 62,\n    KEY_F6 = 63,\n    KEY_F7 = 64,\n    KEY_F8 = 65,\n    KEY_F9 = 66,\n    KEY_F10 = 67,\n    KEY_F11 = 68,\n    KEY_F12 = 69,\n    KEY_SYSRQ = 70,\n    KEY_SCROLLLOCK = 71,\n    KEY_PAUSE = 72,\n    KEY_INSERT = 73,\n    KEY_HOME = 74,\n    KEY_PAGEUP = 75,\n    KEY_DELETE = 76,\n    KEY_END = 77,\n    KEY_PAGEDOWN = 78,\n    KEY_RIGHT = 79,\n    KEY_LEFT = 80,\n    KEY_DOWN = 81,\n    KEY_UP = 82,\n    KEY_NUMLOCK = 83,\n    KEY_KPSLASH = 84,\n    KEY_KPASTERISK = 85,\n    KEY_KPMINUS = 86,\n    KEY_KPPLUS = 87,\n    KEY_KPENTER = 88,\n    KEY_KP1 = 89,\n    KEY_KP2 = 90,\n    KEY_KP3 = 91,\n    KEY_KP4 = 92,\n    KEY_KP5 = 93,\n    KEY_KP6 = 94,\n    KEY_KP7 = 95,\n    KEY_KP8 = 96,\n    KEY_KP9 = 97,\n    KEY_KP0 = 98,\n    KEY_KPDOT = 99,\n    KEY_102ND = 100,\n    KEY_COMPOSE = 101,\n    KEY_POWER = 102,\n    KEY_KPEQUAL = 103,\n    KEY_F13 = 104,\n    KEY_F14 = 105,\n    KEY_F15 = 106,\n    KEY_F16 = 107,\n    KEY_F17 = 108,\n    KEY_F18 = 109,\n    KEY_F19 = 110,\n    KEY_F20 = 111,\n    KEY_F21 = 112,\n    KEY_F22 = 113,\n    KEY_F23 = 114,\n    KEY_F24 = 115,\n    KEY_OPEN = 116,\n    KEY_HELP = 117,\n    KEY_PROPS = 118,\n    KEY_FRONT = 119,\n    KEY_STOP = 120,\n    KEY_AGAIN = 121,\n    KEY_UNDO = 122,\n    KEY_CUT = 123,\n    KEY_COPY = 124,\n    KEY_PASTE = 125,\n    KEY_FIND = 126,\n    KEY_MUTE = 127,\n    KEY_VOLUMEUP = 128,\n    KEY_VOLUMEDOWN = 129,\n    KEY_KPCOMMA = 133,\n    KEY_RO = 135,\n    KEY_KATAKANAHIRAGANA = 136,\n    KEY_YEN = 137,\n    KEY_HENKAN = 138,\n    KEY_MUHENKAN = 139,\n    KEY_KPJPCOMMA = 140,\n    KEY_HANGEUL = 144,\n    KEY_HANJA = 145,\n    KEY_KATAKANA = 146,\n    KEY_HIRAGANA = 147,\n    KEY_ZENKAKUHANKAKU = 148,\n    KEY_KPLEFTPAREN = 182,\n    KEY_KPRIGHTPAREN = 183,\n    KEY_LEFTCTRL = 224,\n    KEY_LEFTSHIFT = 225,\n    KEY_LEFTALT = 226,\n    KEY_LEFTMETA = 227,\n    KEY_RIGHTCTRL = 228,\n    KEY_RIGHTSHIFT = 229,\n    KEY_RIGHTALT = 230,\n    KEY_RIGHTMETA = 231,\n    KEY_MEDIA_PLAYPAUSE = 232,\n    KEY_MEDIA_STOPCD = 233,\n    KEY_MEDIA_PREVIOUSSONG = 234,\n    KEY_MEDIA_NEXTSONG = 235,\n    KEY_MEDIA_EJECTCD = 236,\n    KEY_MEDIA_VOLUMEUP = 237,\n    KEY_MEDIA_VOLUMEDOWN = 238,\n    KEY_MEDIA_MUTE = 239,\n    KEY_MEDIA_WWW = 240,\n    KEY_MEDIA_BACK = 241,\n    KEY_MEDIA_FORWARD = 242,\n    KEY_MEDIA_STOP = 243,\n    KEY_MEDIA_FIND = 244,\n    KEY_MEDIA_SCROLLUP = 245,\n    KEY_MEDIA_SCROLLDOWN = 246,\n    KEY_MEDIA_EDIT = 247,\n    KEY_MEDIA_SLEEP = 248,\n    KEY_MEDIA_COFFEE = 249,\n    KEY_MEDIA_REFRESH = 250,\n    KEY_MEDIA_CALC = 251,\n    // built/codal/libraries/codal-core/inc/drivers/uf2format.h\n    UF2FORMAT_H = 1,\n    APP_START_ADDRESS = 8192,\n    UF2_FLAG_NOFLASH = 1,\n    // built/codal/libraries/codal-core/inc/streams/DataStream.h\n    DATASTREAM_MAXIMUM_BUFFERS = 1,\n    // built/codal/libraries/codal-core/inc/streams/LevelDetector.h\n    LEVEL_THRESHOLD_LOW = 1,\n    LEVEL_THRESHOLD_HIGH = 2,\n    LEVEL_DETECTOR_INITIALISED = 1,\n    LEVEL_DETECTOR_HIGH_THRESHOLD_PASSED = 2,\n    LEVEL_DETECTOR_LOW_THRESHOLD_PASSED = 4,\n    LEVEL_DETECTOR_DEFAULT_WINDOW_SIZE = 128,\n    // built/codal/libraries/codal-core/inc/streams/LevelDetectorSPL.h\n    LEVEL_DETECTOR_SPL_INITIALISED = 1,\n    LEVEL_DETECTOR_SPL_HIGH_THRESHOLD_PASSED = 2,\n    LEVEL_DETECTOR_SPL_LOW_THRESHOLD_PASSED = 4,\n    LEVEL_DETECTOR_SPL_DEFAULT_WINDOW_SIZE = 128,\n    // built/codal/libraries/codal-core/inc/streams/Synthesizer.h\n    SYNTHESIZER_SAMPLE_RATE = 44100,\n    TONE_WIDTH = 1024,\n    // built/codal/libraries/codal-core/inc/types/BitmapFont.h\n    BITMAP_FONT_WIDTH = 5,\n    BITMAP_FONT_HEIGHT = 5,\n    BITMAP_FONT_ASCII_START = 32,\n    BITMAP_FONT_ASCII_END = 126,\n    // built/codal/libraries/codal-core/inc/types/CoordinateSystem.h\n    COORDINATE_SPACE_ROTATED_0 = 0,\n    COORDINATE_SPACE_ROTATED_90 = 1,\n    COORDINATE_SPACE_ROTATED_180 = 2,\n    COORDINATE_SPACE_ROTATED_270 = 3,\n    RAW = 0,\n    SIMPLE_CARTESIAN = 1,\n    NORTH_EAST_DOWN = 2,\n    NORTH_EAST_UP = 3,\n    // built/codal/libraries/codal-core/inc/types/Event.h\n    DEVICE_ID_ANY = 0,\n    DEVICE_EVT_ANY = 0,\n    CREATE_ONLY = 0,\n    CREATE_AND_FIRE = 1,\n    DEVICE_EVENT_DEFAULT_LAUNCH_MODE = 1,\n    // built/codal/libraries/codal-core/inc/types/RefCounted.h\n    REF_TAG_STRING = 1,\n    REF_TAG_BUFFER = 2,\n    REF_TAG_IMAGE = 3,\n    REF_TAG_USER = 32,\n    // built/codal/pxtapp/accelerometer/axis.h\n    ACC_ROTATION = 0,\n    // built/codal/pxtapp/hf2dbg.h\n    HF2DBG_H = 1,\n    // built/codal/pxtapp/pins.h\n    CFG_PIN_ACCELEROMETER_INT = 1,\n    CFG_PIN_ACCELEROMETER_SCL = 2,\n    CFG_PIN_ACCELEROMETER_SDA = 3,\n    CFG_PIN_BTN_A = 4,\n    CFG_PIN_BTN_B = 5,\n    CFG_PIN_BTN_SLIDE = 6,\n    CFG_PIN_DOTSTAR_CLOCK = 7,\n    CFG_PIN_DOTSTAR_DATA = 8,\n    CFG_PIN_FLASH_CS = 9,\n    CFG_PIN_FLASH_MISO = 10,\n    CFG_PIN_FLASH_MOSI = 11,\n    CFG_PIN_FLASH_SCK = 12,\n    CFG_PIN_LED = 13,\n    CFG_PIN_LIGHT = 14,\n    CFG_PIN_MICROPHONE = 15,\n    CFG_PIN_MIC_CLOCK = 16,\n    CFG_PIN_MIC_DATA = 17,\n    CFG_PIN_MISO = 18,\n    CFG_PIN_MOSI = 19,\n    CFG_PIN_NEOPIXEL = 20,\n    CFG_PIN_RX = 21,\n    CFG_PIN_RXLED = 22,\n    CFG_PIN_SCK = 23,\n    CFG_PIN_SCL = 24,\n    CFG_PIN_SDA = 25,\n    CFG_PIN_SPEAKER_AMP = 26,\n    CFG_PIN_TEMPERATURE = 27,\n    CFG_PIN_TX = 28,\n    CFG_PIN_TXLED = 29,\n    CFG_PIN_IR_OUT = 30,\n    CFG_PIN_IR_IN = 31,\n    CFG_PIN_DISPLAY_SCK = 32,\n    CFG_PIN_DISPLAY_MISO = 33,\n    CFG_PIN_DISPLAY_MOSI = 34,\n    CFG_PIN_DISPLAY_CS = 35,\n    CFG_PIN_DISPLAY_DC = 36,\n    CFG_DISPLAY_WIDTH = 37,\n    CFG_DISPLAY_HEIGHT = 38,\n    CFG_DISPLAY_CFG0 = 39,\n    CFG_DISPLAY_CFG1 = 40,\n    CFG_DISPLAY_CFG2 = 41,\n    CFG_DISPLAY_CFG3 = 42,\n    CFG_PIN_DISPLAY_RST = 43,\n    CFG_PIN_DISPLAY_BL = 44,\n    CFG_PIN_SERVO_1 = 45,\n    CFG_PIN_SERVO_2 = 46,\n    CFG_PIN_BTN_LEFT = 47,\n    CFG_PIN_BTN_RIGHT = 48,\n    CFG_PIN_BTN_UP = 49,\n    CFG_PIN_BTN_DOWN = 50,\n    CFG_PIN_BTN_MENU = 51,\n    CFG_PIN_LED_R = 52,\n    CFG_PIN_LED_G = 53,\n    CFG_PIN_LED_B = 54,\n    CFG_PIN_LED1 = 55,\n    CFG_PIN_LED2 = 56,\n    CFG_PIN_LED3 = 57,\n    CFG_PIN_LED4 = 58,\n    CFG_SPEAKER_VOLUME = 59,\n\n    CFG_PIN_AN = 60,\n    CFG_PIN_RST = 61,\n    CFG_PIN_CS = 62,\n    CFG_PIN_PWM = 63,\n    CFG_PIN_INT = 64,\n\t\n    CFG_PIN_SHIT = 65,\n\tCFG_PIN_P3 = 66,\n    CFG_PIN_P0 = 67, \n    CFG_PIN_P4 = 68,\n    CFG_PIN_P5 = 69,\n    CFG_PIN_P6 = 70,\n    CFG_PIN_P7 = 71,\n    CFG_PIN_P1 = 72,\n\tCFG_PIN_P8 = 73,\n\tCFG_PIN_P9 = 74,\n\tCFG_PIN_P10 = 75,\n\tCFG_PIN_P11 = 76,\n\tCFG_PIN_P12 = 77,\n\tCFG_PIN_P2 = 78,\n\tCFG_PIN_P13 = 79,\n\tCFG_PIN_P14 = 80,\n\tCFG_PIN_P15 = 81,\n\tCFG_PIN_P16 = 82,\n\tCFG_PIN_P19 = 83,\n\tCFG_PIN_P20 = 84,\n\t\n\n    CFG_PIN_A0 = 100,\n    CFG_PIN_A1 = 101,\n    CFG_PIN_A2 = 102,\n    CFG_PIN_A3 = 103,\n    CFG_PIN_A4 = 104,\n    CFG_PIN_A5 = 105,\n    CFG_PIN_A6 = 106,\n    CFG_PIN_A7 = 107,\n    CFG_PIN_A8 = 108,\n    CFG_PIN_A9 = 109,\n    CFG_PIN_A10 = 110,\n    CFG_PIN_A11 = 111,\n    CFG_PIN_A12 = 112,\n    CFG_PIN_A13 = 113,\n    CFG_PIN_A14 = 114,\n    CFG_PIN_A15 = 115,\n    CFG_PIN_D0 = 150,\n    CFG_PIN_D1 = 151,\n    CFG_PIN_D2 = 152,\n    CFG_PIN_D3 = 153,\n    CFG_PIN_D4 = 154,\n    CFG_PIN_D5 = 155,\n    CFG_PIN_D6 = 156,\n    CFG_PIN_D7 = 157,\n    CFG_PIN_D8 = 158,\n    CFG_PIN_D9 = 159,\n    CFG_PIN_D10 = 160,\n    CFG_PIN_D11 = 161,\n    CFG_PIN_D12 = 162,\n    CFG_PIN_D13 = 163,\n    CFG_PIN_D14 = 164,\n    CFG_PIN_D15 = 165,\n    CFG_NUM_NEOPIXELS = 200,\n    CFG_NUM_DOTSTARS = 201,\n    CFG_DEFAULT_BUTTON_MODE = 202,\n    CFG_SWD_ENABLED = 203,\n    CFG_FLASH_BYTES = 204,\n    BUTTON_ACTIVE_HIGH_PULL_DOWN = 17,\n    BUTTON_ACTIVE_HIGH_PULL_UP = 33,\n    BUTTON_ACTIVE_HIGH_PULL_NONE = 49,\n    BUTTON_ACTIVE_LOW_PULL_DOWN = 16,\n    BUTTON_ACTIVE_LOW_PULL_UP = 32,\n    BUTTON_ACTIVE_LOW_PULL_NONE = 48,\n    // built/codal/pxtapp/platform.h\n    PAGE_SIZE = 256,\n    DEV_NUM_PINS = 48,\n    IMAGE_BITS = 1,\n    LCD_WIDTH = 128,\n    LCD_HEIGHT = 64,\n    LIGHTSENSOR_SENSITIVITY = 868,\n    LIGHTSENSOR_LOW_THRESHOLD = 128,\n    LIGHTSENSOR_HIGH_THRESHOLD = 896,\n    PA_0 = 0,\n    PA_1 = 1,\n    PA_2 = 2,\n    PA_3 = 3,\n    PA_4 = 4,\n    PA_5 = 5,\n    PA_6 = 6,\n    PA_7 = 7,\n    PA_8 = 8,\n    PA_9 = 9,\n    PA_10 = 10,\n    PA_11 = 11,\n    PA_12 = 12,\n    PA_13 = 13,\n    PA_14 = 14,\n    PA_15 = 15,\n    PB_0 = 16,\n    PB_1 = 17,\n    PB_2 = 18,\n    PB_3 = 19,\n    PB_4 = 20,\n    PB_5 = 21,\n    PB_6 = 22,\n    PB_7 = 23,\n    PB_8 = 24,\n    PB_9 = 25,\n    PB_10 = 26,\n\tPB_11 = 27,\n    PB_12 = 28,\n    PB_13 = 29,\n    PB_14 = 30,\n    PB_15 = 31,\n    PC_0 = 32,\n    PC_1 = 33,\n    PC_2 = 34,\n    PC_3 = 35,\n    PC_4 = 36,\n    PC_5 = 37,\n    PC_6 = 38,\n    PC_7 = 39,\n    PC_8 = 40,\n    PC_9 = 41,\n    PC_10 = 42,\n    PC_11 = 43,\n    PC_12 = 44,\n    PC_13 = 45,\n    PC_14 = 46,\n    PC_15 = 47,\n    PD_2 = 50,\n    PH_0 = 112,\n    PH_1 = 113,\n\tPH_3 = 114,\n    // built/codal/pxtapp/pxt.h\n    DEVICE_ID_BUTTON_SLIDE = 3000,\n    DEVICE_ID_MICROPHONE = 3001,\n    DEVICE_ID_FIRST_BUTTON = 4000,\n    DEVICE_ID_FIRST_TOUCHBUTTON = 4100,\n    // built/codal/pxtapp/pxtbase.h\n    MEMDBG_ENABLED = 0,\n    PXT_VTABLE_SHIFT = 2,\n    Int8LE = 1,\n    UInt8LE = 2,\n    Int16LE = 3,\n    UInt16LE = 4,\n    Int32LE = 5,\n    Int8BE = 6,\n    UInt8BE = 7,\n    Int16BE = 8,\n    UInt16BE = 9,\n    Int32BE = 10,\n    UInt32LE = 11,\n    UInt32BE = 12,\n    Float32LE = 13,\n    Float64LE = 14,\n    Float32BE = 15,\n    Float64BE = 16,\n    Undefined = 0,\n    Boolean = 1,\n    Number = 2,\n    String = 3,\n    Object = 4,\n    Function = 5,\n    // built/codal/pxtapp/pxtconfig.h\n    PXT_VM = 0,\n    // built/codal/pxtapp/uf2hid.h\n    UF2_HID_H = 1,\n}\n",
      "dmac.cpp": "#include \"dmac.h\"\n\nnamespace pxt {\n\n#ifdef PlatformDMAC\nSINGLETON(WDMAC);\n#endif\n\n}",
      "dmac.h": "#ifndef __DMAC_H\n#define __DMAC_H\n\n#include \"pxt.h\"\n\nnamespace pxt {\n\n#ifdef PlatformDMAC\nclass WDMAC {\n  public:\n    PlatformDMAC dmac;\n\n    WDMAC() {}\n};\n\nWDMAC* getWDMAC();\n#endif\n\n}\n\n#endif",
      "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum PulseValue {\n    //% block=high\n    High = 4,  // DEVICE_PIN_EVT_PULSE_HI\n    //% block=low\n    Low = 5,  // DEVICE_PIN_EVT_PULSE_LO\n    }\n\n\n    declare const enum PinEvent {\n    //% block=\"pulse high\"\n    PulseHigh = 4,  // DEVICE_PIN_EVT_PULSE_HI\n    //% block=\"pulse low\"\n    PulseLow = 5,  // DEVICE_PIN_EVT_PULSE_LO\n    //% block=\"rise\"\n    Rise = 2,  // DEVICE_PIN_EVT_RISE\n    //% block=\"fall\"\n    Fall = 3,  // DEVICE_PIN_EVT_FALL\n    }\n\n\n    declare const enum PinPullMode {\n    //% block=\"down\"\n    PullDown = 0,\n    //% block=\"up\"\n    PullUp = 1,\n    //% block=\"none\"\n    PullNone = 2,\n    }\n\n// Auto-generated. Do not edit. Really.\n",
      "hf2.cpp": "#define UF2_DEFINE_HANDOVER 1\n#include \"pxt.h\"\n\n#if CONFIG_ENABLED(DEVICE_USB)\n#include \"uf2format.h\"\n\nstatic void *stackCopy;\nstatic uint32_t stackSize;\n//#define LOG DMESG\n#define LOG(...) ((void)0)\n\n//#define LOG DMESG\n#define LOG(...) ((void)0)\n\nstatic volatile bool resume = false;\n\nusing namespace codal;\n\nstatic const char hidDescriptor[] = {\n    0x06, 0x97, 0xFF, // usage page vendor 0x97 (usage 0xff97 0x0001)\n    0x09, 0x01,       // usage 1\n    0xA1, 0x01,       // collection - application\n    0x15, 0x00,       // logical min 0\n    0x26, 0xFF, 0x00, // logical max 255\n    0x75, 8,          // report size 8\n    0x95, 64,         // report count 64\n    0x09, 0x01,       // usage 1\n    0x81, 0x02,       // input: data, variable, absolute\n    0x95, 64,         // report count 64\n    0x09, 0x01,       // usage 1\n    0x91, 0x02,       // output: data, variable, absolute\n    0x95, 1,          // report count 1\n    0x09, 0x01,       // usage 1\n    0xB1, 0x02,       // feature: data, variable, absolute\n    0xC0,             // end\n};\n\nstatic const HIDReportDescriptor reportDesc = {\n    9,\n    0x21,                  // HID\n    0x100,                 // hidbcd 1.00\n    0x00,                  // country code\n    0x01,                  // num desc\n    0x22,                  // report desc type\n    sizeof(hidDescriptor), // size of 0x22\n};\n\nstatic const InterfaceInfo ifaceInfo = {\n    &reportDesc,\n    sizeof(reportDesc),\n    1,\n    {\n        2,    // numEndpoints\n        0x03, /// class code - HID\n        0x00, // subclass\n        0x00, // protocol\n        0x00, //\n        0x00, //\n    },\n    {USB_EP_TYPE_INTERRUPT, 1},\n    {USB_EP_TYPE_INTERRUPT, 1},\n};\n\nint HF2::stdRequest(UsbEndpointIn &ctrl, USBSetup &setup)\n{\n    if (setup.bRequest == USB_REQ_GET_DESCRIPTOR)\n    {\n        if (setup.wValueH == 0x21)\n        {\n            InterfaceDescriptor tmp;\n            fillInterfaceInfo(&tmp);\n            return ctrl.write(&tmp, sizeof(tmp));\n        }\n        else if (setup.wValueH == 0x22)\n        {\n            return ctrl.write(hidDescriptor, sizeof(hidDescriptor));\n        }\n    }\n    return DEVICE_NOT_SUPPORTED;\n}\n\nconst InterfaceInfo *HF2::getInterfaceInfo()\n{\n    return &ifaceInfo;\n}\n\nint HF2::sendSerial(const void *data, int size, int isError)\n{\n    if (!gotSomePacket) return DEVICE_OK;\n    return send(data, size, isError ? HF2_FLAG_SERIAL_ERR : HF2_FLAG_SERIAL_OUT);\n}\n\n// Recieve HF2 message\n// Does not block. Will store intermediate data in pkt.\n// `serial` flag is cleared if we got a command message.\nint HF2::recv() {\n    uint8_t buf[64];\n    int len = out->read(buf, sizeof(buf));\n    if (len <= 0)\n        return len;\n\n    uint8_t tag = buf[0];\n    // serial packets not allowed when in middle of command packet\n    usb_assert(pkt.size == 0 || !(tag & HF2_FLAG_SERIAL_OUT));\n    int size = tag & HF2_SIZE_MASK;\n    usb_assert(pkt.size + size <= (int)sizeof(pkt.buf));\n    memcpy(pkt.buf + pkt.size, buf + 1, size);\n    pkt.size += size;\n    tag &= HF2_FLAG_MASK;\n    if (tag != HF2_FLAG_CMDPKT_BODY) {\n        if (tag == HF2_FLAG_CMDPKT_LAST)\n            pkt.serial = 0;\n        else if (tag == HF2_FLAG_SERIAL_OUT)\n            pkt.serial = 1;\n        else\n            pkt.serial = 2;\n        int sz = pkt.size;\n        pkt.size = 0;\n        return sz;\n    }\n    return 0;\n}\n\n// Send HF2 message.\n// Use command message when flag == HF2_FLAG_CMDPKT_LAST\n// Use serial stdout for HF2_FLAG_SERIAL_OUT and stderr for HF2_FLAG_SERIAL_ERR.\nint HF2::send(const void *data, int size, int flag0) {\n    uint8_t buf[64];\n    const uint8_t *ptr = (const uint8_t *)data;\n\n    if (!CodalUSB::usbInstance->isInitialised())\n        return -1;\n\n    for (;;) {\n        int s = 63;\n        int flag = flag0;\n        if (size <= 63) {\n            s = size;\n        } else {\n            if (flag == HF2_FLAG_CMDPKT_LAST)\n                flag = HF2_FLAG_CMDPKT_BODY;\n        }\n        buf[0] = flag | s;\n        memcpy(buf + 1, ptr, s);\n        if (in->write(buf, sizeof(buf)) < 0)\n            return -1;\n        ptr += s;\n        size -= s;\n        if (!size)\n            break;\n    }\n    return 0;\n}\n\nint HF2::sendResponse(int size) {\n    return send(pkt.buf, 4 + size, HF2_FLAG_CMDPKT_LAST);\n}\n\nint HF2::sendResponseWithData(const void *data, int size) {\n    int res;\n\n    if (size <= (int)sizeof(pkt.buf) - 4) {\n        __disable_irq();\n        memcpy(pkt.resp.data8, data, size);\n        __enable_irq();\n        res = sendResponse(size);\n    } else {\n        __disable_irq();\n        send(pkt.buf, 4, HF2_FLAG_CMDPKT_BODY);\n        res = send(data, size, HF2_FLAG_CMDPKT_LAST);\n        __enable_irq();\n    }\n\n    return res;\n}\n\nstatic void copy_words(void *dst0, const void *src0, uint32_t n_words) {\n    uint32_t *dst = (uint32_t *)dst0;\n    const uint32_t *src = (const uint32_t *)src0;\n    while (n_words--)\n        *dst++ = *src++;\n}\n\n#define DBL_TAP_PTR ((volatile uint32_t *)(HMCRAMC0_ADDR + HMCRAMC0_SIZE - 4))\n#define DBL_TAP_MAGIC_QUICK_BOOT 0xf02669ef\n\nint HF2::endpointRequest()\n{\n    int sz = recv();\n\n    if (!sz)\n        return 0;\n\n    uint32_t tmp;\n\n    if (pkt.serial) {\n        // TODO raise some event?\n        return 0;\n    }\n\n    LOG(\"HF2 sz=%d CMD=%x\", sz, pkt.buf32[0]);\n\n    // one has to be careful dealing with these, as they share memory\n    HF2_Command *cmd = &pkt.cmd;\n    HF2_Response *resp = &pkt.resp;\n\n    uint32_t cmdId = cmd->command_id;\n    resp->tag = cmd->tag;\n    resp->status16 = HF2_STATUS_OK;\n\n#define checkDataSize(str, add) usb_assert(sz == 8 + (int)sizeof(cmd->str) + (int)(add))\n\n    gotSomePacket = true;\n\n    switch (cmdId) {\n    case HF2_CMD_INFO:\n        return sendResponseWithData(uf2_info(), strlen(uf2_info()));\n\n    case HF2_CMD_BININFO:\n        resp->bininfo.mode = HF2_MODE_USERSPACE;\n        resp->bininfo.flash_page_size = 0;\n        resp->bininfo.flash_num_pages = 0;\n        resp->bininfo.max_message_size = sizeof(pkt.buf);\n        return sendResponse(sizeof(resp->bininfo));\n\n    case HF2_DBG_RESTART:\n        *HF2_DBG_MAGIC_PTR = HF2_DBG_MAGIC_START;\n        target_reset();\n        break;\n\n    case HF2_CMD_RESET_INTO_APP:\n        *DBL_TAP_PTR = DBL_TAP_MAGIC_QUICK_BOOT;\n        // fall-through\n    case HF2_CMD_RESET_INTO_BOOTLOADER:\n        target_reset();\n        break;\n\n    case HF2_CMD_START_FLASH:\n        sendResponse(0);\n        hf2_handover(in->ep);\n        usb_assert(0); // should not be reached\n        break;\n\n    case HF2_CMD_WRITE_WORDS:\n        checkDataSize(write_words, cmd->write_words.num_words << 2);\n        copy_words((void *)cmd->write_words.target_addr, cmd->write_words.words,\n                   cmd->write_words.num_words);\n        break;\n\n    case HF2_CMD_READ_WORDS:\n        checkDataSize(read_words, 0);\n        tmp = cmd->read_words.num_words;\n        usb_assert(tmp <= sizeof(pkt.buf) / 4 - 1);\n        copy_words(resp->data32, (void *)cmd->read_words.target_addr, tmp);\n        return sendResponse(tmp << 2);\n\n    case HF2_CMD_DMESG:\n#if DEVICE_DMESG_BUFFER_SIZE > 0\n        return sendResponseWithData(codalLogStore.buffer, codalLogStore.ptr);\n#else\n        break;\n#endif\n\n    case HF2_DBG_GET_GLOBAL_STATE: {\n        HF2_GLOBAL_STATE_Result gstate = {\n            .num_globals = (uint32_t)getNumGlobals(), //\n            .globals_addr = (uint32_t)globals,\n        };\n        return sendResponseWithData(&gstate, sizeof(gstate));\n    }\n\n    case HF2_DBG_RESUME:\n        globals[0] = (TValue)cmd->data32[0];\n        resume = true;\n        return sendResponse(0);\n\n    case HF2_DBG_GET_STACK:\n        return sendResponseWithData(stackCopy, stackSize);\n\n    default:\n        // command not understood\n        resp->status16 = HF2_STATUS_INVALID_CMD;\n        break;\n    }\n\n    return sendResponse(0);\n}\n\nHF2::HF2(HF2_Buffer &p) : USBHID(), pkt(p), gotSomePacket(false) {}\n\n//\n//\n// WebUSB\n//\n//\n\nWebHF2::WebHF2(HF2_Buffer &p) : HF2(p) {}\n\nstatic const InterfaceInfo ifaceInfoWeb = {\n    NULL,\n    0,\n    1,\n    {\n        2,    // numEndpoints\n        0xff, /// class code - HID\n        42, // subclass\n        0x01, // protocol\n        0x00, //\n        0x00, //\n    },\n    {USB_EP_TYPE_INTERRUPT, 1},\n    {USB_EP_TYPE_INTERRUPT, 1},\n};\n\nconst InterfaceInfo *WebHF2::getInterfaceInfo()\n{\n    return &ifaceInfoWeb;\n}\n\n//\n//\n// Debugger\n//\n//\n\nstruct ExceptionContext {\n    uint32_t excReturn; // 0xFFFFFFF9\n    uint32_t r0;\n    uint32_t r1;\n    uint32_t r2;\n    uint32_t r3;\n    uint32_t r12;\n    uint32_t lr;\n    uint32_t faultInstrAddr;\n    uint32_t psr;\n};\n\nstruct Paused_Data {\n    uint32_t pc;\n};\nstatic Paused_Data pausedData;\n\nvoid bkptPaused() {\n    \n// waiting for https://github.com/lancaster-university/codal/pull/14\n#ifdef DEVICE_GROUP_ID_USER\n    // the loop below counts as \"system\" task, and we don't want to pause ourselves\n    fiber_set_group(DEVICE_GROUP_ID_SYSTEM);\n    // pause everyone else\n    fiber_pause_group(DEVICE_GROUP_ID_USER);\n#endif\n\n    while (!resume) {\n        // DMESG(\"BKPT\");\n        hf2.pkt.resp.eventId = HF2_EV_DBG_PAUSED;\n        hf2.sendResponseWithData(&pausedData, sizeof(pausedData));\n        webhf2.pkt.resp.eventId = HF2_EV_DBG_PAUSED;\n        webhf2.sendResponseWithData(&pausedData, sizeof(pausedData));\n        // TODO use an event\n        for (int i = 0; i < 20; ++i) {\n            if (resume)\n                break;\n            fiber_sleep(50);\n        }\n    }\n\n    if (stackCopy) {\n        free(stackCopy);\n        stackCopy = NULL;\n    }\n\n#ifdef DEVICE_GROUP_ID_USER\n    fiber_resume_group(DEVICE_GROUP_ID_USER);\n    // go back to user mode\n    fiber_set_group(DEVICE_GROUP_ID_USER);\n#endif\n\n    resume = false;\n}\n\nextern \"C\" void handleHardFault(ExceptionContext *ectx) {\n    auto instr = (uint16_t *)ectx->faultInstrAddr;\n\n    DMESG(\"FLT %p\", instr);\n\n    if (ectx->faultInstrAddr & 0x80000000) {\n        ectx->faultInstrAddr &= ~0x80000000;\n        // switch to step-over mode\n        globals[0] = (TValue)3;\n        return;\n    }\n\n    DMESG(\"BB %p %p %p lr=%p r0=%p\", instr[-1], instr[0], instr[1], ectx->lr, ectx->r0);\n\n    if (instr[0] == 0x6840) {\n        // ldr r0, [r0, #4] -- entry breakpoint\n        ectx->faultInstrAddr += 2;\n        // we're being ask for step-over mode\n        if (ectx->r0 == 3) {\n            // switch to debugger-attached-no-stepping mode\n            globals[0] = (TValue)0;\n            ectx->lr |= 0x80000000;\n        }\n        return;\n    }\n\n    if (instr[0] == 0x6800) {\n        // ldr r0, [r0, #0]\n        ectx->lr = ectx->faultInstrAddr + 3; // next instruction + thumb mode\n        pausedData.pc = ectx->faultInstrAddr + 2;\n        void *ssp = (void *)(ectx + 1);\n        stackSize = DEVICE_STACK_BASE - (uint32_t)ssp;\n        if (stackCopy)\n            free(stackCopy);\n        stackCopy = malloc(stackSize);\n        memcpy(stackCopy, ssp, stackSize);\n        ectx->faultInstrAddr = ((uint32_t)(&bkptPaused) & (~1U));\n        return;\n    }\n\n    while (1) {\n    }\n}\n\nextern \"C\" void HardFault_Handler(void) {\n    asm(\"push {lr}; mov r0, sp; bl handleHardFault; pop {pc}\");\n}\n\n#endif",
      "hf2.h": "#ifndef DEVICE_HF2_H\n#define DEVICE_HF2_H\n\n#if CONFIG_ENABLED(DEVICE_USB)\n\n#include \"HID.h\"\n#include \"uf2hid.h\"\n\n#define HF2_BUF_SIZE 256\n\ntypedef struct\n{\n    uint16_t size;\n    uint8_t serial;\n    union {\n        uint8_t buf[HF2_BUF_SIZE];\n        uint32_t buf32[HF2_BUF_SIZE / 4];\n        uint16_t buf16[HF2_BUF_SIZE / 2];\n        HF2_Command cmd;\n        HF2_Response resp;\n    };\n} HF2_Buffer;\n\nclass HF2 : public codal::USBHID\n{\npublic:\n    HF2_Buffer &pkt;\n    bool gotSomePacket;\n\n    int sendResponse(int size);\n    int send(const void *data, int size, int flag);\n    int recv();\n    int sendResponseWithData(const void *data, int size);\n\n    HF2(HF2_Buffer &pkt);\n    virtual int endpointRequest();\n    virtual int stdRequest(UsbEndpointIn &ctrl, USBSetup& setup);\n    virtual const InterfaceInfo *getInterfaceInfo();\n    int sendSerial(const void *data, int size, int isError = 0);\n};\n\nclass WebHF2 : public HF2\n{\npublic:\n    WebHF2(HF2_Buffer &pkt);\n    virtual const InterfaceInfo *getInterfaceInfo();\n    virtual bool enableWebUSB() { return true; }\n};\n\n#endif\n\n#endif\n",
      "hf2dbg.h": "#ifndef HF2DBG_H\n#define HF2DBG_H 1\n\n// we use a location at the top of the stack to store a magic value\n// which causes us to stop at the very first break point in the program\n#define HF2_DBG_MAGIC_PTR ((uint32_t *)(DEVICE_STACK_BASE - (DEVICE_STACK_SIZE - 4)))\n#define HF2_DBG_MAGIC_START 0xf0ebac7f\n\n#define HF2_DBG_GET_GLOBAL_STATE 0x53fc66e0\nstruct HF2_GLOBAL_STATE_Result {\n    uint32_t num_globals;\n    uint32_t globals_addr;\n};\n\n#define HF2_DBG_RESTART 0x1120bd93\n#define HF2_DBG_RESUME 0x27a55931\n#define HF2_EV_DBG_PAUSED 0x3692f9fd\n#define HF2_DBG_GET_STACK 0x70901510\n\n#endif\n",
      "i2c.cpp": "#include \"pxt.h\"\n#include \"ErrorNo.h\"\n\nnamespace pins {\n    static codal::I2C *i2c;\n\n    static void initI2C() {\n      if (NULL == i2c) {\n        i2c = new CODAL_I2C(*LOOKUP_PIN(SDA), *LOOKUP_PIN(SCL));\n      }\n    }\n\n      /**\n     * Read `size` bytes from a 7-bit I2C `address`.\n     */\n    //%\n    Buffer i2cReadBuffer(int address, int size, bool repeat = false)\n    {\n      initI2C();\n      Buffer buf = createBuffer(size);\n      int status = i2c->read(address << 1, buf->data, size, repeat);\n      if (status != ErrorCode::DEVICE_OK) {\n        free(buf);\n        buf = 0;\n      }\n      return buf;\n    }\n\n    /**\n     * Write bytes to a 7-bit I2C `address`.\n     */\n    //%\n    int i2cWriteBuffer(int address, Buffer buf, bool repeat = false)\n    {\n      initI2C();\n      return i2c->write(address << 1, buf->data, buf->length, repeat);\n    }\n}",
      "i2c.ts": "namespace pins {\n    /**\n     * Read one number from an I2C address.\n     */\n    //% help=pins/i2c-read-number weight=5 group=\"i2c\" inlineInputMode=\"external\"\n    //% blockId=pins_i2c_readnumber block=\"i2c read number at address %address|of format %format|repeated %repeated\"\n    export function i2cReadNumber(address: number, format: NumberFormat, repeated?: boolean): number {\n        let buf = pins.i2cReadBuffer(address, pins.sizeOf(format), repeated)\n        return buf.getNumber(format, 0)\n    }\n\n    /**\n     * Write one number to an I2C address.\n     */\n    //% help=pins/i2c-write-number weight=4 group=\"i2c\"\n    //% blockId=i2c_writenumber block=\"i2c write number|at address %address|with value %value|of format %format|repeated %repeated\"\n    export function i2cWriteNumber(address: number, value: number, format: NumberFormat, repeated?: boolean): void {\n        let buf = createBuffer(pins.sizeOf(format))\n        buf.setNumber(format, 0, value)\n        pins.i2cWriteBuffer(address, buf, repeated)\n    }\n\n    export class I2CDevice {\n        public address: number;\n        private _hasError: boolean;\n        constructor(address: number) {\n            this.address = address\n        }\n        public readInto(buf: Buffer, repeat = false, start = 0, end: number = null) {\n            if (end === null)\n                end = buf.length\n            if (start >= end)\n                return\n            let res = i2cReadBuffer(this.address, end - start, repeat)\n            if (!res) {\n                this._hasError = true\n                return\n            }\n            buf.write(start, res)\n        }\n        public write(buf: Buffer, repeat = false) {\n            let res = i2cWriteBuffer(this.address, buf, repeat)\n            if (res) {\n                this._hasError = true\n            }\n        }\n        public begin(): I2CDevice {\n            this._hasError = false;\n            return this;\n        }\n        public end() {\n        }\n        public ok() {\n            return !this._hasError\n        }\n    }\n}",
      "ns.ts": "/**\n * Servos\n */\n//% color=\"#03AA74\" weight=88 icon=\"\\uf021\"\nnamespace servos {\n\n}",
      "pins.cpp": "#include \"pxt.h\"\n\nnamespace pxt {\n    static DevicePin **pinPtrs;\n    static uint8_t numPinPtrs;\n    static uint8_t pinPos[DEV_NUM_PINS];\n\n//%\nDevicePin *getPin(int id) {\n    if (id < 0 || id >= DEV_NUM_PINS)\n        target_panic(42);\n\n    // we could use lookupComponent() here - it would be slightly slower\n\n    int ptr = pinPos[id];\n    if (ptr == 0) {\n        pinPtrs = (DevicePin **)realloc(pinPtrs, (numPinPtrs + 1) * sizeof(void*));\n        bool isAnalog = IS_ANALOG_PIN(id);\n        pinPtrs[numPinPtrs++] = new DevicePin(\n            DEVICE_ID_IO_P0 + id,\n            (PinName)id,\n            isAnalog ? PIN_CAPABILITY_AD : PIN_CAPABILITY_DIGITAL);\n        ptr = numPinPtrs;\n        pinPos[id] = ptr;\n    }\n    return pinPtrs[ptr - 1];\n}\n\n//%\nDevicePin *getPinCfg(int key) {\n    return getPin(getConfig(key));;\n}\n\nvoid linkPin(int from, int to) {\n    if (from < 0 || from >= DEV_NUM_PINS)\n        target_panic(42);\n    getPin(to);\n    pinPos[from] = pinPos[to];\n}\n\n//%\nDevicePin *lookupPin(int pinName) {\n    if (pinName < 0) return NULL;\n    return getPin(pinName);\n}\n\nCodalComponent *lookupComponent(int id) {\n    for (int i = 0; i < DEVICE_COMPONENT_COUNT; ++i) {\n        if (CodalComponent::components[i] && CodalComponent::components[i]->id == id)\n            return CodalComponent::components[i];\n    }\n    return NULL;\n}\n\n}\n\nnamespace pins {\n/**\n * Create a new zero-initialized buffer.\n * @param size number of bytes in the buffer\n */\n//%\nBuffer createBuffer(int size) {\n    return mkBuffer(NULL, size);\n}\n\n/**\n* Get the duration of the last pulse in microseconds. This function should be called from a\n* ``onPulsed`` handler.\n*/\n//% help=pins/pulse-duration blockGap=8\n//% blockId=pins_pulse_duration block=\"pulse duration (µs)\"\n//% weight=19\nint pulseDuration() {\n    return pxt::lastEvent.timestamp;\n}\n}\n",
      "pins.h": "#ifndef __PXT_PINS_H\n#define __PXT_PINS_H\n\n// these define keys for getConfig() function\n#define CFG_PIN_ACCELEROMETER_INT 1\n#define CFG_PIN_ACCELEROMETER_SCL 2\n#define CFG_PIN_ACCELEROMETER_SDA 3\n#define CFG_PIN_BTN_A 4\n#define CFG_PIN_BTN_B 5\n#define CFG_PIN_BTN_SLIDE 6\n#define CFG_PIN_DOTSTAR_CLOCK 7\n#define CFG_PIN_DOTSTAR_DATA 8\n#define CFG_PIN_FLASH_CS 9\n#define CFG_PIN_FLASH_MISO 10\n#define CFG_PIN_FLASH_MOSI 11\n#define CFG_PIN_FLASH_SCK 12\n#define CFG_PIN_LED 13\n#define CFG_PIN_LIGHT 14\n#define CFG_PIN_MICROPHONE 15\n#define CFG_PIN_MIC_CLOCK 16\n#define CFG_PIN_MIC_DATA 17\n#define CFG_PIN_MISO 18\n#define CFG_PIN_MOSI 19\n#define CFG_PIN_NEOPIXEL 20\n#define CFG_PIN_RX 21\n#define CFG_PIN_RXLED 22\n#define CFG_PIN_SCK 23\n#define CFG_PIN_SCL 24\n#define CFG_PIN_SDA 25\n#define CFG_PIN_SPEAKER_AMP 26\n#define CFG_PIN_TEMPERATURE 27\n#define CFG_PIN_TX 28\n#define CFG_PIN_TXLED 29\n#define CFG_PIN_IR_OUT 30\n#define CFG_PIN_IR_IN 31\n#define CFG_PIN_DISPLAY_SCK 32\n#define CFG_PIN_DISPLAY_MISO 33\n#define CFG_PIN_DISPLAY_MOSI 34\n#define CFG_PIN_DISPLAY_CS 35\n#define CFG_PIN_DISPLAY_DC 36\n#define CFG_DISPLAY_WIDTH 37\n#define CFG_DISPLAY_HEIGHT 38\n#define CFG_DISPLAY_CFG0 39\n#define CFG_DISPLAY_CFG1 40\n#define CFG_DISPLAY_CFG2 41\n#define CFG_DISPLAY_CFG3 42\n#define CFG_PIN_DISPLAY_RST 43\n#define CFG_PIN_DISPLAY_BL 44\n#define CFG_PIN_SERVO_1 45\n#define CFG_PIN_SERVO_2 46\n#define CFG_PIN_BTN_LEFT 47\n#define CFG_PIN_BTN_RIGHT 48\n#define CFG_PIN_BTN_UP 49\n#define CFG_PIN_BTN_DOWN 50\n#define CFG_PIN_BTN_MENU 51\n#define CFG_PIN_LED_R 52\n#define CFG_PIN_LED_G 53\n#define CFG_PIN_LED_B 54\n#define CFG_PIN_LED1 55\n#define CFG_PIN_LED2 56\n#define CFG_PIN_LED3 57\n#define CFG_PIN_LED4 58\n#define CFG_SPEAKER_VOLUME 59\n\n#define CFG_PIN_A0 100\n#define CFG_PIN_A1 101\n#define CFG_PIN_A2 102\n#define CFG_PIN_A3 103\n#define CFG_PIN_A4 104\n#define CFG_PIN_A5 105\n#define CFG_PIN_A6 106\n#define CFG_PIN_A7 107\n#define CFG_PIN_A8 108\n#define CFG_PIN_A9 109\n#define CFG_PIN_A10 110\n#define CFG_PIN_A11 111\n#define CFG_PIN_A12 112\n#define CFG_PIN_A13 113\n#define CFG_PIN_A14 114\n#define CFG_PIN_A15 115\n\n#define CFG_PIN_D0 150\n#define CFG_PIN_D1 151\n#define CFG_PIN_D2 152\n#define CFG_PIN_D3 153\n#define CFG_PIN_D4 154\n#define CFG_PIN_D5 155\n#define CFG_PIN_D6 156\n#define CFG_PIN_D7 157\n#define CFG_PIN_D8 158\n#define CFG_PIN_D9 159\n#define CFG_PIN_D10 160\n#define CFG_PIN_D11 161\n#define CFG_PIN_D12 162\n#define CFG_PIN_D13 163\n#define CFG_PIN_D14 164\n#define CFG_PIN_D15 165\n\n#define CFG_NUM_NEOPIXELS 200\n#define CFG_NUM_DOTSTARS 201\n#define CFG_DEFAULT_BUTTON_MODE 202\n#define CFG_SWD_ENABLED 203\n#define CFG_FLASH_BYTES 204\n\n#define BUTTON_ACTIVE_HIGH_PULL_DOWN (ACTIVE_HIGH | 0x10)\n#define BUTTON_ACTIVE_HIGH_PULL_UP (ACTIVE_HIGH | 0x20)\n#define BUTTON_ACTIVE_HIGH_PULL_NONE (ACTIVE_HIGH | 0x30)\n#define BUTTON_ACTIVE_LOW_PULL_DOWN (ACTIVE_LOW | 0x10)\n#define BUTTON_ACTIVE_LOW_PULL_UP (ACTIVE_LOW | 0x20)\n#define BUTTON_ACTIVE_LOW_PULL_NONE (ACTIVE_LOW | 0x30)\n\n#define PIN(name) ((PinName)pxt::getConfig(CFG_PIN_##name, -1))\n#define LOOKUP_PIN(name) pxt::lookupPin(PIN(name))\n\n// these can be overridden in platform.h\n#ifndef CODAL_PIN\n#define CODAL_PIN CODAL_MBED::Pin\n#endif\n\n#ifndef CODAL_TIMER\n#define CODAL_TIMER CODAL_MBED::Timer\n#endif\n\n#ifndef CODAL_SPI\n#define CODAL_SPI CODAL_MBED::SPI\n#endif\n\n#ifndef CODAL_I2C\n#define CODAL_I2C CODAL_MBED::I2C\n#endif\n\n#ifndef CODAL_SERIAL\n#define CODAL_SERIAL CODAL_MBED::Serial\n#endif\n\n#ifndef IS_ANALOG_PIN\n#define IS_ANALOG_PIN(id) ((DEV_ANALOG_PINS >> (id)) & 1)\n#endif\n\ntypedef CODAL_PIN DevicePin;\n\ntypedef DevicePin *DigitalInOutPin;\ntypedef DevicePin *AnalogInOutPin;\ntypedef DevicePin *AnalogInPin;\ntypedef DevicePin *AnalogOutPin;\ntypedef DevicePin *PwmPin;\ntypedef DevicePin *PwmOnlyPin;\ntypedef Button *Button_;\n\nnamespace pxt {\nDevicePin *getPin(int id);\nDevicePin *getPinCfg(int key);\nDevicePin *lookupPin(int pinName);\nvoid linkPin(int from, int to);\nButton *getButtonByPin(int pin, int flags);\nAbstractButton *getButton(int id);\nMultiButton *getMultiButton(int id, int pinA, int pinB, int flags);\nCodalComponent *lookupComponent(int id);\n}\n\n#define PINOP(op) name->op\n\n#endif\n",
      "pins.ts": "//% noRefCounting fixedInstances\ninterface DigitalInOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface AnalogInPin extends DigitalInOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface AnalogOutPin extends DigitalInOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface AnalogInOutPin extends AnalogInPin, AnalogOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface PwmOnlyPin extends DigitalInOutPin, AnalogOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface PwmPin extends PwmOnlyPin, AnalogInOutPin {\n}\n",
      "pinsAnalog.cpp": "#include \"pxt.h\"\n\nnamespace AnalogInPinMethods {\n\n/**\n * Read the connector value as analog, that is, as a value comprised between 0 and 1023.\n * @param name pin to write to\n */\n//% help=pins/analog-read weight=53\n//% blockId=device_get_analog_pin block=\"analog read|pin %name\" blockGap=\"8\"\n//% blockNamespace=pins\n//% parts=\"photocell\" trackArgs=0\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nint analogRead(AnalogInPin name) {\n    return PINOP(getAnalogValue());\n}\n}\n\nnamespace AnalogOutPinMethods {\nvoid analogWrite(AnalogOutPin name, int value) __attribute__ ((weak));\n\n/**\n * Set the connector value as analog. Value must be comprised between 0 and 1023.\n * @param name pin name to write to\n * @param value value to write to the pin between ``0`` and ``1023``. eg:1023,0\n */\n//% help=pins/analog-write weight=52\n//% blockId=device_set_analog_pin block=\"analog write|pin %name|to %value\" blockGap=8\n//% blockNamespace=pins\n//% parts=\"analogled\" trackArgs=0\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\n//% value.min=0 value.max=1023\nvoid analogWrite(AnalogOutPin name, int value) {\n    PINOP(setAnalogValue(value));\n}\n}",
      "pinsDigital.cpp": "#include \"pxt.h\"\n\nenum class PulseValue {\n    //% block=high\n    High = DEVICE_PIN_EVT_PULSE_HI,\n    //% block=low\n    Low = DEVICE_PIN_EVT_PULSE_LO\n};\n\nenum class PinEvent {\n    //% block=\"pulse high\"\n    PulseHigh = DEVICE_PIN_EVT_PULSE_HI,\n    //% block=\"pulse low\"\n    PulseLow = DEVICE_PIN_EVT_PULSE_LO,\n    //% block=\"rise\"\n    Rise = DEVICE_PIN_EVT_RISE,\n    //% block=\"fall\"\n    Fall = DEVICE_PIN_EVT_FALL,\n};\n\nenum class PinPullMode {\n    //% block=\"down\"\n    PullDown = 0,\n    //% block=\"up\"\n    PullUp = 1,\n    //% block=\"none\"\n    PullNone = 2\n};\n\nnamespace DigitalInOutPinMethods {\n/**\n * Read a pin or connector as either 0 or 1\n * @param name pin to read from\n */\n//% help=pins/digital-read weight=61\n//% blockId=device_get_digital_pin block=\"digital read|pin %name\" blockGap=8\n//% parts=\"slideswitch\" trackArgs=0\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nbool digitalRead(DigitalInOutPin name) {\n    return PINOP(getDigitalValue()) != 0;\n}\n\n/**\n     * Set a pin or connector value to either 0 or 1.\n    * @param name pin to write to\n    * @param value value to set on the pin\n    */\n//% help=pins/digital-write weight=60\n//% blockId=device_set_digital_pin block=\"digital write|pin %name|to %value=toggleHighLow\"\n//% parts=\"led\" trackArgs=0\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nvoid digitalWrite(DigitalInOutPin name, bool value) {\n    PINOP(setDigitalValue(value));\n}\n\n/**\n* Make this pin a digital input, and create events where the timestamp is the duration\n* that this pin was either ``high`` or ``low``.\n*/\n//% help=pins/on-pulsed weight=16 blockGap=8\n//% blockId=pins_on_pulsed block=\"on|pin %pin|pulsed %pulse\"\n//% blockNamespace=pins\n//% pin.fieldEditor=\"gridpicker\"\n//% pin.fieldOptions.width=220\n//% pin.fieldOptions.columns=4\n//% parts=\"slideswitch\" trackArgs=0\n//% deprecated=1 hidden=1\nvoid onPulsed(DigitalInOutPin pin, PulseValue pulse, Action body) {\n    pin->eventOn(DEVICE_PIN_EVENT_ON_PULSE);\n    registerWithDal(pin->id, (int)pulse, body);\n}\n\n/**\n* Register code to run when a pin event occurs. \n*/\n//% help=pins/on-event weight=20 blockGap=8\n//% blockId=pinsonevent block=\"on|pin %pin|%event\"\n//% blockNamespace=pins\n//% pin.fieldEditor=\"gridpicker\"\n//% pin.fieldOptions.width=220\n//% pin.fieldOptions.columns=4\n//% parts=\"slideswitch\" trackArgs=0\nvoid onEvent(DigitalInOutPin pin, PinEvent event, Action body) {\n    switch(event) {\n        case PinEvent::PulseHigh:\n        case PinEvent::PulseLow:\n            pin->eventOn(DEVICE_PIN_EVENT_ON_PULSE);\n            registerWithDal(pin->id, (int)event, body);\n            break;\n        case PinEvent::Rise:\n        case PinEvent::Fall:\n            pin->eventOn(DEVICE_PIN_EVENT_ON_EDGE);\n            registerWithDal(pin->id, (int)event, body);\n            break;    \n    }    \n}\n\n/**\n* Return the duration of a pulse in microseconds\n* @param name the pin which measures the pulse\n* @param value the value of the pulse (default high)\n* @param maximum duration in micro-seconds\n*/\n//% blockId=\"pins_pulse_in\" block=\"pulse in (µs)|pin %name|pulsed %high||timeout %maxDuration (us)\"\n//% weight=18 blockGap=8\n//% help=\"pins/pulse-in\"\n//% blockNamespace=pins\n//% pin.fieldEditor=\"gridpicker\"\n//% pin.fieldOptions.width=220\n//% pin.fieldOptions.columns=4\nint pulseIn(DigitalInOutPin pin, PulseValue value, int maxDuration = 2000000) {\n    int pulse = PulseValue::High == value ? 1 : 0;\n    uint64_t tick = system_timer_current_time_us();\n    uint64_t maxd = (uint64_t)maxDuration;\n    while (pin->getDigitalValue() != pulse) {\n        if (system_timer_current_time_us() - tick > maxd)\n            return 0;\n    }\n\n    uint64_t start = system_timer_current_time_us();\n    while (pin->getDigitalValue() == pulse) {\n        if (system_timer_current_time_us() - tick > maxd)\n            return 0;\n    }\n    uint64_t end = system_timer_current_time_us();\n    return end - start;\n}\n\n/**\n* Set the pull direction of this pin.\n* @param name pin to set the pull mode on\n* @param pull one of the mbed pull configurations: PullUp, PullDown, PullNone\n*/\n//% help=pins/set-pull weight=17 blockGap=8\n//% blockId=device_set_pull block=\"set pull|pin %pin|to %pull\"\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nvoid setPull(DigitalInOutPin name, PinPullMode pull) {\n    PullMode m = pull == PinPullMode::PullDown ? PullMode::Down : pull == PinPullMode::PullUp\n                                                                        ? PullMode::Up\n                                                                        : PullMode::None;\n    PINOP(setPull(m));\n}\n\n}",
      "pinsPWM.cpp": "#include \"pxt.h\"\n\nnamespace PwmPinMethods {\n}\n\nnamespace PwmOnlyPinMethods {\n\n/**\n * Set the Pulse-width modulation (PWM) period of the analog output. The period is in\n * **microseconds** or `1/1000` milliseconds.\n * If this pin is not configured as an analog output (using `analog write pin`), the operation has\n * no effect.\n * @param name analog pin to set period to\n * @param micros period in micro seconds. eg:20000\n */\n//% help=pins/analog-set-period weight=51\n//% blockId=device_set_analog_period block=\"analog set period|pin %pin|to (µs)%period\"\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nvoid analogSetPeriod(PwmOnlyPin name, int period) {\n    PINOP(setAnalogPeriodUs(period));\n}\n\n/**\n * Write a value to the servo to control the rotation of the shaft. On a standard servo, this will\n * set the angle of the shaft (in degrees), moving the shaft to that orientation. On a continuous\n * rotation servo, this will set the speed of the servo (with ``0`` being full-speed in one\n * direction, ``180`` being full speed in the other, and a value near ``90`` being no movement).\n * @param name pin to write to\n * @param value angle or rotation speed\n */\n//% help=pins/servo-write weight=41 group=\"Servo\"\n//% blockId=device_set_servo_pin block=\"servo write|pin %name|to %value=protractorPicker\" blockGap=8\n//% parts=microservo trackArgs=0\n//% blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\n//% value.defl=90\nvoid servoWrite(PwmOnlyPin name, int value) {\n    PINOP(setServoValue(value));\n}\n\n/**\n * Set the pin for PWM analog output, make the period be 20 ms, and set the pulse width.\n * The pulse width is based on the value it is given **microseconds** or `1/1000` milliseconds.\n * @param name pin name\n * @param duration pulse duration in micro seconds, eg:1500\n */\n//% help=pins/servo-set-pulse weight=40 group=\"Servo\" blockGap=8\n//% blockId=device_set_servo_pulse block=\"servo set pulse|pin %value|to (µs) %duration\"\n//% parts=microservo blockNamespace=pins\n//% name.fieldEditor=\"gridpicker\"\n//% name.fieldOptions.width=220\n//% name.fieldOptions.columns=4\nvoid servoSetPulse(PwmOnlyPin name, int duration) {\n    PINOP(setServoPulseUs(duration));\n}\n\n}",
      "pinscompat.ts": "// this type alias is required for backward compatibility\n// it gets overriden in microbit (DigitalPin is an enum over there)\ntype DigitalPin = DigitalInOutPin;\ntype AnalogPin = AnalogInOutPin;",
      "platform.cpp": "#include \"pxt.h\"\n\nnamespace pxt {\n\nstatic bool initIsPulse = false;\nstatic bool isPulse = false;\nstatic void initRandomSeed() {\n    int seed = 0xC0DA1;\n    /*\n    auto pinTemp = LOOKUP_PIN(TEMPERATURE);\n    if (pinTemp)\n        seed *= pinTemp->getAnalogValue();\n    auto pinLight = LOOKUP_PIN(LIGHT);\n    if (pinLight)\n        seed *= pinLight->getAnalogValue();\n    */\n    seedRandom(seed);\n}\n\nvoid platform_init() {\n    initRandomSeed();\n\n/*\n    if (*HF2_DBG_MAGIC_PTR == HF2_DBG_MAGIC_START) {\n        *HF2_DBG_MAGIC_PTR = 0;\n        // this will cause alignment fault at the first breakpoint\n        globals[0] = (TValue)1;\n    }\n*/\n\n}\n\n\nbool IsPulse() {\n\tif (!initIsPulse) {\t\t\n\t\tauto pin = lookupPin(PB_15);\n\n\t\tpin->setPull(PullMode::Down);\t\n\n\t\tisPulse = pin->getDigitalValue();\n\n\t\tinitIsPulse = true;\t\t\n\t}\n\t\n\treturn isPulse;\n}\n\n\n}\n\nvoid cpu_clock_init() {\n    // missing in Codal\n}\n",
      "platform.h": "#ifndef __PXT_PLATFORM_H\n#define __PXT_PLATFORM_H\n\n#include \"Image.h\"\n#include \"MbedTimer.h\"\n#include \"MbedI2C.h\"\n#include \"MbedPin.h\"\n#include \"MbedSPI.h\"\n#include \"MultiButton.h\"\n#include \"BrainPadPin.h\"\n\n//#include \"SAMD21DMAC.h\"\n\nusing namespace codal;\n\n#define PAGE_SIZE 256 // doesn't really apply\n\n// 3 ports times 16 pins in each; there are bigger packages with 4 or 5 ports\n#define DEV_NUM_PINS 48\n\n// Table 8 in STM32F401xE Product Spec.\n// PA0-3 PA5-12 PA15 PB0-1 PB10 PB12-15 PC6-9\n#define DEV_PWM_PINS 0x03c0f4039fefULL\n// PA0-7 PB0-1 PC0-5\n#define DEV_AIN_PINS 0x001f000300ffULL\n\n// Codal doesn't yet distinguish between PWM and AIN\n#define DEV_ANALOG_PINS (DEV_PWM_PINS | DEV_AIN_PINS)\n\n//#define PlatformDMAC SAMD21DMAC\n\n#define CODAL_MBED codal::_mbed\n#define CODAL_SPI codal::MbedSPI\n#define CODAL_PIN codal::BrainPadPin\n#define CODAL_ACCELEROMETER_HEADER \"MC3216.h\"\n#define CODAL_ACCELEROMETER codal::MC3216\n\n#define IMAGE_BITS 1\n#define LCD_WIDTH 128\n#define LCD_HEIGHT 64\n\n// #define TEMPERATURE_NOMINAL_VALUE 25\n// #define TEMPERATURE_NOMINAL_READING 10000\n// #define TEMPERATURE_SERIES_RESISTOR 10000\n// #define TEMPERATURE_ZERO_OFFSET 273.5\n\n#define CODAL_LIGHT_SENSOR_HEADER \"BrainPadLightSensor.h\"\n#define CODAL_LIGHT_SENSOR codal::BrainPadLightSensor\n#define LIGHTSENSOR_SENSITIVITY 868 // codal has 912 now\n#define LIGHTSENSOR_LOW_THRESHOLD 128\n#define LIGHTSENSOR_HIGH_THRESHOLD 896\n\n#define target_wait_us wait_us\n\n#ifdef JUST_FOR_DAL_D_TS_CPP_WILL_IGNORE\n#define PA_0 0x00\n#define PA_1 0x01\n#define PA_2 0x02\n#define PA_3 0x03\n#define PA_4 0x04\n#define PA_5 0x05\n#define PA_6 0x06\n#define PA_7 0x07\n#define PA_8 0x08\n#define PA_9 0x09\n#define PA_10 0x0A\n#define PA_11 0x0B\n#define PA_12 0x0C\n#define PA_13 0x0D\n#define PA_14 0x0E\n#define PA_15 0x0F\n#define PB_0 0x10\n#define PB_1 0x11\n#define PB_2 0x12\n#define PB_3 0x13\n#define PB_4 0x14\n#define PB_5 0x15\n#define PB_6 0x16\n#define PB_7 0x17\n#define PB_8 0x18\n#define PB_9 0x19\n#define PB_10 0x1A\n#define PB_12 0x1C\n#define PB_13 0x1D\n#define PB_14 0x1E\n#define PB_15 0x1F\n#define PC_0 0x20\n#define PC_1 0x21\n#define PC_2 0x22\n#define PC_3 0x23\n#define PC_4 0x24\n#define PC_5 0x25\n#define PC_6 0x26\n#define PC_7 0x27\n#define PC_8 0x28\n#define PC_9 0x29\n#define PC_10 0x2A\n#define PC_11 0x2B\n#define PC_12 0x2C\n#define PC_13 0x2D\n#define PC_14 0x2E\n#define PC_15 0x2F\n#define PD_2 0x32\n#define PH_0 0x70\n#define PH_1 0x71\n#endif\n\ntypedef uint32_t ImageLiteral_;\n\nstatic inline ImageData *imageBytes(ImageLiteral_ lit) {\n    return (ImageData *)lit;\n}\n\n\nnamespace pxt {\n\tbool IsPulse();\n}\n\n#endif\n",
      "pxt.h": "#ifndef __PXT_H\n#define __PXT_H\n\n#include \"pxtbase.h\"\n\n#include \"CodalConfig.h\"\n#include \"CodalHeapAllocator.h\"\n#include \"CodalDevice.h\"\n#include \"CodalDmesg.h\"\n#include \"ErrorNo.h\"\n#include \"Timer.h\"\n#include \"Matrix4.h\"\n#include \"CodalCompat.h\"\n#include \"CodalComponent.h\"\n#include \"ManagedType.h\"\n#include \"Event.h\"\n#include \"NotifyEvents.h\"\n#include \"Button.h\"\n#include \"CodalFiber.h\"\n#include \"MessageBus.h\"\n\nusing namespace codal;\n\n#include \"pins.h\"\n\n#if CONFIG_ENABLED(DEVICE_USB)\n#include \"hf2.h\"\n#include \"hf2dbg.h\"\n#if CONFIG_ENABLED(DEVICE_MOUSE)\n#include \"HIDMouse.h\"\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\n#include \"HIDKeyboard.h\"\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\n#include \"HIDJoystick.h\"\n#endif\n#endif\n\nnamespace pxt {\n\n#if CONFIG_ENABLED(DEVICE_USB)\nextern CodalUSB usb;\nextern HF2 hf2;\nextern WebHF2 webhf2;\n#if CONFIG_ENABLED(DEVICE_MOUSE)\nextern USBHIDMouse mouse;\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\nextern USBHIDKeyboard keyboard;\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\nextern USBHIDJoystick joystick;\n#endif\n#endif\n\n// Utility functions\nextern Event lastEvent;\nextern CODAL_TIMER devTimer;\nextern MessageBus devMessageBus;\nextern codal::CodalDevice device;\n}\n\n#define DEVICE_ID_BUTTON_SLIDE  3000\n#define DEVICE_ID_MICROPHONE    3001\n#define DEVICE_ID_FIRST_BUTTON 4000\n#define DEVICE_ID_FIRST_TOUCHBUTTON 4100\n\n#endif\n",
      "pxt.json": "{\n    \"name\": \"core\",\n    \"description\": \"The core library for Codal-based targets\",\n    \"files\": [\n        \"README.md\",\n        \"dal.d.ts\",\n        \"codal.cpp\",\n        \"usb.cpp\",\n        \"pxt.h\",\n        \"platform.h\",\n        \"platform.cpp\",\n        \"pxtcore.h\",\n        \"pins.h\",\n        \"pins.cpp\",\n        \"pinsAnalog.cpp\",\n        \"pinsDigital.cpp\",\n        \"pinsPWM.cpp\",\n        \"pins.ts\",\n        \"pinscompat.ts\",\n        \"control.cpp\",\n        \"i2c.cpp\",\n        \"i2c.ts\",\n        \"spi.cpp\",\n        \"shims.d.ts\",\n        \"enums.d.ts\",\n        \"hf2.cpp\",\n        \"hf2.h\",\n        \"hf2dbg.h\",\n        \"uf2format.h\",\n        \"uf2hid.h\",\n        \"ns.ts\",\n        \"dmac.cpp\",\n        \"dmac.h\",\n        \"timer.ts\",\n        \"pxtparts.json\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"yotta\": {\n        \"config\": {\n            \"codal\": {\n                \"component_count\": 64,\n                \"dmesg_buffer_size\": 1024,\n                \"tag\": 1\n            }\n        }\n    },\n    \"public\": true,\n    \"dalDTS\": {\n        \"includeDirs\": [\n            \"libraries/codal-core/inc\",\n            \"pxtapp\"\n        ],\n        \"excludePrefix\": [\n            \"USB_\",\n            \"REQUEST_\",\n            \"LIS3DH_\",\n            \"FXOS8700_\",\n            \"HF2_\",\n            \"PXT_REF_TAG_\",\n            \"MS_\",\n            \"SCSI_\"\n        ]\n    },\n    \"dependencies\": {\n        \"base\": \"*\"\n    },\n    \"targetVersions\": {\n        \"target\": \"0.21.27\"\n    }\n}",
      "pxtcore.h": "#ifndef __PXTCORE_H\n#define __PXTCORE_H\n\n#include \"CodalDmesg.h\"\n\n#define itoa(a, b) codal::itoa(a, b)\n\n#endif\n",
      "pxtparts.json": "{\n    \"buttons\": {\n        \"simulationBehavior\": \"buttons\",\n        \"visual\": {\n            \"builtIn\": \"buttons\",\n            \"width\": 75,\n            \"height\": 45,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 30,\n                    \"y\": 45\n                }\n            ]\n        },\n        \"numberOfPins\": 2,\n        \"pinDefinitions\": [\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"Button.onEvent\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"button\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true\n            },\n            {\n                \"pinIndices\": [\n                    0,\n                    1\n                ]\n            }\n        ]\n    },\n    \"slideswitch\": {\n        \"numberOfPins\": 3,\n        \"simulationBehavior\": \"slideswitch\",\n        \"visual\": {\n            \"builtIn\": \"slideswitch\",\n            \"width\": 100,\n            \"height\": 100,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 30,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 45,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"pinDefinitions\": [\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"DigitalInOutPin.digitalRead,DigitalInOutPin.onPulsed,DigitalInOutPin.onEvent\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"pin\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    },\n    \"microservo\": {\n        \"simulationBehavior\": \"microservo\",\n        \"visual\": {\n            \"builtIn\": \"microservo\",\n            \"width\": 74.85,\n            \"height\": 200,\n            \"pinDistance\": 10,\n            \"pinLocations\": [\n                {\n                    \"x\": 30,\n                    \"y\": 5\n                },\n                {\n                    \"x\": 37,\n                    \"y\": 5\n                },\n                {\n                    \"x\": 45,\n                    \"y\": 5\n                }\n            ]\n        },\n        \"numberOfPins\": 3,\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"PwmOnlyPin.servoWrite,servos.Servo.setAngle,servos.Servo.run,servos.Servo.setPulse\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    2\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    0,\n                    1\n                ]\n            }\n        ]\n    },\n    \"led\": {\n        \"numberOfPins\": 2,\n        \"visual\": {\n            \"builtIn\": \"led\",\n            \"width\": 68,\n            \"height\": 180,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"simulationBehavior\": \"led\",\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"DigitalInOutPin.digitalWrite\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    },\n    \"analogled\": {\n        \"numberOfPins\": 2,\n        \"visual\": {\n            \"builtIn\": \"led\",\n            \"width\": 68,\n            \"height\": 180,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"simulationBehavior\": \"led\",\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"AnalogOutPin.analogWrite\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    },\n    \"photocell\": {\n        \"numberOfPins\": 3,\n        \"visual\": {\n            \"builtIn\": \"photocell\",\n            \"width\": 68,\n            \"height\": 180,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 15,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"simulationBehavior\": \"photocell\",\n        \"pinDefinitions\": [\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"AnalogInPin.analogRead\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    }\n}",
      "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace pins {\n\n    /**\n     * Create a new zero-initialized buffer.\n     * @param size number of bytes in the buffer\n     */\n    //% shim=pins::createBuffer\n    function createBuffer(size: int32): Buffer;\n\n    /**\n     * Get the duration of the last pulse in microseconds. This function should be called from a\n     * ``onPulsed`` handler.\n     */\n    //% help=pins/pulse-duration blockGap=8\n    //% blockId=pins_pulse_duration block=\"pulse duration (µs)\"\n    //% weight=19 shim=pins::pulseDuration\n    function pulseDuration(): int32;\n}\n\n\ndeclare interface AnalogInPin {\n    /**\n     * Read the connector value as analog, that is, as a value comprised between 0 and 1023.\n     * @param name pin to write to\n     */\n    //% help=pins/analog-read weight=53\n    //% blockId=device_get_analog_pin block=\"analog read|pin %name\" blockGap=\"8\"\n    //% blockNamespace=pins\n    //% parts=\"photocell\" trackArgs=0\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=AnalogInPinMethods::analogRead\n    analogRead(): int32;\n}\n\n\ndeclare interface AnalogOutPin {\n    /**\n     * Set the connector value as analog. Value must be comprised between 0 and 1023.\n     * @param name pin name to write to\n     * @param value value to write to the pin between ``0`` and ``1023``. eg:1023,0\n     */\n    //% help=pins/analog-write weight=52\n    //% blockId=device_set_analog_pin block=\"analog write|pin %name|to %value\" blockGap=8\n    //% blockNamespace=pins\n    //% parts=\"analogled\" trackArgs=0\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4\n    //% value.min=0 value.max=1023 shim=AnalogOutPinMethods::analogWrite\n    analogWrite(value: int32): void;\n}\n\n\ndeclare interface DigitalInOutPin {\n    /**\n     * Read a pin or connector as either 0 or 1\n     * @param name pin to read from\n     */\n    //% help=pins/digital-read weight=61\n    //% blockId=device_get_digital_pin block=\"digital read|pin %name\" blockGap=8\n    //% parts=\"slideswitch\" trackArgs=0\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=DigitalInOutPinMethods::digitalRead\n    digitalRead(): boolean;\n\n    /**\n     * Set a pin or connector value to either 0 or 1.\n     * @param name pin to write to\n     * @param value value to set on the pin\n     */\n    //% help=pins/digital-write weight=60\n    //% blockId=device_set_digital_pin block=\"digital write|pin %name|to %value=toggleHighLow\"\n    //% parts=\"led\" trackArgs=0\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=DigitalInOutPinMethods::digitalWrite\n    digitalWrite(value: boolean): void;\n\n    /**\n     * Make this pin a digital input, and create events where the timestamp is the duration\n     * that this pin was either ``high`` or ``low``.\n     */\n    //% help=pins/on-pulsed weight=16 blockGap=8\n    //% blockId=pins_on_pulsed block=\"on|pin %pin|pulsed %pulse\"\n    //% blockNamespace=pins\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.width=220\n    //% pin.fieldOptions.columns=4\n    //% parts=\"slideswitch\" trackArgs=0\n    //% deprecated=1 hidden=1 shim=DigitalInOutPinMethods::onPulsed\n    onPulsed(pulse: PulseValue, body: () => void): void;\n\n    /**\n     * Register code to run when a pin event occurs. \n     */\n    //% help=pins/on-event weight=20 blockGap=8\n    //% blockId=pinsonevent block=\"on|pin %pin|%event\"\n    //% blockNamespace=pins\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.width=220\n    //% pin.fieldOptions.columns=4\n    //% parts=\"slideswitch\" trackArgs=0 shim=DigitalInOutPinMethods::onEvent\n    onEvent(event: PinEvent, body: () => void): void;\n\n    /**\n     * Return the duration of a pulse in microseconds\n     * @param name the pin which measures the pulse\n     * @param value the value of the pulse (default high)\n     * @param maximum duration in micro-seconds\n     */\n    //% blockId=\"pins_pulse_in\" block=\"pulse in (µs)|pin %name|pulsed %high||timeout %maxDuration (us)\"\n    //% weight=18 blockGap=8\n    //% help=\"pins/pulse-in\"\n    //% blockNamespace=pins\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.width=220\n    //% pin.fieldOptions.columns=4 maxDuration.defl=2000000 shim=DigitalInOutPinMethods::pulseIn\n    pulseIn(value: PulseValue, maxDuration?: int32): int32;\n\n    /**\n     * Set the pull direction of this pin.\n     * @param name pin to set the pull mode on\n     * @param pull one of the mbed pull configurations: PullUp, PullDown, PullNone\n     */\n    //% help=pins/set-pull weight=17 blockGap=8\n    //% blockId=device_set_pull block=\"set pull|pin %pin|to %pull\"\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=DigitalInOutPinMethods::setPull\n    setPull(pull: PinPullMode): void;\n}\n\n\ndeclare interface PwmPin {}\n\n\ndeclare interface PwmOnlyPin {\n    /**\n     * Set the Pulse-width modulation (PWM) period of the analog output. The period is in\n     * **microseconds** or `1/1000` milliseconds.\n     * If this pin is not configured as an analog output (using `analog write pin`), the operation has\n     * no effect.\n     * @param name analog pin to set period to\n     * @param micros period in micro seconds. eg:20000\n     */\n    //% help=pins/analog-set-period weight=51\n    //% blockId=device_set_analog_period block=\"analog set period|pin %pin|to (µs)%period\"\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=PwmOnlyPinMethods::analogSetPeriod\n    analogSetPeriod(period: int32): void;\n\n    /**\n     * Write a value to the servo to control the rotation of the shaft. On a standard servo, this will\n     * set the angle of the shaft (in degrees), moving the shaft to that orientation. On a continuous\n     * rotation servo, this will set the speed of the servo (with ``0`` being full-speed in one\n     * direction, ``180`` being full speed in the other, and a value near ``90`` being no movement).\n     * @param name pin to write to\n     * @param value angle or rotation speed\n     */\n    //% help=pins/servo-write weight=41 group=\"Servo\"\n    //% blockId=device_set_servo_pin block=\"servo write|pin %name|to %value=protractorPicker\" blockGap=8\n    //% parts=microservo trackArgs=0\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4\n    //% value.defl=90 shim=PwmOnlyPinMethods::servoWrite\n    servoWrite(value?: int32): void;\n\n    /**\n     * Set the pin for PWM analog output, make the period be 20 ms, and set the pulse width.\n     * The pulse width is based on the value it is given **microseconds** or `1/1000` milliseconds.\n     * @param name pin name\n     * @param duration pulse duration in micro seconds, eg:1500\n     */\n    //% help=pins/servo-set-pulse weight=40 group=\"Servo\" blockGap=8\n    //% blockId=device_set_servo_pulse block=\"servo set pulse|pin %value|to (µs) %duration\"\n    //% parts=microservo blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=PwmOnlyPinMethods::servoSetPulse\n    servoSetPulse(duration: int32): void;\n}\ndeclare namespace control {\n\n    /**\n     * Announce that an event happened to registered handlers.\n     * @param src ID of the MicroBit Component that generated the event\n     * @param value Component specific code indicating the cause of the event.\n     */\n    //% weight=21 blockGap=12 blockId=\"control_raise_event\"\n    //% help=control/raise-event\n    //% block=\"raise event|from %src|with value %value\" blockExternalInputs=1 shim=control::raiseEvent\n    function raiseEvent(src: int32, value: int32): void;\n\n    /**\n     * Determine the version of system software currently running.\n     */\n    //% blockId=\"control_device_dal_version\" block=\"device dal version\"\n    //% help=control/device-dal-version shim=control::deviceDalVersion\n    function deviceDalVersion(): string;\n\n    /**\n     * Allocates the next user notification event\n     */\n    //% help=control/allocate-notify-event shim=control::allocateNotifyEvent\n    function allocateNotifyEvent(): int32;\n\n    /** Write a message to DMESG debugging buffer. */\n    //% shim=control::dmesg\n    function dmesg(s: string): void;\n\n    /** Write a message and value (pointer) to DMESG debugging buffer. */\n    //% shim=control::dmesgPtr\n    function dmesgPtr(str: string, ptr: Object): void;\n}\ndeclare namespace pins {\n\n    /**\n     * Read `size` bytes from a 7-bit I2C `address`.\n     */\n    //% repeat.defl=0 shim=pins::i2cReadBuffer\n    function i2cReadBuffer(address: int32, size: int32, repeat?: boolean): Buffer;\n\n    /**\n     * Write bytes to a 7-bit I2C `address`.\n     */\n    //% repeat.defl=0 shim=pins::i2cWriteBuffer\n    function i2cWriteBuffer(address: int32, buf: Buffer, repeat?: boolean): int32;\n}\ndeclare namespace pins {\n\n    /**\n     * Write to the SPI slave and return the response\n     * @param value Data to be sent to the SPI slave\n     */\n    //% help=pins/spi-write weight=5 advanced=true\n    //% blockId=spi_write block=\"spi write %value\" shim=pins::spiWrite\n    function spiWrite(value: int32): int32;\n\n    /**\n     * Writes a given command to SPI bus, and afterwards reads the response.\n     */\n    //% help=pins/spi-transfer weight=4 advanced=true\n    //% blockId=spi_transfer block=\"spi transfer %command into %response\" shim=pins::spiTransfer\n    function spiTransfer(command: Buffer, response: Buffer): void;\n\n    /**\n     * Sets the SPI frequency\n     * @param frequency the clock frequency, eg: 1000000\n     */\n    //% help=pins/spi-frequency weight=4 advanced=true\n    //% blockId=spi_frequency block=\"spi frequency %frequency\" shim=pins::spiFrequency\n    function spiFrequency(frequency: int32): void;\n\n    /**\n     * Sets the SPI mode and bits\n     * @param mode the mode, eg: 3\n     */\n    //% help=pins/spi-mode weight=3 advanced=true\n    //% blockId=spi_mode block=\"spi mode %mode\" shim=pins::spiMode\n    function spiMode(mode: int32): void;\n}\n\n// Auto-generated. Do not edit. Really.\n",
      "spi.cpp": "#include \"pxt.h\"\n#include \"ErrorNo.h\"\n\nnamespace pins {\n    static codal::SPI *spi = NULL;\n    static void initSPI() {\n        if (NULL == spi)\n            spi = new CODAL_SPI(*LOOKUP_PIN(MOSI), *LOOKUP_PIN(MISO), *LOOKUP_PIN(SCK));\n    }\n\n    /**\n    * Write to the SPI slave and return the response\n    * @param value Data to be sent to the SPI slave\n    */\n    //% help=pins/spi-write weight=5 advanced=true\n    //% blockId=spi_write block=\"spi write %value\"\n    int spiWrite(int value) {\n        initSPI();\n        return spi->write(value);\n    }\n\n    /**\n    * Writes a given command to SPI bus, and afterwards reads the response.\n    */\n    //% help=pins/spi-transfer weight=4 advanced=true\n    //% blockId=spi_transfer block=\"spi transfer %command into %response\"\n    void spiTransfer(Buffer command, Buffer response) {\n        initSPI();\n        auto cdata = NULL == command ? NULL : command->data;\n        auto clength = NULL == command ? 0 : command->length;\n        auto rdata = NULL == response ? NULL : response->data;\n        auto rlength = NULL == response ? 0 : response->length;\n        spi->transfer(cdata, clength, rdata, rlength);\n    }\n\n    /**\n    * Sets the SPI frequency\n    * @param frequency the clock frequency, eg: 1000000\n    */\n    //% help=pins/spi-frequency weight=4 advanced=true\n    //% blockId=spi_frequency block=\"spi frequency %frequency\"\n    void spiFrequency(int frequency) {\n        initSPI();\n        spi->setFrequency(frequency);\n    }\n\n    /**\n    * Sets the SPI mode and bits\n    * @param mode the mode, eg: 3\n    */\n    //% help=pins/spi-mode weight=3 advanced=true\n    //% blockId=spi_mode block=\"spi mode %mode\"\n    void spiMode(int mode) {\n        initSPI();\n        spi->setMode(mode);        \n    }\n}\n",
      "test.ts": " ",
      "timer.ts": "namespace control {\n    /**\n     * A timer\n     */\n    //% fixedInstances\n    export class Timer {\n        start: number;\n\n        constructor() {\n            this.start = control.millis();\n        }\n\n        /**\n         * Gets the elapsed time in millis since the last reset\n         */\n        //% blockId=timerMillis block=\"%timer|millis\"\n        millis(): number {\n            return control.millis() - this.start;\n        }\n\n        /**\n         * Gets the elapsed time in seconds since the last reset\n         */\n        //% blockId=timerSeconds block=\"%timer|seconds\"\n        seconds(): number {\n            return this.millis() / 1000;\n        }\n\n        /**\n         * Resets the timer\n         */\n        //% blockId=timerRest block=\"%timer|reset\"\n        reset() {\n            this.start = control.millis();\n        }\n\n        /**\n         * Pauses until the timer reaches the given amount of milliseconds\n         * @param ms how long to pause for, eg: 5, 100, 200, 500, 1000, 2000\n         */\n        //% blockId=timerPauseUntil block=\"%timer|pause until (ms) %ms\"\n        pauseUntil(ms: number) {\n            const remaining = this.millis() - ms;\n            pause(Math.max(0, remaining));\n        }\n    }\n\n    //% whenUsed fixedInstance block=\"timer 1\"\n    export const timer1 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 2\"\n    export const timer2 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 3\"\n    export const timer3 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 4\"\n    export const timer4 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 5\"\n    export const timer5 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 6\"\n    export const timer6 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 7\"\n    export const timer7 = new Timer();\n    //% whenUsed fixedInstance block=\"timer 8\"\n    export const timer8 = new Timer();\n}",
      "uf2format.h": "#ifndef UF2FORMAT_H\n#define UF2FORMAT_H 1\n\n#include <stdint.h>\n#include <stdbool.h>\n\n// All entries are little endian.\n\n// if you increase that, you will also need to update the linker script file\n#define APP_START_ADDRESS 0x00002000\n\n#define UF2_MAGIC_START0 0x0A324655UL // \"UF2\\n\"\n#define UF2_MAGIC_START1 0x9E5D5157UL // Randomly selected\n#define UF2_MAGIC_END 0x0AB16F30UL    // Ditto\n\n// If set, the block is \"comment\" and should not be flashed to the device\n#define UF2_FLAG_NOFLASH 0x00000001\n\ntypedef struct {\n    // 32 byte header\n    uint32_t magicStart0;\n    uint32_t magicStart1;\n    uint32_t flags;\n    uint32_t targetAddr;\n    uint32_t payloadSize;\n    uint32_t blockNo;\n    uint32_t numBlocks;\n    uint32_t reserved;\n\n    // raw data;\n    uint8_t data[476];\n\n    // store magic also at the end to limit damage from partial block reads\n    uint32_t magicEnd;\n} UF2_Block;\n\ntypedef struct {\n    uint8_t version;\n    uint8_t ep_in;\n    uint8_t ep_out;\n    uint8_t reserved0;\n    uint32_t cbw_tag;\n    uint32_t blocks_remaining;\n    uint8_t *buffer;\n} UF2_HandoverArgs;\n\ntypedef void (*UF2_MSC_Handover_Handler)(UF2_HandoverArgs *handover);\ntypedef void (*UF2_HID_Handover_Handler)(int ep);\n\n// this is required to be exactly 16 bytes long by the linker script\ntypedef struct {\n    void *reserved0;\n    UF2_HID_Handover_Handler handoverHID;\n    UF2_MSC_Handover_Handler handoverMSC;\n    const char *info_uf2;\n} UF2_BInfo;\n\n#define UF2_BINFO ((UF2_BInfo *)(APP_START_ADDRESS - sizeof(UF2_BInfo)))\n\nstatic inline bool is_uf2_block(void *data) {\n    UF2_Block *bl = (UF2_Block *)data;\n    return bl->magicStart0 == UF2_MAGIC_START0 && bl->magicStart1 == UF2_MAGIC_START1 &&\n           bl->magicEnd == UF2_MAGIC_END;\n}\n\nstatic inline bool in_uf2_bootloader_space(const void *addr) {\n    return 0xb4 <= (uint32_t)addr && (uint32_t)addr < APP_START_ADDRESS;\n}\n\nstatic inline const char *uf2_info(void) {\n    if (in_uf2_bootloader_space(UF2_BINFO->info_uf2))\n        return UF2_BINFO->info_uf2;\n    return \"N/A\";\n}\n\n#ifdef UF2_DEFINE_HANDOVER\nstatic inline void hf2_handover(uint8_t ep) {\n    const char *board_info = UF2_BINFO->info_uf2;\n    UF2_HID_Handover_Handler fn = UF2_BINFO->handoverHID;\n\n    if (in_uf2_bootloader_space(board_info) && in_uf2_bootloader_space((const void *)fn) &&\n        ((uint32_t)fn & 1)) {\n        // Pass control to bootloader; never returns\n        fn(ep & 0xf);\n    }\n}\n\nstatic inline void check_uf2_handover(uint8_t *buffer, uint32_t blocks_remaining, uint8_t ep_in,\n                                      uint8_t ep_out, uint32_t cbw_tag) {\n    if (!is_uf2_block(buffer))\n        return;\n\n    const char *board_info = UF2_BINFO->info_uf2;\n    UF2_MSC_Handover_Handler fn = UF2_BINFO->handoverMSC;\n\n    if (in_uf2_bootloader_space(board_info) && in_uf2_bootloader_space((const void *)fn) &&\n        ((uint32_t)fn & 1)) {\n        UF2_HandoverArgs hand = {\n            1, ep_in, ep_out, 0, cbw_tag, blocks_remaining, buffer,\n        };\n        // Pass control to bootloader; never returns\n        fn(&hand);\n    }\n}\n#endif\n\n#endif\n",
      "uf2hid.h": "#ifndef UF2_HID_H\n#define UF2_HID_H 1\n\n#define HF2_CMD_BININFO 0x0001\n// no arguments\n#define HF2_MODE_BOOTLOADER 0x01\n#define HF2_MODE_USERSPACE 0x02\nstruct HF2_BININFO_Result {\n    uint32_t mode;\n    uint32_t flash_page_size;\n    uint32_t flash_num_pages;\n    uint32_t max_message_size;\n};\n\n#define HF2_CMD_INFO 0x0002\n// no arguments\n// results is utf8 character array\n\n#define HF2_CMD_RESET_INTO_APP 0x0003\n// no arguments, no result\n\n#define HF2_CMD_RESET_INTO_BOOTLOADER 0x0004\n// no arguments, no result\n\n#define HF2_CMD_START_FLASH 0x0005\n// no arguments, no result\n\n#define HF2_CMD_WRITE_FLASH_PAGE 0x0006\nstruct HF2_WRITE_FLASH_PAGE_Command {\n    uint32_t target_addr;\n    uint32_t data[0];\n};\n// no result\n\n#define HF2_CMD_CHKSUM_PAGES 0x0007\nstruct HF2_CHKSUM_PAGES_Command {\n    uint32_t target_addr;\n    uint32_t num_pages;\n};\nstruct HF2_CHKSUM_PAGES_Result {\n    uint16_t chksums[0 /* num_pages */];\n};\n\n#define HF2_CMD_READ_WORDS 0x0008\nstruct HF2_READ_WORDS_Command {\n    uint32_t target_addr;\n    uint32_t num_words;\n};\nstruct HF2_READ_WORDS_Result {\n    uint32_t words[0 /* num_words */];\n};\n\n#define HF2_CMD_WRITE_WORDS 0x0009\nstruct HF2_WRITE_WORDS_Command {\n    uint32_t target_addr;\n    uint32_t num_words;\n    uint32_t words[0 /* num_words */];\n};\n// no result\n\n#define HF2_CMD_DMESG 0x0010\n// no arguments\n// results is utf8 character array\n\ntypedef struct {\n    uint32_t command_id;\n    uint16_t tag;\n    uint8_t reserved0;\n    uint8_t reserved1;\n\n    union {\n        struct HF2_WRITE_FLASH_PAGE_Command write_flash_page;\n        struct HF2_WRITE_WORDS_Command write_words;\n        struct HF2_READ_WORDS_Command read_words;\n        struct HF2_CHKSUM_PAGES_Command chksum_pages;\n        uint8_t data8[0];\n        uint16_t data16[0];\n        uint32_t data32[0];\n    };\n} HF2_Command;\n\ntypedef struct {\n    union {\n        uint32_t eventId;\n        struct {\n            uint16_t tag;\n            union {\n                struct {\n                    uint8_t status;\n                    uint8_t status_info;\n                };\n                uint16_t status16;\n            };\n        };\n    };\n    union {\n        struct HF2_BININFO_Result bininfo;\n        uint8_t data8[0];\n        uint16_t data16[0];\n        uint32_t data32[0];\n    };\n} HF2_Response;\n\n#define HF2_FLAG_SERIAL_OUT 0x80\n#define HF2_FLAG_SERIAL_ERR 0xC0\n#define HF2_FLAG_CMDPKT_LAST 0x40\n#define HF2_FLAG_CMDPKT_BODY 0x00\n#define HF2_FLAG_MASK 0xC0\n#define HF2_SIZE_MASK 63\n\n#define HF2_STATUS_OK 0x00\n#define HF2_STATUS_INVALID_CMD 0x01\n\n#endif\n",
      "usb.cpp": "#include \"pxt.h\"\n\nnamespace pxt {\n\n#if CONFIG_ENABLED(DEVICE_USB)\nCodalUSB usb;\n\n// share the buffer; we will crash anyway if someone talks to us over both at the same time\nHF2_Buffer hf2buf;\nHF2 hf2(hf2buf);\nWebHF2 webhf2(hf2buf);\n\n#if CONFIG_ENABLED(DEVICE_MOUSE)\nUSBHIDMouse mouse;\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\nUSBHIDKeyboard keyboard;\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\nUSBHIDJoystick joystick;\n#endif\n\nstatic const DeviceDescriptor device_desc = {\n    0x12,            // bLength\n    0x01,            // bDescriptorType\n    0x0210,          // bcdUSBL\n\n    // Class etc specified per-interface\n    0x00, 0x00, 0x00,\n\n    0x40,            // bMaxPacketSize0\n    0x03EB, // Atmel\n    0x2402, // Example device\n    0x4202,          // bcdDevice - leave unchanged for the HF2 to work\n    0x01,            // iManufacturer\n    0x02,            // iProduct\n    0x03,            // SerialNumber\n    0x01             // bNumConfigs\n};\n\n// TODO extract these from uf2_info()?\nstatic const char *string_descriptors[] = {\n    \"Example Corp.\",\n    \"PXT Device\",\n    \"42424242\",\n};\n\nstatic void start_usb() {\n    // start USB with a delay, so that user code can add new interfaces if needed\n    // (eg USB HID keyboard, or MSC)\n    fiber_sleep(100);\n    usb.start();\n}\n\nvoid usb_init() {\n    usb.stringDescriptors = string_descriptors;\n    usb.deviceDescriptor = &device_desc;\n\n#if CONFIG_ENABLED(DEVICE_MOUSE)\n    usb.add(mouse);\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\n    usb.add(keyboard);\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\n    usb.add(joystick);\n#endif\n    usb.add(hf2);\n    usb.add(webhf2);\n    create_fiber(start_usb);\n}\n\n\n#else\nvoid usb_init() {}\n#endif\n\nstatic void (*pSendToUART)(const char *data, int len) = NULL;\nvoid setSendToUART(void (*f)(const char *, int)) {\n    pSendToUART = f;\n}\n\nvoid sendSerial(const char *data, int len) {\n#if CONFIG_ENABLED(DEVICE_USB)\n    hf2.sendSerial(data, len);\n    webhf2.sendSerial(data, len);\n#endif    \n    if (pSendToUART)\n        pSendToUART(data, len);\n}\n\nvoid dumpDmesg() {\n    sendSerial(\"\\nDMESG:\\n\", 8);\n    sendSerial(codalLogStore.buffer, codalLogStore.ptr);\n    sendSerial(\"\\n\\n\", 2);\n}\n}\n"
    },
    "accelerometer": {
      "README.md": "# accelerometer\n\nThe accelerometer library.\n\n",
      "accelerometer.cpp": "#include \"pxt.h\"\n#include \"axis.h\"\n#include \"Pin.h\"\n#include \"I2C.h\"\n#include \"CoordinateSystem.h\"\n\n#ifdef CODAL_ACCELEROMETER\n\n#ifdef CODAL_ACCELEROMETER_HEADER\n#include CODAL_ACCELEROMETER_HEADER\n#endif\n\n#else\n\n#include \"LIS3DH.h\"\n#define CODAL_ACCELEROMETER codal::LIS3DH\n\n#endif\n\nenum class Dimension {\n    //% block=x\n    X = 0,\n    //% block=y\n    Y = 1,\n    //% block=z\n    Z = 2,\n    //% block=strength\n    Strength = 3,\n};\n\nenum class Rotation {\n    //% block=pitch\n    Pitch = 0,\n    //% block=roll\n    Roll = 1,\n};\n\nenum class AcceleratorRange {\n    /**\n     * The accelerator measures forces up to 1 gravity\n     */\n    //%  block=\"1g\"\n    OneG = 1,\n    /**\n     * The accelerator measures forces up to 2 gravity\n     */\n    //%  block=\"2g\"\n    TwoG = 2,\n    /**\n     * The accelerator measures forces up to 4 gravity\n     */\n    //% block=\"4g\"\n    FourG = 4,\n    /**\n     * The accelerator measures forces up to 8 gravity\n     */\n    //% block=\"8g\"\n    EightG = 8\n};\n\nenum class Gesture {\n    /**\n     * Raised when shaken\n     */\n    //% block=shake\n    Shake = ACCELEROMETER_EVT_SHAKE,\n    /**\n     * Raised when the device tilts up\n     */\n    //% block=\"tilt up\"\n    TiltUp = ACCELEROMETER_EVT_TILT_UP,\n    /**\n     * Raised when the device tilts down\n     */\n    //% block=\"tilt down\"\n    TiltDown = ACCELEROMETER_EVT_TILT_DOWN,\n    /**\n     * Raised when the screen is pointing left\n     */\n    //% block=\"tilt left\"\n    TiltLeft = ACCELEROMETER_EVT_TILT_LEFT,\n    /**\n     * Raised when the screen is pointing right\n     */\n    //% block=\"tilt right\"\n    TiltRight = ACCELEROMETER_EVT_TILT_RIGHT,\n    /**\n     * Raised when the screen faces up\n     */\n    //% block=\"face up\"\n    FaceUp = ACCELEROMETER_EVT_FACE_UP,\n    /**\n     * Raised when the screen is pointing up and the board is horizontal\n     */\n    //% block=\"face down\"\n    FaceDown = ACCELEROMETER_EVT_FACE_DOWN,\n    /**\n     * Raised when the board is falling!\n     */\n    //% block=\"free fall\"\n    FreeFall = ACCELEROMETER_EVT_FREEFALL,\n    /**\n    * Raised when a 3G shock is detected\n    */\n    //% block=\"3g\"\n    ThreeG = ACCELEROMETER_EVT_3G,\n    /**\n    * Raised when a 6G shock is detected\n    */\n    //% block=\"6g\"\n    SixG = ACCELEROMETER_EVT_6G,\n    /**\n    * Raised when a 8G shock is detected\n    */\n    //% block=\"8g\"\n    EightG = ACCELEROMETER_EVT_8G\n};\n\nnamespace pxt {\n\n// Wrapper classes\nclass WAccel {\n    CODAL_MBED::I2C i2c; // note that this is different pins than io->i2c\n    CoordinateSpace space;\n  public:\n    CODAL_ACCELEROMETER acc;\n    WAccel()\n        : i2c(*LOOKUP_PIN(ACCELEROMETER_SDA), *LOOKUP_PIN(ACCELEROMETER_SCL)),\n          space(ACC_SYSTEM, ACC_UPSIDEDOWN, ACC_ROTATION),\n          acc(i2c, *LOOKUP_PIN(ACCELEROMETER_INT), space)\n    {\n        acc.init();        \n    }\n};\n\nSINGLETON(WAccel);\n}\n\nnamespace input {\n/**\n * Do something when when a gesture is done (like shaking the board).\n * @param gesture the type of gesture to track, eg: Gesture.Shake\n * @param body code to run when gesture is raised\n */\n//% help=input/on-gesture\n//% blockId=device_gesture_event block=\"on |%NAME\"\n//% parts=\"accelerometer\"\n//% gesture.fieldEditor=\"gridpicker\"\n//% gesture.fieldOptions.width=220\n//% gesture.fieldOptions.columns=3\n//% weight=92 blockGap=12\nvoid onGesture(Gesture gesture, Action body) {\n    auto acc = &getWAccel()->acc;\n    acc->updateSample();\n    int gi = (int)gesture;\n    if (gi == ACCELEROMETER_EVT_3G && acc->getRange() < 3)\n        acc->setRange(4);\n    else if ((gi == ACCELEROMETER_EVT_6G || gi == ACCELEROMETER_EVT_8G) && acc->getRange() < 6)\n        acc->setRange(8);\n    registerWithDal(DEVICE_ID_GESTURE, gi, body);\n}\n\nint getAccelerationStrength() {\n    auto acc = &getWAccel()->acc;\n    float x = acc->getX();\n    float y = acc->getY();\n    float z = acc->getZ();\n    return (int)sqrtf(x * x + y * y + z * z);\n}\n\n/**\n * Get the acceleration value in milli-gravitys (when the board is laying flat with the screen up,\n * x=0, y=0 and z=-1023)\n * @param dimension TODO\n */\n//% help=input/acceleration\n//% blockId=device_acceleration block=\"acceleration (mg)|%NAME\"\n//% parts=\"accelerometer\"\n//% dimension.fieldEditor=\"gridpicker\"\n//% dimension.fieldOptions.width=180\n//% dimension.fieldOptions.columns=2\n//% weight=42 blockGap=8\nint acceleration(Dimension dimension) {\n    switch (dimension) {\n    case Dimension::X:\n        return getWAccel()->acc.getX();\n    case Dimension::Y:\n        return getWAccel()->acc.getY();\n    case Dimension::Z:\n        return getWAccel()->acc.getZ();\n    case Dimension::Strength:\n        return getAccelerationStrength();\n    }\n    return 0;\n}\n\n/**\n * The pitch or roll of the device, rotation along the ``x-axis`` or ``y-axis``, in degrees.\n * @param kind TODO\n */\n//% help=input/rotation\n//% blockId=device_get_rotation block=\"rotation (°)|%NAME\"\n//% parts=\"accelerometer\"\n//% group=\"More\" weight=38\nint rotation(Rotation kind) {\n    switch (kind) {\n    case Rotation::Pitch:\n        return getWAccel()->acc.getPitch();\n    case Rotation::Roll:\n        return getWAccel()->acc.getRoll();\n    }\n    return 0;\n}\n\n/**\n * Sets the accelerometer sample range in gravities.\n * @param range a value describe the maximum strengh of acceleration measured\n */\n//% help=input/set-accelerometer-range\n//% blockId=device_set_accelerometer_range block=\"set accelerometer|range %range\"\n//% weight=5\n//% parts=\"accelerometer\"\n//% group=\"More\" weight=15 blockGap=8\nvoid setAccelerometerRange(AcceleratorRange range) {\n    getWAccel()->acc.setRange((int)range);\n}\n\n}\n",
      "axis.h": "// Override in target to change inversion of axis\n\n#define ACC_SYSTEM SIMPLE_CARTESIAN\n#define ACC_UPSIDEDOWN false\n#define ACC_ROTATION COORDINATE_SPACE_ROTATED_0\n",
      "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum Dimension {\n    //% block=x\n    X = 0,\n    //% block=y\n    Y = 1,\n    //% block=z\n    Z = 2,\n    //% block=strength\n    Strength = 3,\n    }\n\n\n    declare const enum Rotation {\n    //% block=pitch\n    Pitch = 0,\n    //% block=roll\n    Roll = 1,\n    }\n\n\n    declare const enum AcceleratorRange {\n    /**\n     * The accelerator measures forces up to 1 gravity\n     */\n    //%  block=\"1g\"\n    OneG = 1,\n    /**\n     * The accelerator measures forces up to 2 gravity\n     */\n    //%  block=\"2g\"\n    TwoG = 2,\n    /**\n     * The accelerator measures forces up to 4 gravity\n     */\n    //% block=\"4g\"\n    FourG = 4,\n    /**\n     * The accelerator measures forces up to 8 gravity\n     */\n    //% block=\"8g\"\n    EightG = 8,\n    }\n\n\n    declare const enum Gesture {\n    /**\n     * Raised when shaken\n     */\n    //% block=shake\n    Shake = 11,  // ACCELEROMETER_EVT_SHAKE\n    /**\n     * Raised when the device tilts up\n     */\n    //% block=\"tilt up\"\n    TiltUp = 1,  // ACCELEROMETER_EVT_TILT_UP\n    /**\n     * Raised when the device tilts down\n     */\n    //% block=\"tilt down\"\n    TiltDown = 2,  // ACCELEROMETER_EVT_TILT_DOWN\n    /**\n     * Raised when the screen is pointing left\n     */\n    //% block=\"tilt left\"\n    TiltLeft = 3,  // ACCELEROMETER_EVT_TILT_LEFT\n    /**\n     * Raised when the screen is pointing right\n     */\n    //% block=\"tilt right\"\n    TiltRight = 4,  // ACCELEROMETER_EVT_TILT_RIGHT\n    /**\n     * Raised when the screen faces up\n     */\n    //% block=\"face up\"\n    FaceUp = 5,  // ACCELEROMETER_EVT_FACE_UP\n    /**\n     * Raised when the screen is pointing up and the board is horizontal\n     */\n    //% block=\"face down\"\n    FaceDown = 6,  // ACCELEROMETER_EVT_FACE_DOWN\n    /**\n     * Raised when the board is falling!\n     */\n    //% block=\"free fall\"\n    FreeFall = 7,  // ACCELEROMETER_EVT_FREEFALL\n    /**\n     * Raised when a 3G shock is detected\n     */\n    //% block=\"3g\"\n    ThreeG = 8,  // ACCELEROMETER_EVT_3G\n    /**\n     * Raised when a 6G shock is detected\n     */\n    //% block=\"6g\"\n    SixG = 9,  // ACCELEROMETER_EVT_6G\n    /**\n     * Raised when a 8G shock is detected\n     */\n    //% block=\"8g\"\n    EightG = 10,  // ACCELEROMETER_EVT_8G\n    }\n\n// Auto-generated. Do not edit. Really.\n",
      "lis3dh.svg": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"96\" height=\"50\" id=\"svg4493\">\n  <rect rx=\"1.2\" y=\".1\" height=\"49.9\" width=\"95.9\" id=\"rect5038\" fill=\"#5a86c2\" stroke=\"#8e8e8e\" stroke-width=\".1\"/>\n  <text id=\"text5094\" y=\"14.8\" x=\"3.9\" style=\"line-height:1.25;-inkscape-font-specification:consolas\" font-weight=\"400\" font-size=\"14.4\" letter-spacing=\"0\" word-spacing=\"0\" transform=\"scale(.99297 1.00708)\" font-family=\"consolas\" fill=\"#fff\" stroke-width=\".4\">\n    <tspan y=\"14.8\" x=\"3.9\" id=\"tspan5092\">LIS3DH</tspan>\n  </text>\n  <rect rx=\"1\" y=\"5.3\" x=\"71.6\" height=\"14.2\" width=\"14.4\" id=\"rect5096\" stroke=\"#000\" stroke-width=\".5\"/>\n  <g id=\"g4585\" transform=\"matrix(-4.31528 0 0 -4.29074 15.7 52)\" fill=\"#fff\" stroke-width=\".1\">\n    <circle r=\"1\" id=\"path5042-7-6\" cx=\"1.8\" cy=\"1.9\" stroke=\"#000\"/>\n    <text word-spacing=\"0\" letter-spacing=\"0\" font-size=\"1.9\" font-weight=\"400\" style=\"line-height:1.25;-inkscape-font-specification:consolas\" x=\"-6.2\" y=\"2.5\" id=\"text5100-8-5\" transform=\"matrix(0 -1.00996 .99014 0 0 0)\" font-family=\"consolas\">\n      <tspan id=\"tspan5098-2-4\" x=\"-6.2\" y=\"2.5\">INT</tspan>\n    </text>\n  </g>\n  <g id=\"g4595\" transform=\"matrix(-4.31528 0 0 -4.29074 84.3 52.7)\" fill=\"#fff\" stroke-width=\".1\">\n    <circle r=\"1\" id=\"path5042-7-3\" cx=\"8.4\" cy=\"1.9\" stroke=\"#000\"/>\n    <text word-spacing=\"0\" letter-spacing=\"0\" font-size=\"1.9\" font-weight=\"400\" style=\"line-height:1.25;-inkscape-font-specification:consolas\" x=\"-6.4\" y=\"9.2\" id=\"text5100-8-5-4\" transform=\"matrix(0 -1.00996 .99014 0 0 0)\" font-family=\"consolas\">\n      <tspan x=\"-6.4\" y=\"9.2\" id=\"tspan5156\">SDA</tspan>\n    </text>\n  </g>\n  <g id=\"g4600\" transform=\"matrix(-4.31528 0 0 -4.29074 118.6 52.6)\" fill=\"#fff\" stroke-width=\".1\">\n    <circle r=\"1\" id=\"path5042-7-1\" cx=\"11.8\" cy=\"1.9\" stroke=\"#000\"/>\n    <text word-spacing=\"0\" letter-spacing=\"0\" font-size=\"1.9\" font-weight=\"400\" style=\"line-height:1.25;-inkscape-font-specification:consolas\" x=\"-6.2\" y=\"12.5\" id=\"text5100-8-5-4-9\" transform=\"matrix(0 -1.00996 .99014 0 0 0)\" font-family=\"consolas\">\n      <tspan x=\"-6.2\" y=\"12.5\" id=\"tspan5156-5\">VCC</tspan>\n    </text>\n  </g>\n  <g id=\"g4605\" transform=\"matrix(-4.31528 0 0 -4.29074 152.9 52.6)\" fill=\"#fff\" stroke-width=\".1\">\n    <circle r=\"1\" id=\"path5042-7-0\" cx=\"15.1\" cy=\"1.9\" stroke=\"#000\"/>\n    <text word-spacing=\"0\" letter-spacing=\"0\" font-size=\"1.9\" font-weight=\"400\" style=\"line-height:1.25;-inkscape-font-specification:consolas\" x=\"-6.3\" y=\"15.8\" id=\"text5100-8-5-4-9-3\" transform=\"matrix(0 -1.00996 .99014 0 0 0)\" font-family=\"consolas\">\n      <tspan x=\"-6.3\" y=\"15.8\" id=\"tspan5156-5-7\">GND</tspan>\n    </text>\n  </g>\n  <g id=\"g4590\" transform=\"matrix(-4.31528 0 0 -4.29074 50 51.5)\" fill=\"#fff\" stroke-width=\".1\">\n    <circle r=\"1\" id=\"path5042-7-6-2\" cx=\"5.1\" cy=\"1.9\" stroke=\"#000\"/>\n    <text word-spacing=\"0\" letter-spacing=\"0\" font-size=\"1.9\" font-weight=\"400\" style=\"line-height:1.25;-inkscape-font-specification:consolas\" x=\"-6.1\" y=\"5.8\" id=\"text5100-8-5-47\" transform=\"matrix(0 -1.00996 .99014 0 0 0)\" font-family=\"consolas\">\n      <tspan id=\"tspan5098-2-4-5\" x=\"-6.1\" y=\"5.8\">SCL</tspan>\n    </text>\n  </g>\n</svg>\n",
      "ns.ts": "\n//% color=\"#B4009E\" weight=98 icon=\"\\uf192\"\nnamespace input {\n}",
      "pxt.json": "{\n    \"name\": \"accelerometer\",\n    \"description\": \"The accelerometer library\",\n    \"files\": [\n        \"README.md\",\n        \"accelerometer.cpp\",\n        \"axis.h\",\n        \"shims.d.ts\",\n        \"enums.d.ts\",\n        \"ns.ts\",\n        \"pxtparts.json\",\n        \"lis3dh.svg\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"targetVersions\": {\n        \"target\": \"0.21.27\"\n    }\n}",
      "pxtparts.json": "{\n    \"accelerometer\": {\n        \"visual\": {\n            \"image\": \"lis3dh.svg\",\n            \"width\": 96,\n            \"height\": 50,\n            \"pinDistance\": 20,\n            \"pinLocations\": [\n                {\"x\": 8, \"y\": 50},\n                {\"x\": 28, \"y\": 50},\n                {\"x\": 48, \"y\": 50},\n                {\"x\": 68, \"y\": 50},\n                {\"x\": 88, \"y\": 50}\n            ]\n        },\n        \"numberOfPins\": 5,\n        \"instantiation\": {\n            \"kind\": \"singleton\"\n        },\n        \"pinDefinitions\": [\n            {\"target\": \"D1\", \"style\": \"male\", \"orientation\": \"+Y\" },\n            {\"target\": \"SCL\", \"style\": \"male\", \"orientation\": \"+Y\" },\n            {\"target\": \"SDA\", \"style\": \"male\", \"orientation\": \"+Y\" },\n            {\"target\": \"threeVolt\", \"style\": \"male\", \"orientation\": \"+Y\" },\n            {\"target\": \"ground\", \"style\": \"male\", \"orientation\": \"+Y\" }\n        ],\n        \"assembly\": [\n            {\"part\": true },\n            {\"pinIndices\": [4]},\n            {\"pinIndices\": [0]},\n            {\"pinIndices\": [1, 2]},\n            {\"pinIndices\": [3]}\n        ]\n    }\n}",
      "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace input {\n\n    /**\n     * Do something when when a gesture is done (like shaking the board).\n     * @param gesture the type of gesture to track, eg: Gesture.Shake\n     * @param body code to run when gesture is raised\n     */\n    //% help=input/on-gesture\n    //% blockId=device_gesture_event block=\"on |%NAME\"\n    //% parts=\"accelerometer\"\n    //% gesture.fieldEditor=\"gridpicker\"\n    //% gesture.fieldOptions.width=220\n    //% gesture.fieldOptions.columns=3\n    //% weight=92 blockGap=12 shim=input::onGesture\n    function onGesture(gesture: Gesture, body: () => void): void;\n\n    /**\n     * Get the acceleration value in milli-gravitys (when the board is laying flat with the screen up,\n     * x=0, y=0 and z=-1023)\n     * @param dimension TODO\n     */\n    //% help=input/acceleration\n    //% blockId=device_acceleration block=\"acceleration (mg)|%NAME\"\n    //% parts=\"accelerometer\"\n    //% dimension.fieldEditor=\"gridpicker\"\n    //% dimension.fieldOptions.width=180\n    //% dimension.fieldOptions.columns=2\n    //% weight=42 blockGap=8 shim=input::acceleration\n    function acceleration(dimension: Dimension): int32;\n\n    /**\n     * The pitch or roll of the device, rotation along the ``x-axis`` or ``y-axis``, in degrees.\n     * @param kind TODO\n     */\n    //% help=input/rotation\n    //% blockId=device_get_rotation block=\"rotation (°)|%NAME\"\n    //% parts=\"accelerometer\"\n    //% group=\"More\" weight=38 shim=input::rotation\n    function rotation(kind: Rotation): int32;\n\n    /**\n     * Sets the accelerometer sample range in gravities.\n     * @param range a value describe the maximum strengh of acceleration measured\n     */\n    //% help=input/set-accelerometer-range\n    //% blockId=device_set_accelerometer_range block=\"set accelerometer|range %range\"\n    //% weight=5\n    //% parts=\"accelerometer\"\n    //% group=\"More\" weight=15 blockGap=8 shim=input::setAccelerometerRange\n    function setAccelerometerRange(range: AcceleratorRange): void;\n}\n\n// Auto-generated. Do not edit. Really.\n",
      "test.ts": ""
    },
    "music": {
      "README.md": "# music\n\nThe music library.\n\n",
      "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum SoundOutputDestination {\n    //% block=\"pin PWM\"\n    PinPWM = 1,\n    //% block=\"speaker\"\n    Speaker = 0,\n    }\n\n// Auto-generated. Do not edit. Really.\n",
      "melodies.ts": "/*\nThe MIT License (MIT)\n\nCopyright (c) 2013-2016 The MicroPython-on-micro:bit Developers, as listed\nin the accompanying AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n// Melodies from file microbitmusictunes.c https://github.com/bbcmicrobit/MicroPython\n\nenum Sounds {\n    //% block=\"power up\"\n    PowerUp,\n    //% block=\"power down\"\n    PowerDown,\n    //% block=\"jump up\"\n    JumpUp,\n    //% block=\"jump down\"\n    JumpDown,\n    //% block=\"ba ding\"\n    BaDing,\n    //% block=\"wawawawaa\"\n    Wawawawaa,\n    //% block=\"magic wand\"\n    MagicWand,\n    //% block=\"siren\"\n    Siren\n}\n\nnamespace music {\n    let _soundQueue: control.AnimationQueue;\n\n    /**\n     * Get the melody string for a built-in melody.\n     * @param name the note name, eg: Note.C\n     */\n    //% help=music/sounds\n    //% blockId=music_sounds block=\"%name\"\n    //% blockHidden=true\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=285\n    //% name.fieldOptions.columns=3\n    export function sounds(name: Sounds): string {\n        switch (name) {\n            case Sounds.BaDing:\n                return 'b5:1 e6:3';\n            case Sounds.Wawawawaa:\n                return 'e3:3 r:1 d#:3 r:1 d:4 r:1 c#:8';\n            case Sounds.JumpUp:\n                return 'c5:1 d e f g';\n            case Sounds.JumpDown:\n                return 'g5:1 f e d c';\n            case Sounds.PowerUp:\n                return 'g4:1 c5 e g:2 e:1 g:3';\n            case Sounds.PowerDown:\n                return 'g5:1 d# c g4:2 b:1 c5:3';\n            case Sounds.MagicWand:\n                return 'F#6:1-300 G# A# B C7# D# F F# G# A# B:6'; //A#7:1-200 A:1 A#7:1 A:1 A#7:2\n            case Sounds.Siren:\n                return 'a4 d5 a4 d5 a4 d5';\n            default:\n                return '';\n        }\n    }\n\n    function soundQueue(): control.AnimationQueue {\n        if (!_soundQueue) _soundQueue = new control.AnimationQueue();\n        return _soundQueue;\n    }\n\n    /**\n     * Start playing a sound and don't wait for it to finish.\n     * Notes are expressed as a string of characters with this format: NOTE[octave][:duration]\n     * @param sound the melody to play\n     */\n    //% help=music/play-sound\n    //% blockId=music_play_sound block=\"play sound %sound=music_sounds\"\n    //% parts=\"headphone\"\n    //% weight=95 blockGap=8\n    export function playSound(sound: string) {\n        const queue = soundQueue();\n        const melody = new Melody(sound);\n        control.runInParallel(() => {\n            queue.cancel();\n            queue.runUntilDone(() => melody.playNextNote());\n        })\n        pause(1);\n    }\n\n\n    /**\n     * Play a sound and wait until the sound is done.\n     * Notes are expressed as a string of characters with this format: NOTE[octave][:duration]\n     * @param sound the melody to play\n     */\n    //% help=music/play-sound-until-done\n    //% blockId=music_play_sound_until_done block=\"play sound %sound=music_sounds|until done\"\n    //% parts=\"headphone\"\n    //% weight=94 blockGap=8\n    export function playSoundUntilDone(sound: string) {\n        const queue = soundQueue();\n        const melody = new Melody(sound);\n        queue.runUntilDone(() => melody.playNextNote());\n    }\n\n    /**\n     * Stop all sounds from playing.\n     */\n    //% help=music/stop-all-sounds\n    //% blockId=music_stop_all_sounds block=\"stop all sounds\"\n    //% weight=93\n    export function stopAllSounds() {\n        const queue = soundQueue();\n        queue.cancel();\n        music.rest(1);\n    }\n\n    class Melody {\n        static freqTable: number[];\n        notes: string;\n        duration: number;\n        octave: number;\n        pos: number;\n        tempo: number;\n\n        constructor(notes: string) {\n            this.notes = notes;\n            this.duration = 4; //Default duration (Crotchet)\n            this.octave = 4; //Middle octave\n            this.pos = 0;\n            this.tempo = 120; // default tempo\n            // TODO: use HEX literal\n            if (!Melody.freqTable)\n                Melody.freqTable = [31, 33, 35, 37, 39, 41, 44, 46, 49, 52, 55, 58, 62, 65, 69, 73, 78, 82, 87, 92, 98, 104, 110, 117, 123, 131, 139, 147, 156, 165, 175, 185, 196, 208, 220, 233, 247, 262, 277, 294, 311, 330, 349, 370, 392, 415, 440, 466, 494, 523, 554, 587, 622, 659, 698, 740, 784, 831, 880, 932, 988, 1047, 1109, 1175, 1245, 1319, 1397, 1480, 1568, 1661, 1760, 1865, 1976, 2093, 2217, 2349, 2489, 2637, 2794, 2960, 3136, 3322, 3520, 3729, 3951, 4186, 4435, 4699, 4978, 5274, 5588, 5920, 6272, 6645, 7040, 7459, 7902]\n        }\n\n        hasNextNote() {\n            return this.pos < this.notes.length;\n        }\n\n        scanNextNote(): string {\n            // eat space\n            while (this.pos < this.notes.length) {\n                const c = this.notes[this.pos];\n                if (c != ' ' && c != '\\r' && c != '\\n' && c != '\\t')\n                    break;\n                this.pos++;\n            }\n\n            // read note\n            let note = \"\";\n            while (this.pos < this.notes.length) {\n                const c = this.notes[this.pos];\n                if (c == ' ' || c == '\\r' || c == '\\n' || c == '\\t')\n                    break;\n                note += c;\n                this.pos++;\n            }\n            return note;\n        }\n\n        playNextNote(): boolean {\n            let currNote = this.scanNextNote();\n            if (!currNote)\n                return false;\n\n            enum Token {\n                Note = 0,\n                Octave = 1,\n                Beat = 2,\n                Tempo = 3\n            }\n\n            let note: number = 0;\n            let isrest: boolean = false;\n            let token: string = \"\";\n            let tokenKind = Token.Note;\n            const consumeToken = () => {\n                if (token && tokenKind != Token.Note) {\n                    const d = parseInt(token);\n                    switch (tokenKind) {\n                        case Token.Octave: this.octave = d; break;\n                        case Token.Beat: this.duration = Math.max(1, Math.min(16, d)); break;\n                        case Token.Tempo: this.tempo = Math.max(1, d); break;\n                    }\n                    token = \"\";\n                }\n            }\n            for (let i = 0; i < currNote.length; i++) {\n                let noteChar = currNote.charAt(i);\n                switch (noteChar) {\n                    case 'c': case 'C': note = 1; break;\n                    case 'd': case 'D': note = 3; break;\n                    case 'e': case 'E': note = 5; break;\n                    case 'f': case 'F': note = 6; break;\n                    case 'g': case 'G': note = 8; break;\n                    case 'a': case 'A': note = 10; break;\n                    case 'b': case 'B': note = 12; break;\n                    case 'r': case 'R': isrest = true; break;\n                    case '#': note++; break;\n                    case 'b': note--; break;\n                    case ':':\n                        consumeToken();\n                        tokenKind = Token.Beat;\n                        break;\n                    case '-':\n                        consumeToken();\n                        tokenKind = Token.Tempo;\n                        break;\n                    default:\n                        if(tokenKind == Token.Note)\n                            tokenKind = Token.Octave;\n                        token += noteChar;\n                        break;\n                }\n            }\n            consumeToken();\n            let beat = 15000 / this.tempo;\n            if (isrest) {\n                music.rest(this.duration * beat)\n            } else {\n                const keyNumber = note + (12 * (this.octave - 1));\n                const frequency = Melody.freqTable[keyNumber] || 0;\n                music.playTone(frequency, this.duration * beat);\n            }\n\n            return this.hasNextNote();\n        }\n    }\n}",
      "music.cpp": "#include \"pxt.h\"\n\n// There is no DAC on STM32F401\n\n#define NOTE_PAUSE 20\n\nenum class SoundOutputDestination {\n  //% block=\"pin PWM\"\n  PinPWM = 1,\n  //% block=\"speaker\"\n  Speaker = 0,\n};\n\nnamespace music {\n\nSoundOutputDestination soundOutputDestination = SoundOutputDestination::Speaker;\n\n/**\n * Turn the on-board speaker on or off.\n * @param out the destination for sounds generated by the synthesizer\n */\n// weight=2\n// blockId=music_set_output block=\"set output %out\"\n// parts=\"speaker\" blockGap=8 advanced=true\nvoid setOutput(SoundOutputDestination out) {\n  if (out != soundOutputDestination) {\n    soundOutputDestination = out;\n  }\n}\n\n/**\n* Play a tone through the speaker for some amount of time.\n* @param frequency pitch of the tone to play in Hertz (Hz), eg: Note.C\n* @param ms tone duration in milliseconds (ms), eg: BeatFraction.Half\n*/\n//% help=music/play-tone\n//% blockId=music_play_note block=\"play tone|at %note=device_note|for %duration=device_beat\"\n//% parts=\"headphone\" async\n//% blockNamespace=music\n//% weight=76 blockGap=8\nvoid playTone(int frequency, int ms) {\n  auto pitchPin = lookupPin(\n      soundOutputDestination == SoundOutputDestination::Speaker ? PB_8 : PA_8);\n\n  if (frequency <= 0) {\n    pitchPin->setAnalogValue(0);\n  } else {\n    pitchPin->setAnalogValue(512);\n    pitchPin->setAnalogPeriodUs(1000000 / frequency);\n    if (ms > 0) {\n      int d = max(1, ms - NOTE_PAUSE); // allow for short rest\n      int r = max(1, ms - d);\n      fiber_sleep(d);\n      pitchPin->setAnalogValue(0);\n      fiber_sleep(r);\n    }\n  }\n}\n\n} // namespace music\n",
      "music.ts": "enum Note {\n    //% blockIdentity=music.noteFrequency enumval=262\n    C = 262,\n    //% block=C#\n    //% blockIdentity=music.noteFrequency enumval=277\n    CSharp = 277,\n    //% blockIdentity=music.noteFrequency enumval=294\n    D = 294,\n    //% blockIdentity=music.noteFrequency enumval=311\n    Eb = 311,\n    //% blockIdentity=music.noteFrequency enumval=330\n    E = 330,\n    //% blockIdentity=music.noteFrequency enumval=349\n    F = 349,\n    //% block=F#\n    //% blockIdentity=music.noteFrequency enumval=370\n    FSharp = 370,\n    //% blockIdentity=music.noteFrequency enumval=392\n    G = 392,\n    //% block=G#\n    //% blockIdentity=music.noteFrequency enumval=415\n    GSharp = 415,\n    //% blockIdentity=music.noteFrequency enumval=440\n    A = 440,\n    //% blockIdentity=music.noteFrequency enumval=466\n    Bb = 466,\n    //% blockIdentity=music.noteFrequency enumval=494\n    B = 494,\n    //% blockIdentity=music.noteFrequency enumval=131\n    C3 = 131,\n    //% block=C#3\n    //% blockIdentity=music.noteFrequency enumval=139\n    CSharp3 = 139,\n    //% blockIdentity=music.noteFrequency enumval=147\n    D3 = 147,\n    //% blockIdentity=music.noteFrequency enumval=156\n    Eb3 = 156,\n    //% blockIdentity=music.noteFrequency enumval=165\n    E3 = 165,\n    //% blockIdentity=music.noteFrequency enumval=175\n    F3 = 175,\n    //% block=F#3\n    //% blockIdentity=music.noteFrequency enumval=185\n    FSharp3 = 185,\n    //% blockIdentity=music.noteFrequency enumval=196\n    G3 = 196,\n    //% block=G#3\n    //% blockIdentity=music.noteFrequency enumval=208\n    GSharp3 = 208,\n    //% blockIdentity=music.noteFrequency enumval=220\n    A3 = 220,\n    //% blockIdentity=music.noteFrequency enumval=233\n    Bb3 = 233,\n    //% blockIdentity=music.noteFrequency enumval=247\n    B3 = 247,\n    //% blockIdentity=music.noteFrequency enumval=262\n    C4 = 262,\n    //% block=C#4\n    //% blockIdentity=music.noteFrequency enumval=277\n    CSharp4 = 277,\n    //% blockIdentity=music.noteFrequency enumval=294\n    D4 = 294,\n    //% blockIdentity=music.noteFrequency enumval=311\n    Eb4 = 311,\n    //% blockIdentity=music.noteFrequency enumval=330\n    E4 = 330,\n    //% blockIdentity=music.noteFrequency enumval=349\n    F4 = 349,\n    //% block=F#4\n    //% blockIdentity=music.noteFrequency enumval=370\n    FSharp4 = 370,\n    //% blockIdentity=music.noteFrequency enumval=392\n    G4 = 392,\n    //% block=G#4\n    //% blockIdentity=music.noteFrequency enumval=415\n    GSharp4 = 415,\n    //% blockIdentity=music.noteFrequency enumval=440\n    A4 = 440,\n    //% blockIdentity=music.noteFrequency enumval=466\n    Bb4 = 466,\n    //% blockIdentity=music.noteFrequency enumval=494\n    B4 = 494,\n    //% blockIdentity=music.noteFrequency enumval=523\n    C5 = 523,\n    //% block=C#5\n    //% blockIdentity=music.noteFrequency enumval=555\n    CSharp5 = 555,\n    //% blockIdentity=music.noteFrequency enumval=587\n    D5 = 587,\n    //% blockIdentity=music.noteFrequency enumval=622\n    Eb5 = 622,\n    //% blockIdentity=music.noteFrequency enumval=659\n    E5 = 659,\n    //% blockIdentity=music.noteFrequency enumval=698\n    F5 = 698,\n    //% block=F#5\n    //% blockIdentity=music.noteFrequency enumval=740\n    FSharp5 = 740,\n    //% blockIdentity=music.noteFrequency enumval=784\n    G5 = 784,\n    //% block=G#5\n    //% blockIdentity=music.noteFrequency enumval=831\n    GSharp5 = 831,\n    //% blockIdentity=music.noteFrequency enumval=880\n    A5 = 880,\n    //% blockIdentity=music.noteFrequency enumval=932\n    Bb5 = 932,\n    //% blockIdentity=music.noteFrequency enumval=988\n    B5 = 988,\n}\n\nenum BeatFraction {\n    //% block=1\n    Whole = 1,\n    //% block=\"1/2\"\n    Half = 2,\n    //% block=\"1/4\"\n    Quarter = 4,\n    //% block=\"1/8\"\n    Eighth = 8,\n    //% block=\"1/16\"\n    Sixteenth = 16,\n    //% block=\"2\"\n    Double = 32,\n    //% block=\"4\",\n    Breve = 64\n}\n\nnamespace music {\n\n    let beatsPerMinute: number;\n\n    /**\n    * Play a tone.\n    * @param frequency pitch of the tone to play in Hertz (Hz), eg: Note.C\n    */\n    //% help=music/ring-tone\n    //% blockId=music_ring block=\"ring tone|at %note=device_note\"\n    //% parts=\"headphone\" trackArgs=0\n    //% blockNamespace=music inBasicCategory=true\n    //% weight=75 blockGap=8\n    export function ringTone(frequency: number) {\n        playTone(frequency, 0);\n    }\n\n    /**\n    * Rest, or play silence, for some time (in milleseconds).\n    * @param ms rest duration in milliseconds (ms), eg: BeatFraction.Half\n    */\n    //% help=music/rest\n    //% blockId=music_rest block=\"rest|for %duration=device_beat\"\n    //% parts=\"headphone\" trackArgs=0\n    //% blockNamespace=music\n    //% weight=74\n    export function rest(ms: number) {\n        playTone(0, Math.max(ms, 20));\n    }\n\n    function init() {\n        if (!beatsPerMinute) beatsPerMinute = 120;\n    }\n\n    /**\n     * Return the duration of a beat in milliseconds (the beat fraction).\n     * @param fraction the fraction of the current whole note, eg: BeatFraction.Half\n     */\n    //% help=music/beat\n    //% blockId=device_beat block=\"%fraction|beat\"\n    //% weight=9 blockGap=8\n    export function beat(fraction?: BeatFraction): number {\n        init();\n        if (fraction == null) fraction = BeatFraction.Whole;\n        let beat = 60000 / beatsPerMinute;\n        switch (fraction) {\n            case BeatFraction.Half: beat /= 2; break;\n            case BeatFraction.Quarter: beat /= 4; break;\n            case BeatFraction.Eighth: beat /= 8; break;\n            case BeatFraction.Sixteenth: beat /= 16; break;\n            case BeatFraction.Double: beat *= 2; break;\n            case BeatFraction.Breve: beat *= 4; break;\n        }\n        return beat >> 0;\n    }\n\n    /**\n     * Return the tempo in beats per minute (bpm).\n     * Tempo is the speed (bpm = beats per minute) at which notes play. The larger the tempo value, the faster the notes will play.\n     */\n    //% help=music/tempo\n    //% blockId=device_tempo block=\"tempo (bpm)\"\n    //% weight=64\n    export function tempo(): number {\n        init();\n        return beatsPerMinute;\n    }\n\n    /**\n     * Change the tempo up or down by some amount of beats per minute (bpm).\n     * @param bpm The change in beats per minute to the tempo, eg: 20\n     */\n    //% help=music/change-tempo-by weight=37\n    //% blockId=device_change_tempo block=\"change tempo by %value|(bpm)\"\n    //% weight=66 blockGap=8\n    export function changeTempoBy(bpm: number): void {\n        init();\n        setTempo(beatsPerMinute + bpm);\n    }\n\n    /**\n     * Set the tempo a number of beats per minute (bpm).\n     * @param bpm The new tempo in beats per minute, eg: 120\n     */\n    //% help=music/set-tempo\n    //% blockId=device_set_tempo block=\"set tempo to %value|(bpm)\"\n    //% bpm.min=4 bpm.max=400\n    //% weight=65 blockGap=8\n    export function setTempo(bpm: number): void {\n        init();\n        if (bpm > 0) {\n            beatsPerMinute = Math.max(1, bpm >> 0);\n        }\n    }\n}\n",
      "ns.ts": "\n/**\n * Generation of music tones.\n */\n//% color=#D83B01 weight=90 icon=\"\\uf025\"\nnamespace music {\n}",
      "piano.ts": "namespace music {\n    /**\n     * Get the frequency of a note.\n     * @param name the note name, eg: Note.C\n     */\n    //% weight=1 help=music/note-frequency\n    //% blockId=device_note block=\"%note\"\n    //% shim=TD_ID\n    //% color=\"#FFFFFF\" colorSecondary=\"#FFFFFF\" colorTertiary=\"#D83B01\"\n    //% note.fieldEditor=\"note\" note.defl=\"262\"\n    //% note.fieldOptions.decompileLiterals=true\n    //% useEnumVal=1\n    //% weight=10 blockGap=8\n    export function noteFrequency(name: Note): number {\n        return name;\n    }\n}",
      "pxt.json": "{\n    \"name\": \"music\",\n    \"description\": \"The music library\",\n    \"files\": [\n        \"README.md\",\n        \"music.cpp\",\n        \"enums.d.ts\",\n        \"shims.d.ts\",\n        \"melodies.ts\",\n        \"music.ts\",\n        \"piano.ts\",\n        \"ns.ts\",\n        \"speaker.svg\",\n        \"pxtparts.json\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"targetVersions\": {\n        \"target\": \"0.21.27\"\n    }\n}",
      "pxtparts.json": "{\n   \"headphone\": {\n       \"numberOfPins\": 2,\n       \"visual\": {\n           \"image\": \"speaker.svg\",\n           \"width\": 90,\n           \"height\": 100,\n           \"pinDistance\": 15,\n           \"pinLocations\": [\n               {\"x\": 30, \"y\": 0},\n               {\"x\": 60, \"y\": 0}\n           ]\n       },\n       \"pinDefinitions\": [\n           {\"target\": \"ground\", \"style\": \"male\", \"orientation\": \"-Z\"},\n           {\"target\": \"D0\", \"style\": \"male\", \"orientation\": \"-Z\"}\n       ],\n       \"instantiation\": {\n           \"kind\": \"singleton\"\n       },\n       \"assembly\": [\n           {\"part\": true, \"pinIndices\": [0]},\n           {\"pinIndices\": [1]}\n       ]\n   }\n}",
      "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace music {\n\n    /**\n     * Play a tone through the speaker for some amount of time.\n     * @param frequency pitch of the tone to play in Hertz (Hz), eg: Note.C\n     * @param ms tone duration in milliseconds (ms), eg: BeatFraction.Half\n     */\n    //% help=music/play-tone\n    //% blockId=music_play_note block=\"play tone|at %note=device_note|for %duration=device_beat\"\n    //% parts=\"headphone\" async\n    //% blockNamespace=music\n    //% weight=76 blockGap=8 shim=music::playTone\n    function playTone(frequency: int32, ms: int32): void;\n}\n\n// Auto-generated. Do not edit. Really.\n",
      "speaker.svg": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg viewBox=\"0 0 500 500\" xmlns=\"http://www.w3.org/2000/svg\">\n  <g transform=\"matrix(1, 0, 0, 1, -0.00023, -58.230297)\">\n    <ellipse style=\"fill: rgb(70, 70, 70);\" cx=\"250.58\" cy=\"308.81\" rx=\"215\" ry=\"215\"/>\n    <ellipse style=\"fill: rgb(0, 0, 0);\" transform=\"matrix(1, 0, 0, 1.000001, -232.069031, 248.780606)\" cx=\"482.069\" cy=\"198.188\" rx=\"23.028\" ry=\"23.028\"/>\n    <ellipse style=\"fill: rgb(0, 0, 0);\" transform=\"matrix(1, 0, 0, 0.999999, -232.067871, 110.041956)\" cx=\"482.067\" cy=\"198.188\" rx=\"23.028\" ry=\"23.028\"/>\n    <ellipse style=\"fill: rgb(0, 0, 0);\" cx=\"389.12\" cy=\"308.23\" rx=\"23.028\" ry=\"23.028\"/>\n    <ellipse style=\"fill: rgb(0, 0, 0);\" cx=\"110.88\" cy=\"308.23\" rx=\"23.028\" ry=\"23.028\"/>\n    <ellipse style=\"fill: rgb(0, 0, 0);\" cx=\"250\" cy=\"169.393\" rx=\"23.028\" ry=\"23.028\"/>\n    <g transform=\"matrix(1, 0, 0, 1, -0.000009, 0.000015)\">\n      <ellipse style=\"fill: rgb(0, 0, 0);\" cx=\"250\" cy=\"238.513\" rx=\"23.028\" ry=\"23.028\" transform=\"matrix(1.000001, 0, 0, 0.999999, 69.996739, 69.71816)\"/>\n      <ellipse style=\"fill: rgb(0, 0, 0);\" transform=\"matrix(1, 0, 0, 0.999999, -302.064453, 110.043115)\" cx=\"482.064\" cy=\"198.188\" rx=\"23.028\" ry=\"23.028\"/>\n    </g>\n    <g transform=\"matrix(0.866026, 0.5, -0.5, 0.866026, 7.386552, -105.261086)\">\n      <ellipse style=\"fill: rgb(0, 0, 0);\" transform=\"matrix(0.999999, 0, 0, 0.999999, -65.212313, 177.387415)\" cx=\"482.068\" cy=\"198.188\" rx=\"23.028\" ry=\"23.028\"/>\n      <ellipse style=\"fill: rgb(0, 0, 0);\" cx=\"555.975\" cy=\"236.836\" rx=\"23.028\" ry=\"23.028\"/>\n      <ellipse style=\"fill: rgb(0, 0, 0);\" cx=\"277.735\" cy=\"236.836\" rx=\"23.028\" ry=\"23.028\"/>\n      <ellipse style=\"fill: rgb(0, 0, 0);\" cx=\"416.855\" cy=\"97.999\" rx=\"23.028\" ry=\"23.028\"/>\n    </g>\n    <g transform=\"matrix(0.5, 0.866026, -0.866026, 0.5, 246.635941, -171.170502)\">\n      <ellipse style=\"fill: rgb(0, 0, 0);\" transform=\"matrix(0.999999, 0, 0, 0.999999, -65.212313, 177.387415)\" cx=\"482.068\" cy=\"198.188\" rx=\"23.028\" ry=\"23.028\"/>\n      <ellipse style=\"fill: rgb(0, 0, 0);\" cx=\"555.975\" cy=\"236.836\" rx=\"23.028\" ry=\"23.028\"/>\n      <ellipse style=\"fill: rgb(0, 0, 0);\" cx=\"277.735\" cy=\"236.836\" rx=\"23.028\" ry=\"23.028\"/>\n      <ellipse style=\"fill: rgb(0, 0, 0);\" cx=\"416.855\" cy=\"97.999\" rx=\"23.028\" ry=\"23.028\"/>\n    </g>\n    <g transform=\"matrix(-0.5, 0.866026, -0.866026, -0.5, 641.934998, 245.84082)\">\n      <ellipse style=\"fill: rgb(0, 0, 0);\" cx=\"250\" cy=\"238.513\" rx=\"23.028\" ry=\"23.028\" transform=\"matrix(1.000001, 0, 0, 0.999999, 69.996739, 69.71816)\"/>\n      <ellipse style=\"fill: rgb(0, 0, 0);\" transform=\"matrix(1, 0, 0, 0.999999, -302.064453, 110.043115)\" cx=\"482.064\" cy=\"198.188\" rx=\"23.028\" ry=\"23.028\"/>\n    </g>\n    <g transform=\"matrix(-0.500001, -0.866026, 0.866026, -0.500001, 108.063393, 678.85083)\">\n      <ellipse style=\"fill: rgb(0, 0, 0);\" cx=\"250\" cy=\"238.513\" rx=\"23.028\" ry=\"23.028\" transform=\"matrix(1.000001, 0, 0, 0.999999, 69.996739, 69.71816)\"/>\n      <ellipse style=\"fill: rgb(0, 0, 0);\" transform=\"matrix(1, 0, 0, 0.999999, -302.064453, 110.043115)\" cx=\"482.064\" cy=\"198.188\" rx=\"23.028\" ry=\"23.028\"/>\n    </g>\n  </g>\n</svg>\n",
      "test.ts": "for(let i = 1000; i > 0; i -= 50)\n    music.playTone(440, i)\n\nfor(let i = 0; i < 1000; i += 20)\n    music.playTone(440, i)\n"
    },
    "buttons": {
      "README.md": "# buttons\n\nA library to handle 2 buttons A and B.\n",
      "buttons.cpp": "#include \"pxt.h\"\n\n/*\n\nThese button events need CODAL work.\n\n    // % block=\"double click\"\n    DoubleClick = DEVICE_BUTTON_EVT_DOUBLE_CLICK,\n\n    // % block=\"hold\"\n    Hold = DEVICE_BUTTON_EVT_HOLD\n\n*/\n\n/**\n* User interaction on buttons\n*/\nenum class ButtonEvent {\n    //% block=\"click\"\n    Click = DEVICE_BUTTON_EVT_CLICK,\n    //% block=\"long click\"\n    LongClick = DEVICE_BUTTON_EVT_LONG_CLICK,\n    //% block=\"up\"\n    Up = DEVICE_BUTTON_EVT_UP,\n    //% block=\"down\"\n    Down = DEVICE_BUTTON_EVT_DOWN\n};\n\nnamespace pxt {\n//%\nButton *getButtonByPin(int pin, int flags) {\n    auto cpid = DEVICE_ID_FIRST_BUTTON + pin;\n    auto btn = (Button *)lookupComponent(cpid);\n    if (btn == NULL) {\n        auto pull = PullMode::None;\n        if ((flags & 0xf0) == 0x10)\n            pull = PullMode::Down;\n        else if ((flags & 0xf0) == 0x20)\n            pull = PullMode::Up;\n        else if ((flags & 0xf0) == 0x20)\n            pull = PullMode::None;\n        else\n            target_panic(42);\n        btn = new Button(*lookupPin(pin), cpid, DEVICE_BUTTON_ALL_EVENTS,\n                         (ButtonPolarity)(flags & 0xf), pull);\n    }\n    return btn;\n}\n\n//%\nButton *getButtonByPinCfg(int key, int flags) {\n    int pin = getConfig(key);\n    if (pin == -1) target_panic(42);\n    return getButtonByPin(pin, flags);\n}\n\n// This is for A, B, and AB\n//%\nAbstractButton *getButton(int id) {\n    int pa = getConfig(CFG_PIN_BTN_A);\n    int pb = getConfig(CFG_PIN_BTN_B);\n    int flags = getConfig(CFG_DEFAULT_BUTTON_MODE, BUTTON_ACTIVE_LOW_PULL_UP);\n    if (id == 0)\n        return getButtonByPin(pa, flags);\n    else if (id == 1)\n        return getButtonByPin(pb, flags);\n    else if (id == 2)\n        return getMultiButton(DEVICE_ID_BUTTON_AB, pa, pb, flags);\n    else {\n        target_panic(42);\n        return NULL;\n    }\n}\n\nMultiButton *getMultiButton(int id, int pinA, int pinB, int flags) {\n    auto btn = (MultiButton *)lookupComponent(id);\n    if (btn == NULL) {\n        auto bA = getButtonByPin(pinA, flags);\n        auto bB = getButtonByPin(pinB, flags);\n        btn = new codal::MultiButton(bA->id, bB->id, id);\n\n        // A user has registered to receive events from the buttonAB multibutton.\n        // Disable click events from being generated by ButtonA and ButtonB, and defer the\n        // control of this to the multibutton handler.\n        //\n        // This way, buttons look independent unless a buttonAB is requested, at which\n        // point button A+B clicks can be correclty handled without breaking\n        // causal ordering.\n        bA->setEventConfiguration(DEVICE_BUTTON_SIMPLE_EVENTS);\n        bB->setEventConfiguration(DEVICE_BUTTON_SIMPLE_EVENTS);\n        btn->setEventConfiguration(DEVICE_BUTTON_ALL_EVENTS);\n    }\n    return btn;\n}\n}\n\n\nnamespace DigitalInOutPinMethods {\n\n/**\n * Get the push button (connected to GND) for given pin\n */\n//%\nButton_ pushButton(DigitalInOutPin pin) {\n    return pxt::getButtonByPin(pin->name, BUTTON_ACTIVE_LOW_PULL_UP);\n}\n\n}\n\n\n//% noRefCounting fixedInstances\nnamespace ButtonMethods {\n/**\t\n * Do something when a button (`A`, `B` or both `A` + `B`) is clicked, double clicked, etc...\t\n * @param button the button that needs to be clicked or used\t\n * @param event the kind of button gesture that needs to be detected\t\n * @param body code to run when the event is raised\t\n */\t\n//% help=input/button/on-event\t\n//% blockId=buttonEvent block=\"on %button|%event\"\t\n//% parts=\"buttons\"\t\n//% blockNamespace=input\t\n//% button.fieldEditor=\"gridpicker\"\t\n//% button.fieldOptions.width=220\t\n//% button.fieldOptions.columns=3\t\n//% weight=96 blockGap=12\t\n//% trackArgs=0\t\nvoid onEvent(Button_ button, ButtonEvent ev, Action body) {\t\n    registerWithDal(button->id, (int)ev, body);\t\n}    \n\n/**\n * Check if a button is pressed or not.\n * @param button the button to query the request\n */\n//% help=input/button/is-pressed\n//% block=\"%button|is pressed\"\n//% blockId=buttonIsPressed\n//% parts=\"buttons\"\n//% blockNamespace=input\n//% button.fieldEditor=\"gridpicker\"\n//% button.fieldOptions.width=220\n//% button.fieldOptions.columns=3\n//% weight=50 blockGap=8\n//% trackArgs=0\nbool isPressed(Button_ button) {\n    return button->isPressed();\n}\n\n/**\n * See if the button was pressed again since the last time you checked.\n * @param button the button to query the request\n */\n//% help=input/button/was-pressed\n//% block=\"%button|was pressed\"\n//% blockId=buttonWasPressed\n//% parts=\"buttons\"\n//% blockNamespace=input\n//% button.fieldEditor=\"gridpicker\"\n//% button.fieldOptions.width=220\n//% button.fieldOptions.columns=3\n//% group=\"More\" weight=46 blockGap=8\n//% trackArgs=0\nbool wasPressed(Button_ button) {\n    return button->wasPressed();\n}\n\n/**\n* Gets the component identifier for the buton\n*/\n//%\nint id(Button_ button) {\n    return button->id;\n}\n\n}\n",
      "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    /**\n     * User interaction on buttons\n     */\n\n    declare const enum ButtonEvent {\n    //% block=\"click\"\n    Click = 3,  // DEVICE_BUTTON_EVT_CLICK\n    //% block=\"long click\"\n    LongClick = 4,  // DEVICE_BUTTON_EVT_LONG_CLICK\n    //% block=\"up\"\n    Up = 2,  // DEVICE_BUTTON_EVT_UP\n    //% block=\"down\"\n    Down = 1,  // DEVICE_BUTTON_EVT_DOWN\n    }\n\n// Auto-generated. Do not edit. Really.\n",
      "pxt.json": "{\n    \"name\": \"buttons\",\n    \"description\": \"Button A and B drivers\",\n    \"files\": [\n        \"README.md\",\n        \"buttons.cpp\",\n        \"shims.d.ts\",\n        \"enums.d.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"targetVersions\": {\n        \"target\": \"0.21.27\"\n    }\n}",
      "shims.d.ts": "// Auto-generated. Do not edit.\n\n\ndeclare interface DigitalInOutPin {\n    /**\n     * Get the push button (connected to GND) for given pin\n     */\n    //% shim=DigitalInOutPinMethods::pushButton\n    pushButton(): Button;\n}\n\n\n\n    //% noRefCounting fixedInstances\ndeclare interface Button {\n    /**\t\n     * Do something when a button (`A`, `B` or both `A` + `B`) is clicked, double clicked, etc...\t\n     * @param button the button that needs to be clicked or used\t\n     * @param event the kind of button gesture that needs to be detected\t\n     * @param body code to run when the event is raised\t\n     */\n    //% help=input/button/on-event\t\n    //% blockId=buttonEvent block=\"on %button|%event\"\t\n    //% parts=\"buttons\"\t\n    //% blockNamespace=input\t\n    //% button.fieldEditor=\"gridpicker\"\t\n    //% button.fieldOptions.width=220\t\n    //% button.fieldOptions.columns=3\t\n    //% weight=96 blockGap=12\t\n    //% trackArgs=0 shim=ButtonMethods::onEvent\n    onEvent(ev: ButtonEvent, body: () => void): void;\n\n    /**\n     * Check if a button is pressed or not.\n     * @param button the button to query the request\n     */\n    //% help=input/button/is-pressed\n    //% block=\"%button|is pressed\"\n    //% blockId=buttonIsPressed\n    //% parts=\"buttons\"\n    //% blockNamespace=input\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.width=220\n    //% button.fieldOptions.columns=3\n    //% weight=50 blockGap=8\n    //% trackArgs=0 shim=ButtonMethods::isPressed\n    isPressed(): boolean;\n\n    /**\n     * See if the button was pressed again since the last time you checked.\n     * @param button the button to query the request\n     */\n    //% help=input/button/was-pressed\n    //% block=\"%button|was pressed\"\n    //% blockId=buttonWasPressed\n    //% parts=\"buttons\"\n    //% blockNamespace=input\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.width=220\n    //% button.fieldOptions.columns=3\n    //% group=\"More\" weight=46 blockGap=8\n    //% trackArgs=0 shim=ButtonMethods::wasPressed\n    wasPressed(): boolean;\n\n    /**\n     * Gets the component identifier for the buton\n     */\n    //% shim=ButtonMethods::id\n    id(): int32;\n}\n\n// Auto-generated. Do not edit. Really.\n",
      "test.ts": ""
    },
    "screen": {
      "fieldeditors.ts": "/**\n * Image manipulation blocks\n */\n//% weight=70 icon=\"\\uf03e\" color=\"#0E563B\"\n//% advanced=true\nnamespace images {\n    //% blockId=screen_image_picker block=\"%img\"\n    //% shim=TD_ID\n    //% img.fieldEditor=\"sprite\"\n    //% img.fieldOptions.taggedTemplate=\"img\"\n    //% img.fieldOptions.decompileIndirectFixedInstances=\"true\"\n    //% weight=100 group=\"Create\"\n    export function _spriteImage(img: Image) {\n        return img\n    }\n\n    //% blockId=background_image_picker block=\"%img\"\n    //% shim=TD_ID\n    //% img.fieldEditor=\"sprite\"\n    //% img.fieldOptions.taggedTemplate=\"img\"\n    //% img.fieldOptions.decompileIndirectFixedInstances=\"true\"\n    //% img.fieldOptions.sizes=\"-1,-1\"\n    //% weight=100 group=\"Create\"\n    //% blockHidden=1\n    export function _screenImage(img: Image) {\n        return img\n    }\n\n    //% blockId=tilemap_image_picker block=\"%img\"\n    //% shim=TD_ID\n    //% img.fieldEditor=\"sprite\"\n    //% img.fieldOptions.taggedTemplate=\"img\"\n    //% img.fieldOptions.decompileIndirectFixedInstances=\"true\"\n    //% img.fieldOptions.sizes=\"10,8;16,16;32,32;48,48;64,64;16,32;32,48;32,8;64,8\"\n    //% weight=100 group=\"Create\"\n    //% blockHidden=1\n    export function _tileMapImage(img: Image) {\n        return img\n    }\n\n    /**\n     * An image\n     * @param image the image\n     */\n    //% blockId=image_picker block=\"%image\" shim=TD_ID\n    //% image.fieldEditor=\"images\"\n    //% image.fieldOptions.columns=6\n    //% image.fieldOptions.width=600\n    //% weight=0 group=\"Create\"\n    export function _image(image: Image): Image {\n        return image;\n    }\n\n    //% blockId=colorindexpicker block=\"%index\" blockHidden=true shim=TD_ID\n    //% index.fieldEditor=\"colornumber\"\n    //% index.fieldOptions.valueMode=\"index\"\n    //% index.fieldOptions.decompileLiterals=\"true\"\n    export function __colorIndexPicker(index: number) {\n        return index;\n    }\n}",
      "frame.ts": "namespace control.__screen {\n    let __update: () => void\n    let __updated = false;\n\n    export function update() {\n        if (__update)\n            __update()\n        __updated = true\n    }\n\n    export function setupUpdate(update: () => void) {\n        __updated = true;\n        __update = update;\n        update()\n    }\n\n    // low frequency fallback screen refresh\n    control.runInParallel(() => {\n        while (true) {\n            __updated = false\n            pause(200)\n            if (!__updated) {\n                __screen.update();\n                __updated = true\n            }\n        }\n    })\n}\n",
      "image.cpp": "#include \"pxt.h\"\n\n#if IMAGE_BITS == 1\n// OK\n#elif IMAGE_BITS == 4\n// OK\n#else\n#error \"Invalid IMAGE_BITS\"\n#endif\n\n#define XX(v) (int)(((int16_t)(v)))\n#define YY(v) (int)(((int16_t)(((int32_t)(v)) >> 16)))\n\nnamespace pxt {\n\nPXT_VTABLE_BEGIN(RefImage, 0, 0)\nPXT_VTABLE_END\n\nvoid RefImage::destroy(RefImage *t) {\n    decrRC(t->buffer());\n}\n\nvoid RefImage::print(RefImage *t) {\n    DMESG(\"RefImage %p r=%d size=%d x %d\", t, t->refcnt, t->width(), t->height());\n}\n\nint RefImage::width() {\n    return data()[1];\n}\n\nint RefImage::wordHeight() {\n    if (bpp() == 1)\n        target_panic(900);\n    return ((data()[2] * bpp() + 31) >> 5);\n}\n\nint RefImage::byteHeight() {\n    if (bpp() == 1)\n        return (data()[2] + 7) >> 3;\n    else if (bpp() == 4)\n        return ((data()[2] * 4 + 31) >> 5) << 2;\n    else {\n        target_panic(900);\n        return -1;\n    }\n}\n\nint RefImage::bpp() {\n    return data()[0] & 0xf;\n}\n\nint RefImage::height() {\n    return data()[2];\n}\n\nvoid RefImage::makeWritable() {\n    if (hasBuffer()) {\n        if (buffer()->isReadOnly()) {\n            auto b = mkBuffer(data(), length());\n            decrRC(buffer());\n            _buffer = (uintptr_t)b;\n        }\n    } else {\n        _buffer |= 2;\n    }\n}\n\nuint8_t *RefImage::pix(int x, int y) {\n    uint8_t *d = &data()[4 + byteHeight() * x];\n    if (y) {\n        if (bpp() == 1)\n            d += y >> 3;\n        else if (bpp() == 4)\n            d += y >> 1;\n    }\n    return d;\n}\n\nuint8_t RefImage::fillMask(color c) {\n    return this->bpp() == 1 ? (c & 1) * 0xff : 0x11 * (c & 0xf);\n}\n\nbool RefImage::inRange(int x, int y) {\n    return 0 <= x && x < width() && 0 <= y && y < height();\n}\n\nvoid RefImage::clamp(int *x, int *y) {\n    *x = min(max(*x, 0), width() - 1);\n    *y = min(max(*y, 0), height() - 1);\n}\n\nRefImage::RefImage(BoxedBuffer *buf) : PXT_VTABLE_INIT(RefImage), _buffer((uintptr_t)buf) {\n    incrRC(buf);\n}\nRefImage::RefImage(uint32_t sz) : PXT_VTABLE_INIT(RefImage), _buffer((sz << 2) | 3) {}\n\nstatic inline int byteSize(int w, int h, int bpp) {\n    if (bpp == 1)\n        return 4 + ((h + 7) >> 3) * w;\n    else\n        return 4 + (((h * 4 + 31) / 32) * 4) * w;\n}\n\nImage_ mkImage(int width, int height, int bpp) {\n    if (width < 0 || height < 0 || width > 255 || height > 255)\n        return NULL;\n    if (bpp != 1 && bpp != 4)\n        return NULL;\n    uint32_t sz = byteSize(width, height, bpp);\n    Image_ r = new (::operator new(sizeof(RefImage) + sz)) RefImage(sz);\n    auto d = r->data();\n    d[0] = 0xe0 | bpp;\n    d[1] = width;\n    d[2] = height;\n    d[3] = 0;\n    MEMDBG(\"mkImage: %d X %d => %p\", width, height, r);\n    return r;\n}\n\nbool isValidImage(Buffer buf) {\n    if (!buf || buf->length < 5)\n        return false;\n\n    if (buf->data[0] != 0xe1 && buf->data[0] != 0xe4)\n        return false;\n\n    int sz = byteSize(buf->data[1], buf->data[2], buf->data[0] & 0xf);\n    if (sz != (int)buf->length)\n        return false;\n\n    return true;\n}\n\n} // namespace pxt\n\nnamespace ImageMethods {\n\n/**\n * Get the width of the image\n */\n//% property\nint width(Image_ img) {\n    return img->width();\n}\n\n/**\n * Get the height of the image\n */\n//% property\nint height(Image_ img) {\n    return img->height();\n}\n\n/**\n * True iff the image is monochromatic (black and white)\n */\n//% property\nbool isMono(Image_ img) {\n    return img->bpp() == 1;\n}\n\n/**\n * Sets all pixels in the current image from the other image, which has to be of the same size and\n * bpp.\n */\n//%\nvoid copyFrom(Image_ img, Image_ from) {\n    if (img->width() != from->width() || img->height() != from->height() ||\n        img->bpp() != from->bpp())\n        return;\n    img->makeWritable();\n    memcpy(img->pix(), from->pix(), from->pixLength());\n}\n\nstatic inline void setCore(Image_ img, int x, int y, int c) {\n    auto ptr = img->pix(x, y);\n    if (img->bpp() == 1) {\n        uint8_t mask = 0x01 << (y & 7);\n        if (c)\n            *ptr |= mask;\n        else\n            *ptr &= ~mask;\n    } else if (img->bpp() == 4) {\n        if (y & 1)\n            *ptr = (*ptr & 0x0f) | (c << 4);\n        else\n            *ptr = (*ptr & 0xf0) | (c & 0xf);\n    }\n}\n\nstatic inline int getCore(Image_ img, int x, int y) {\n    auto ptr = img->pix(x, y);\n    if (img->bpp() == 1) {\n        uint8_t mask = 0x01 << (y & 7);\n        return (*ptr & mask) ? 1 : 0;\n    } else if (img->bpp() == 4) {\n        if (y & 1)\n            return *ptr >> 4;\n        else\n            return *ptr & 0x0f;\n    }\n    return 0;\n}\n\n/**\n * Set pixel color\n */\n//%\nvoid setPixel(Image_ img, int x, int y, int c) {\n    if (!img->inRange(x, y))\n        return;\n    img->makeWritable();\n    setCore(img, x, y, c);\n}\n\n/**\n * Get a pixel color\n */\n//%\nint getPixel(Image_ img, int x, int y) {\n    if (!img->inRange(x, y))\n        return 0;\n    return getCore(img, x, y);\n}\n\nvoid fillRect(Image_ img, int x, int y, int w, int h, int c);\n\n/**\n * Fill entire image with a given color\n */\n//%\nvoid fill(Image_ img, int c) {\n    if (c && img->hasPadding()) {\n        fillRect(img, 0, 0, img->width(), img->height(), c);\n        return;\n    }\n    img->makeWritable();\n    memset(img->pix(), img->fillMask(c), img->pixLength());\n}\n\nvoid fillRect(Image_ img, int x, int y, int w, int h, int c) {\n    if (w == 0 || h == 0 || x >= img->width() || y >= img->height())\n        return;\n\n    int x2 = x + w - 1;\n    int y2 = y + h - 1;\n\n    if (x2 < 0 || y2 < 0)\n        return;\n\n    img->clamp(&x2, &y2);\n    img->clamp(&x, &y);\n    w = x2 - x + 1;\n    h = y2 - y + 1;\n\n    if (!img->hasPadding() && x == 0 && y == 0 && w == img->width() && h == img->height()) {\n        fill(img, c);\n        return;\n    }\n\n    img->makeWritable();\n\n    auto bh = img->byteHeight();\n    uint8_t f = img->fillMask(c);\n\n    uint8_t *p = img->pix(x, y);\n    while (w-- > 0) {\n        if (img->bpp() == 1) {\n            auto ptr = p;\n            unsigned mask = 0x01 << (y & 7);\n\n            for (int i = 0; i < h; ++i) {\n                if (mask == 0x100) {\n                    if (h - i >= 8) {\n                        *++ptr = f;\n                        i += 7;\n                        continue;\n                    } else {\n                        mask = 0x01;\n                        ++ptr;\n                    }\n                }\n                if (c)\n                    *ptr |= mask;\n                else\n                    *ptr &= ~mask;\n                mask <<= 1;\n            }\n\n        } else if (img->bpp() == 4) {\n            auto ptr = p;\n            unsigned mask = 0x0f;\n            if (y & 1)\n                mask <<= 4;\n\n            for (int i = 0; i < h; ++i) {\n                if (mask == 0xf00) {\n                    if (h - i >= 2) {\n                        *++ptr = f;\n                        i++;\n                        continue;\n                    } else {\n                        mask = 0x0f;\n                        ptr++;\n                    }\n                }\n                *ptr = (*ptr & ~mask) | (f & mask);\n                mask <<= 4;\n            }\n        }\n        p += bh;\n    }\n}\n\n//%\nvoid _fillRect(Image_ img, int xy, int wh, int c) {\n    fillRect(img, XX(xy), YY(xy), XX(wh), YY(wh), c);\n}\n\n/**\n * Return a copy of the current image\n */\n//%\nImage_ clone(Image_ img) {\n    uint32_t sz = img->length();\n    Image_ r = new (::operator new(sizeof(RefImage) + sz)) RefImage(sz);\n    memcpy(r->data(), img->data(), img->length());\n    MEMDBG(\"mkImageClone: %d X %d => %p\", img->width(), img->height(), r);\n    return r;\n}\n\n/**\n * Flips (mirrors) pixels horizontally in the current image\n */\n//%\nvoid flipX(Image_ img) {\n    img->makeWritable();\n\n    int bh = img->byteHeight();\n    auto a = img->pix();\n    auto b = img->pix(img->width() - 1, 0);\n\n    uint8_t tmp[bh];\n\n    while (a < b) {\n        memcpy(tmp, a, bh);\n        memcpy(a, b, bh);\n        memcpy(b, tmp, bh);\n        a += bh;\n        b -= bh;\n    }\n}\n\n/**\n * Flips (mirrors) pixels vertically in the current image\n */\n//%\nvoid flipY(Image_ img) {\n    img->makeWritable();\n\n    // this is quite slow - for small 16x16 sprite it will take in the order of 1ms\n    // something faster requires quite a bit of bit tweaking, especially for mono images\n    for (int i = 0; i < img->width(); ++i) {\n        int a = 0;\n        int b = img->height() - 1;\n        while (a < b) {\n            int tmp = getCore(img, i, a);\n            setCore(img, i, a, getCore(img, i, b));\n            setCore(img, i, b, tmp);\n            a++;\n            b--;\n        }\n    }\n}\n\n/**\n * Returns a transposed image (with X/Y swapped)\n */\n//%\nImage_ transposed(Image_ img) {\n    img->makeWritable();\n    Image_ r = mkImage(img->height(), img->width(), img->bpp());\n\n    // this is quite slow\n    for (int i = 0; i < img->width(); ++i) {\n        for (int j = 0; j < img->height(); ++i) {\n            setCore(r, j, i, getCore(img, i, j));\n        }\n    }\n\n    return r;\n}\n\n/**\n * Every pixel in image is moved by (dx,dy)\n */\n//%\nvoid scroll(Image_ img, int dx, int dy) {\n    img->makeWritable();\n    auto bh = img->byteHeight();\n    auto w = img->width();\n    if (dx < 0) {\n        dx = -dx;\n        if (dx < w)\n            memmove(img->pix(), img->pix(dx, 0), (w - dx) * bh);\n        else\n            dx = w;\n        memset(img->pix(w - dx, 0), 0, dx * bh);\n    } else if (dx > 0) {\n        if (dx < w)\n            memmove(img->pix(dx, 0), img->pix(), (w - dx) * bh);\n        else\n            dx = w;\n        memset(img->pix(), 0, dx * bh);\n    }\n    // TODO implement dy\n}\n\nconst uint8_t bitdouble[] = {0x00, 0x03, 0x0c, 0x0f, 0x30, 0x33, 0x3c, 0x3f,\n                             0xc0, 0xc3, 0xcc, 0xcf, 0xf0, 0xf3, 0xfc, 0xff};\nconst uint8_t nibdouble[] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,\n                             0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};\n\n/**\n * Stretches the image horizontally by 100%\n */\n//%\nImage_ doubledX(Image_ img) {\n    if (img->width() > 126)\n        return NULL;\n\n    Image_ r = mkImage(img->width() * 2, img->height(), img->bpp());\n    auto src = img->pix();\n    auto dst = r->pix();\n    auto w = img->width();\n    auto bh = img->byteHeight();\n\n    for (int i = 0; i < w; ++i) {\n        memcpy(dst, src, bh);\n        dst += bh;\n        memcpy(dst, src, bh);\n        dst += bh;\n\n        src += bh;\n    }\n\n    return r;\n}\n\n/**\n * Stretches the image vertically by 100%\n */\n//%\nImage_ doubledY(Image_ img) {\n    if (img->height() > 126)\n        return NULL;\n\n    Image_ r = mkImage(img->width(), img->height() * 2, img->bpp());\n    auto src = img->pix();\n    auto dst = r->pix();\n\n    auto w = img->width();\n    auto bh = r->byteHeight();\n    auto dbl = img->bpp() == 1 ? bitdouble : nibdouble;\n\n    for (int i = 0; i < w; ++i) {\n        for (int j = 0; j < bh; j += 2) {\n            *dst++ = dbl[*src & 0xf];\n            if (j != bh - 1)\n                *dst++ = dbl[*src >> 4];\n            src++;\n        }\n    }\n\n    return r;\n}\n\n/**\n * Replaces one color in an image with another\n */\n//%\nvoid replace(Image_ img, int from, int to) {\n    if (img->bpp() != 4)\n        return;\n    to &= 0xf;\n    if (from == to)\n        return;\n\n    // avoid bleeding 'to' color into the overflow areas of the picture\n    if (from == 0 && img->hasPadding()) {\n        for (int i = 0; i < img->height(); ++i)\n            for (int j = 0; j < img->width(); ++j)\n                if (getCore(img, j, i) == from)\n                    setCore(img, j, i, to);\n        return;\n    }\n\n    auto ptr = img->pix();\n    auto len = img->pixLength();\n    while (len--) {\n        auto b = *ptr;\n        if ((b & 0xf) == from)\n            b = (b & 0xf0) | to;\n        if ((b >> 4) == from)\n            b = (to << 4) | (b & 0xf);\n        *ptr++ = b;\n    }\n}\n\n/**\n * Stretches the image in both directions by 100%\n */\n//%\nImage_ doubled(Image_ img) {\n    Image_ tmp = doubledX(img);\n    Image_ r = doubledY(tmp);\n    decrRC(tmp);\n    return r;\n}\n\nbool drawImageCore(Image_ img, Image_ from, int x, int y, int color) {\n    auto w = from->width();\n    auto h = from->height();\n    auto sh = img->height();\n    auto sw = img->width();\n\n    if (x + w <= 0)\n        return false;\n    if (x >= sw)\n        return false;\n    if (y + h <= 0)\n        return false;\n    if (y >= sh)\n        return false;\n\n    auto len = y < 0 ? min(sh, h + y) : min(sh - y, h);\n    auto tbp = img->bpp();\n    auto fbp = from->bpp();\n    auto y0 = y;\n\n    if (color == -2 && x == 0 && y == 0 && tbp == fbp && w == sw && h == sh) {\n        copyFrom(img, from);\n        return false;\n    }\n\n    //DMESG(\"drawIMG(%d,%d) at (%d,%d) w=%d bh=%d len=%d\", \n    //    w,h,x, y, img->width(), img->byteHeight(), len );\n\n    auto fromH = from->byteHeight();\n    auto imgH = img->byteHeight();\n    auto fromBase = from->pix();\n    auto imgBase = img->pix(0, y);\n\n    #define LOOPHD for (int xx = 0; xx < w; ++xx, ++x) if (0 <= x && x < sw)\n\n\n    if (tbp == 4 && fbp == 4) {\n        auto wordH = fromH >> 2;\n        LOOPHD {\n                y = y0;\n\n                auto fdata = (uint32_t*)fromBase + wordH * xx;\n                auto tdata = imgBase + imgH * x;\n\n                //DMESG(\"%d,%d xx=%d/%d - %p (%p) -- %d\",x,y,xx,w,tdata,img->pix(),\n                //    (uint8_t*)fdata - from->pix());\n\n                auto cnt = wordH;\n                auto bot = min(sh, y + h);\n\n                #define COLS(s) ((v >> (s)) & 0xf)\n                #define COL(s) COLS(s)\n                \n                #define STEPA(s)  \\\n                    if (COL(s) && 0 <= y && y < bot) SETLOW(s); \\\n                    y++; \n                #define STEPB(s)  \\\n                    if (COL(s) && 0 <= y && y < bot) SETHIGH(s); \\\n                    y++; tdata++;\n                 #define STEPAQ(s)  \\\n                    if (COL(s)) SETLOW(s); \n                #define STEPBQ(s)  \\\n                    if (COL(s)) SETHIGH(s); \\\n                    tdata++;\n\n                // perf: expanded version 5% faster\n                #define ORDER(A,B) A(0); B(4); A(8); B(12); A(16); B(20); A(24); B(28)\n                //#define ORDER(A,B) for (int k = 0; k < 32; k += 8) { A(k); B(4+k); }\n                #define LOOP(A,B,xbot) while (cnt--) { \\\n                            auto v = *fdata++; \\\n                            if (0 <= y && y <= xbot - 8) { \\\n                                ORDER(A ## Q,  B ## Q); \\\n                                y += 8; \\\n                            } else { \\\n                                ORDER(A, B); \\\n                            } \\\n                        }\n                #define LOOPS(xbot) if (y & 1) \\\n                        LOOP(STEPB, STEPA, xbot) \\\n                    else \\\n                        LOOP(STEPA, STEPB, xbot)\n\n                if (color >= 0) {\n                #define SETHIGH(s) *tdata = (*tdata & 0x0f) | ((COLS(s)) << 4)\n                #define SETLOW(s) *tdata = (*tdata & 0xf0) | COLS(s)\n                    LOOPS(sh)\n                } else if (color == -2) {\n                    #undef COL\n                    #define COL(s) 1\n                    LOOPS(bot)\n                } else {\n                    #undef COL\n                    #define COL(s) COLS(s)\n                    #undef SETHIGH\n                    #define SETHIGH(s) if(*tdata & 0xf0) return true\n                    #undef SETLOW\n                    #define SETLOW(s) if(*tdata & 0x0f) return true\n                    LOOPS(sh)\n                }\n    } }\n    else if (tbp == 1 && fbp == 1) {\n        auto left = img->pix() - imgBase;\n        auto right = img->pix(0, img->height() - 1) - imgBase;\n        LOOPHD {\n                y = y0;\n\n\n                auto data = fromBase + fromH * xx;\n                auto off = imgBase + imgH * x;\n                auto off0 = off + left;\n                auto off1 = off + right;\n\n                int shift = (y & 7);\n\n                int y1 = y + h + (y & 7);\n                int prev = 0;\n\n                while (y < y1 - 8) {\n                    int curr = *data++ << shift;\n                    if (off0 <= off && off <= off1) {\n                        uint8_t v = (curr >> 0) | (prev >> 8);\n\n                        if (color == -1) {\n                            if (*off & v)\n                                return true;\n                        } else {\n                            *off |= v;\n                        }\n                    }\n                    off++;\n                    prev = curr;\n                    y += 8;\n                }\n\n                int left = y1 - y; \n                if (left > 0) {\n                    int curr = *data << shift;\n                    if (off0 <= off && off <= off1) {\n                        uint8_t v = ((curr >> 0) | (prev >> 8)) & (0xff >> (8 - left));\n                        if (color == -1) {\n                            if (*off & v)\n                                return true;\n                        } else {\n                            *off |= v;\n                        }\n                    }\n                }\n        }\n        }\n        else if (tbp == 4 && fbp == 1)  {\n            if (y < 0) {\n                fromBase = from->pix(0, -y);\n                imgBase = img->pix();\n            }\n                // icon mode\n            LOOPHD {\n                auto fdata = fromBase + fromH * xx;\n                auto tdata = imgBase + imgH * x;\n\n                unsigned mask = 0x01;\n                auto v = *fdata++;\n                int off = (y & 1) ? 1 : 0;\n                if (y < 0) {\n                    mask <<= -y & 7;\n                    off = 0;\n                }\n                for (int i = off; i < len+off; ++i) {\n                    if (mask == 0x100) {\n                        mask = 0x01;\n                        v = *fdata++;\n                    }\n                    if (v & mask) {\n                        if (i & 1)\n                            *tdata = (*tdata & 0x0f) | (color << 4);\n                        else\n                            *tdata = (*tdata & 0xf0) | color;\n                    }\n                    mask <<= 1;\n                    if (i & 1)\n                        tdata++;\n                }\n            }\n        }\n\n    return false;\n}\n\n/**\n * Draw given image on the current image\n */\n//%\nvoid drawImage(Image_ img, Image_ from, int x, int y) {\n    img->makeWritable();\n    if (img->bpp() == 4 && from->bpp() == 4) {\n        drawImageCore(img, from, x, y, -2);\n    } else {\n        fillRect(img, x, y, from->width(), from->height(), 0);\n        drawImageCore(img, from, x, y, 0);\n    }\n}\n\n/**\n * Draw given image with transparent background on the current image\n */\n//%\nvoid drawTransparentImage(Image_ img, Image_ from, int x, int y) {\n    img->makeWritable();\n    drawImageCore(img, from, x, y, 0);\n}\n\n/**\n * Check if the current image \"collides\" with another\n */\n//%\nbool overlapsWith(Image_ img, Image_ other, int x, int y) {\n    return drawImageCore(img, other, x, y, -1);\n}\n\n// Image_ format:\n//  byte 0: magic 0xe4 - 4 bit color; 0xe1 is monochromatic\n//  byte 1: width in pixels\n//  byte 2: height in pixels\n//  byte 3: padding (should be zero)\n//  byte 4...N: data 4 bits per pixels, high order nibble printed first, lines aligned to 32 bit\n//  words byte 4...N: data 1 bit per pixels, high order bit printed first, lines aligned to byte\n\n//%\nvoid _drawIcon(Image_ img, Buffer icon, int xy, int c) {\n    if (!isValidImage(icon) || icon->data[0] != 0xe1)\n        return;\n\n    img->makeWritable();\n    auto ii = new RefImage(icon);\n    drawImageCore(img, ii, XX(xy), YY(xy), c);\n    decrRC(ii);\n}\n\nstatic void drawLineLow(Image_ img, int x0, int y0, int x1, int y1, int c) {\n    int dx = x1 - x0;\n    int dy = y1 - y0;\n    int yi = 1;\n    if (dy < 0) {\n        yi = -1;\n        dy = -dy;\n    }\n    int D = 2 * dy - dx;\n    dx <<= 1;\n    dy <<= 1;\n    int y = y0;\n    for (int x = x0; x <= x1; ++x) {\n        setCore(img, x, y, c);\n        if (D > 0) {\n            y += yi;\n            D -= dx;\n        }\n        D += dy;\n    }\n}\n\nstatic void drawLineHigh(Image_ img, int x0, int y0, int x1, int y1, int c) {\n    int dx = x1 - x0;\n    int dy = y1 - y0;\n    int xi = 1;\n    if (dx < 0) {\n        xi = -1;\n        dx = -dx;\n    }\n    int D = 2 * dx - dy;\n    dx <<= 1;\n    dy <<= 1;\n    int x = x0;\n    for (int y = y0; y <= y1; ++y) {\n        setCore(img, x, y, c);\n        if (D > 0) {\n            x += xi;\n            D -= dy;\n        }\n        D += dx;\n    }\n}\n\nvoid drawLine(Image_ img, int x0, int y0, int x1, int y1, int c) {\n    if (x1 < x0) {\n        drawLine(img, x1, y1, x0, y0, c);\n        return;\n    }\n\n    int w = x1 - x0;\n    int h = y1 - y0;\n\n    if (h == 0) {\n        if (w == 0)\n            setPixel(img, x0, y0, c);\n        else\n            fillRect(img, x0, y0, w + 1, 1, c);\n        return;\n    }\n\n    if (w == 0) {\n        if (h > 0)\n            fillRect(img, x0, y0, 1, h + 1, c);\n        else\n            fillRect(img, x0, y1, 1, -h + 1, c);\n        return;\n    }\n\n    if (x1 < 0 || x0 >= img->width())\n        return;\n    if (x0 < 0) {\n        y0 -= (h * x0 / w);\n        x0 = 0;\n    }\n    if (x1 >= img->width()) {\n        int d = (img->width() - 1) - x1;\n        y1 += (h * d / w);\n        x1 = img->width() - 1;\n    }\n\n    if (y0 < y1) {\n        if (y0 >= img->height() || y1 < 0)\n            return;\n        if (y0 < 0) {\n            x0 -= (w * y0 / h);\n            y0 = 0;\n        }\n        if (y1 >= img->height()) {\n            int d = (img->height() - 1) - y1;\n            x1 += (w * d / h);\n            y1 = img->height();\n        }\n    } else {\n        if (y1 >= img->height() || y0 < 0)\n            return;\n        if (y1 < 0) {\n            x1 -= (w * y1 / h);\n            y1 = 0;\n        }\n        if (y0 >= img->height()) {\n            int d = (img->height() - 1) - y0;\n            x0 += (w * d / h);\n            y0 = img->height();\n        }\n    }\n\n    img->makeWritable();\n\n    if (h < 0) {\n        h = -h;\n        if (h < w)\n            drawLineLow(img, x0, y0, x1, y1, c);\n        else\n            drawLineHigh(img, x1, y1, x0, y0, c);\n    } else {\n        if (h < w)\n            drawLineLow(img, x0, y0, x1, y1, c);\n        else\n            drawLineHigh(img, x0, y0, x1, y1, c);\n    }\n}\n\n//%\nvoid _drawLine(Image_ img, int xy, int wh, int c) {\n    drawLine(img, XX(xy), YY(xy), XX(wh), YY(wh), c);\n}\n\n} // namespace ImageMethods\n\nnamespace image {\n/**\n * Create new empty (transparent) image\n */\n//%\nImage_ create(int width, int height) {\n    Image_ r = mkImage(width, height, IMAGE_BITS);\n    if (r)\n        memset(r->pix(), 0, r->pixLength());\n    return r;\n}\n\n/**\n * Create new image with given content\n */\n//%\nImage_ ofBuffer(Buffer buf) {\n    if (!isValidImage(buf))\n        return NULL;\n    return new RefImage(buf);\n}\n\n/**\n * Double the size of an icon\n */\n//%\nBuffer doubledIcon(Buffer icon) {\n    if (!isValidImage(icon))\n        return NULL;\n\n    auto r = new RefImage(icon);\n    auto t = ImageMethods::doubled(r);\n    auto res = mkBuffer(t->data(), t->length());\n    decrRC(r);\n    decrRC(t);\n\n    return res;\n}\n\n} // namespace image\n\n// This is  6.5x faster than standard on word-aligned copy\n// probably should move to codal\n\n#ifndef __linux__\nextern \"C\" void *memcpy(void *dst, const void *src, size_t sz) {\n    if (sz >= 4 && !((uintptr_t)dst & 3) && !((uintptr_t)src & 3)) {\n        size_t cnt = sz >> 2;\n        uint32_t *d = (uint32_t *)dst;\n        const uint32_t *s = (const uint32_t *)src;\n        while (cnt--) {\n            *d++ = *s++;\n        }\n        sz &= 3;\n        dst = d;\n        src = s;\n    }\n\n    uint8_t *dd = (uint8_t *)dst;\n    uint8_t *ss = (uint8_t *)src;\n\n    while (sz--) {\n        *dd++ = *ss++;\n    }\n\n    return dst;\n}\n\nextern \"C\" void *memset(void *dst, int v, size_t sz) {\n    if (sz >= 4 && !((uintptr_t)dst & 3)) {\n        size_t cnt = sz >> 2;\n        uint32_t vv = 0x01010101 * v;\n        uint32_t *d = (uint32_t *)dst;\n        while (cnt--) {\n            *d++ = vv;\n        }\n        sz &= 3;\n        dst = d;\n    }\n\n    uint8_t *dd = (uint8_t *)dst;\n\n    while (sz--) {\n        *dd++ = v;\n    }\n\n    return dst;\n}\n#endif",
      "image.d.ts": "//% fixedInstances decompileIndirectFixedInstances\ninterface Image {\n    /**\n     * Fill a rectangle\n     */\n    //% helper=imageFillRect blockNamespace=\"images\" inlineInputMode=\"inline\" group=\"Drawing\"\n    //% block=\"fill rectangle in %picture=variables_get at x %x y %y width %w height %h %c=colorindexpicker\"\n    //% help=images/image/fill-rect\n    fillRect(x: number, y: number, w: number, h: number, c: color): void;\n\n    /**\n     * Draw a line\n     */\n    //% helper=imageDrawLine blockNamespace=\"images\" inlineInputMode=\"inline\" group=\"Drawing\"\n    //% block=\"draw line in %picture=variables_get from x %x0 y %y0 to x %x1 y %y1 %c=colorindexpicker\"\n    //% help=images/image/draw-line\n    drawLine(x0: number, y0: number, x1: number, y1: number, c: color): void;\n\n    /**\n     * Draw an empty rectangle\n     */\n    //% helper=imageDrawRect blockNamespace=\"images\" inlineInputMode=\"inline\" group=\"Drawing\"\n    //% block=\"draw rectangle in %picture=variables_get at x %x y %y width %w height %h %c=colorindexpicker\"\n    //% help=images/image/draw-rect\n    drawRect(x: number, y: number, w: number, h: number, c: color): void;\n\n    /**\n     * Set pixel color\n     */\n    //% shim=ImageMethods::setPixel blockNamespace=\"images\" group=\"Drawing\"\n    //% block=\"set %picture=variables_get color at x %x y %y to %c=colorindexpicker\"\n    //% help=images/image/set-pixel\n    setPixel(x: int32, y: int32, c: int32): void;\n\n    /**\n     * Get a pixel color\n     */\n    //% shim=ImageMethods::getPixel blockNamespace=\"images\" group=\"Drawing\"\n    //% block=\"%picture=variables_get color at x %x y %y\"\n    //% help=images/image/get-pixel\n    getPixel(x: int32, y: int32): int32;\n\n    /**\n     * Fill entire image with a given color\n     */\n    //% shim=ImageMethods::fill blockNamespace=\"images\" group=\"Drawing\"\n    //% block=\"fill %picture=variables_get with %c=colorindexpicker\"\n    //% help=images/image/fill\n    fill(c: int32): void;\n\n    /**\n     * Return a copy of the current image\n     */\n    //% shim=ImageMethods::clone blockNamespace=\"images\" group=\"Create\"\n    //% block=\"clone %picture=variables_get\"\n    //% help=images/image/clone\n    clone(): Image;\n\n    /**\n     * Flips (mirrors) pixels horizontally in the current image\n     */\n    //% shim=ImageMethods::flipX blockNamespace=\"images\" group=\"Transformations\"\n    //% block=\"flip %picture=variables_get horizontally\"\n    //% help=images/image/flip-x\n    flipX(): void;\n\n    /**\n     * Flips (mirrors) pixels vertically in the current image\n     */\n    //% shim=ImageMethods::flipY blockNamespace=\"images\" group=\"Transformations\"\n    //% block=\"flip %picture=variables_get vertically\"\n    //% help=images/image/flip-y\n    flipY(): void;\n\n    /**\n     * Every pixel in image is moved by (dx,dy)\n     */\n    //% shim=ImageMethods::scroll blockNamespace=\"images\" group=\"Transformations\"\n    //% help=images/image/scroll\n    scroll(dx: int32, dy: int32): void;\n\n    /**\n     * Replaces one color in an image with another\n     */\n    //% shim=ImageMethods::replace blockNamespace=\"images\" group=\"Transformations\"\n    //% block=\"change color in %picture=variables_get from %from=colorindexpicker to %to=colorindexpicker\"\n    //% help=images/image/replace\n    replace(from: int32, to: int32): void;\n}\n\ndeclare namespace image {\n    //% blockNamespace=\"images\"\n    //% block=\"create image width %width height %height\" group=\"Create\"\n    //% help=images/create\n    function create(width: number, height: number): Image;\n}",
      "image.ts": "type color = number\n\nnamespace image {\n    export function repeatY(count: number, image: Image) {\n        let arr = [image]\n        while (--count > 0)\n            arr.push(image)\n        return concatY(arr)\n    }\n\n    export function concatY(images: Image[]) {\n        let w = 0\n        let h = 0\n        for (let img of images) {\n            w = Math.max(img.width, w)\n            h += img.height\n        }\n        let r = image.create(w, h)\n        let y = 0\n        for (let img of images) {\n            let x = (w - img.width) >> 1\n            r.drawImage(img, x, y)\n            y += img.height\n        }\n        return r\n    }\n}\n\n\n//% fixedInstances\ninterface Image {\n    /**\n     * Draw an icon (monochromatic image) using given color\n     */\n    //% helper=imageDrawIcon\n    drawIcon(icon: Buffer, x: number, y: number, c: color): void;\n\n    /**\n     * Fill a rectangle\n     */\n    //% helper=imageFillRect\n    fillRect(x: number, y: number, w: number, h: number, c: color): void;\n\n    /**\n     * Draw a line\n     */\n    //% helper=imageDrawLine\n    drawLine(x0: number, y0: number, x1: number, y1: number, c: color): void;\n\n    /**\n     * Draw an empty rectangle\n     */\n    //% helper=imageDrawRect\n    drawRect(x: number, y: number, w: number, h: number, c: color): void;\n\n    /**\n     * Returns an image rotated by -90, 0, 90, 180, 270 deg clockwise\n     */\n    //% helper=imageRotated\n    rotated(deg: number): Image;\n}\n\nnamespace helpers {\n    //% shim=ImageMethods::_drawLine\n    function _drawLine(img: Image, xy: number, wh: number, c: color): void { }\n\n    //% shim=ImageMethods::_fillRect\n    function _fillRect(img: Image, xy: number, wh: number, c: color): void { }\n\n    //% shim=ImageMethods::_drawIcon\n    function _drawIcon(img: Image, icon: Buffer, xy: number, c: color): void { }\n\n    function pack(x: number, y: number) {\n        return (Math.clamp(-30000, 30000, x | 0) & 0xffff) | (Math.clamp(-30000, 30000, y | 0) << 16)\n    }\n\n    export function imageDrawIcon(img: Image, icon: Buffer, x: number, y: number, c: color): void {\n        _drawIcon(img, icon, pack(x, y), c)\n    }\n    export function imageFillRect(img: Image, x: number, y: number, w: number, h: number, c: color): void {\n        _fillRect(img, pack(x, y), pack(w, h), c)\n    }\n    export function imageDrawLine(img: Image, x: number, y: number, w: number, h: number, c: color): void {\n        _drawLine(img, pack(x, y), pack(w, h), c)\n    }\n    export function imageDrawRect(img: Image, x: number, y: number, w: number, h: number, c: color): void {\n        if (w == 0 || h == 0) return\n        w--\n        h--\n        imageDrawLine(img, x, y, x + w, y, c)\n        imageDrawLine(img, x, y, x, y + h, c)\n        imageDrawLine(img, x + w, y + h, x + w, y, c)\n        imageDrawLine(img, x + w, y + h, x, y + h, c)\n    }\n\n    /**\n     * Returns an image rotated by 90, 180, 270 deg clockwise\n     */\n    export function imageRotated(img: Image, deg: number) {\n        if (deg == -90 || deg == 270) {\n            let r = img.transposed();\n            r.flipY();\n            return r;\n        } else if (deg == 180 || deg == -180) {\n            let r = img.clone();\n            r.flipX();\n            r.flipY();\n            return r;\n        } else if (deg == 90) {\n            let r = img.transposed();\n            r.flipX();\n            return r;\n        } else {\n            return null;\n        }\n    }\n\n}\n",
      "ns.ts": " ",
      "pxt.json": "{\n    \"name\": \"screen\",\n    \"description\": \"The screen library\",\n    \"files\": [\n        \"screen.cpp\",\n        \"image.cpp\",\n        \"image.ts\",\n        \"text.ts\",\n        \"frame.ts\",\n        \"shims.d.ts\",\n        \"fieldeditors.ts\",\n        \"targetoverrides.ts\",\n        \"ns.ts\",\n        \"image.d.ts\"\n    ],\n    \"public\": true,\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"targetVersions\": {\n        \"target\": \"0.21.27\"\n    }\n}",
      "screen.cpp": "#include \"pxt.h\"\n#include \"BrainPadDisplay.h\"\n\nnamespace pxt {\n    class WDisplay {\n        CODAL_MBED::I2C i2c; // note that this is different pins than io->i2c\n    public:\n        BrainPadDisplay lcd;\n        WDisplay()\n            : i2c(*LOOKUP_PIN(SDA), *LOOKUP_PIN(SCL))\n            , lcd(i2c)\n        {}\n    };\n\n    SINGLETON(WDisplay);\n\n    static Image_ lastImg;\n    //%\n    void updateScreen(Image_ img) {\n        if (img && img != lastImg) {\n            decrRC(lastImg);\n            incrRC(img);\n            lastImg = img;\n        }\n\n        if (lastImg && lastImg->isDirty()) {\n            if (lastImg->bpp() != 1 || lastImg->width() != LCD_WIDTH || lastImg->height() != LCD_HEIGHT)\n                target_panic(906);\n            lastImg->clearDirty();\n            auto display = getWDisplay();\n            display->lcd.writeScreenBuffer(lastImg->pix());\n        }\n    }\n\n    //%\n    void updateStats(String msg) {\n        // ignore...\n    }\n}",
      "shims.d.ts": "// Auto-generated. Do not edit.\n\n\ndeclare interface Image {\n    /**\n     * Get the width of the image\n     */\n    //% property shim=ImageMethods::width\n    width: int32;\n\n    /**\n     * Get the height of the image\n     */\n    //% property shim=ImageMethods::height\n    height: int32;\n\n    /**\n     * True iff the image is monochromatic (black and white)\n     */\n    //% property shim=ImageMethods::isMono\n    isMono: boolean;\n\n    /**\n     * Sets all pixels in the current image from the other image, which has to be of the same size and\n     * bpp.\n     */\n    //% shim=ImageMethods::copyFrom\n    copyFrom(from: Image): void;\n\n    /**\n     * Set pixel color\n     */\n    //% shim=ImageMethods::setPixel\n    setPixel(x: int32, y: int32, c: int32): void;\n\n    /**\n     * Get a pixel color\n     */\n    //% shim=ImageMethods::getPixel\n    getPixel(x: int32, y: int32): int32;\n\n    /**\n     * Fill entire image with a given color\n     */\n    //% shim=ImageMethods::fill\n    fill(c: int32): void;\n\n    /**\n     * Return a copy of the current image\n     */\n    //% shim=ImageMethods::clone\n    clone(): Image;\n\n    /**\n     * Flips (mirrors) pixels horizontally in the current image\n     */\n    //% shim=ImageMethods::flipX\n    flipX(): void;\n\n    /**\n     * Flips (mirrors) pixels vertically in the current image\n     */\n    //% shim=ImageMethods::flipY\n    flipY(): void;\n\n    /**\n     * Returns a transposed image (with X/Y swapped)\n     */\n    //% shim=ImageMethods::transposed\n    transposed(): Image;\n\n    /**\n     * Every pixel in image is moved by (dx,dy)\n     */\n    //% shim=ImageMethods::scroll\n    scroll(dx: int32, dy: int32): void;\n\n    /**\n     * Stretches the image horizontally by 100%\n     */\n    //% shim=ImageMethods::doubledX\n    doubledX(): Image;\n\n    /**\n     * Stretches the image vertically by 100%\n     */\n    //% shim=ImageMethods::doubledY\n    doubledY(): Image;\n\n    /**\n     * Replaces one color in an image with another\n     */\n    //% shim=ImageMethods::replace\n    replace(from: int32, to: int32): void;\n\n    /**\n     * Stretches the image in both directions by 100%\n     */\n    //% shim=ImageMethods::doubled\n    doubled(): Image;\n\n    /**\n     * Draw given image on the current image\n     */\n    //% shim=ImageMethods::drawImage\n    drawImage(from: Image, x: int32, y: int32): void;\n\n    /**\n     * Draw given image with transparent background on the current image\n     */\n    //% shim=ImageMethods::drawTransparentImage\n    drawTransparentImage(from: Image, x: int32, y: int32): void;\n\n    /**\n     * Check if the current image \"collides\" with another\n     */\n    //% shim=ImageMethods::overlapsWith\n    overlapsWith(other: Image, x: int32, y: int32): boolean;\n}\ndeclare namespace image {\n\n    /**\n     * Create new empty (transparent) image\n     */\n    //% shim=image::create\n    function create(width: int32, height: int32): Image;\n\n    /**\n     * Create new image with given content\n     */\n    //% shim=image::ofBuffer\n    function ofBuffer(buf: Buffer): Image;\n\n    /**\n     * Double the size of an icon\n     */\n    //% shim=image::doubledIcon\n    function doubledIcon(icon: Buffer): Buffer;\n}\n\n// Auto-generated. Do not edit. Really.\n",
      "targetoverrides.ts": "/**\n * Tagged image literal converter\n */\n//% shim=@f4 helper=image::ofBuffer  blockIdentity=\"images._spriteImage\"\n//% groups=[\"0.,\",\"1#*\"]\nfunction img(lits: any, ...args: any[]): Image { return null }\n\n// This file would be usually overridden by the target.\nconst screen = image.create(128, 64)\n\nnamespace _screen_internal {\n    //% shim=pxt::updateScreen\n    function updateScreen(img: Image): void {}\n    //% shim=pxt::updateStats\n    function updateStats(msg: string): void {}\n\n    control.__screen.setupUpdate(() => updateScreen(screen))\n    control.EventContext.onStats = function(msg: string) { \n        updateStats(msg);\n    }\n}\n\nnamespace image {    \n    /**\n    * Gets the screen image\n    */\n    //% blockNamespace=\"images\" group=\"Create\"\n    //% blockId=imagescreen block=\"screen image\"\n    export function screenImage(): Image {\n        return screen;\n    }\n}",
      "text.ts": "namespace image {\n\n    export interface Font {\n        charWidth: number;\n        charHeight: number;\n        data: Buffer;\n        doubledCache?: Font;\n    }\n\n    //% whenUsed\n    export const font8: Font = {\n        charWidth: 8,\n        charHeight: 8,\n        // source https://github.com/dhepper/font8x8\n        data: hex`\n20000000000000000000 21000000065f5f060000 22000003030003030000 2300147f7f147f7f1400 2400242e6b6b3a120000\n2500466630180c666200 2600307a4f5d377a4800 27000407030000000000 2800001c3e6341000000 29000041633e1c000000\n2a00082a3e1c1c3e2a08 2b0008083e3e08080000 2c000080e06000000000 2d000808080808080000 2e000000606000000000\n2f006030180c06030100 30003e7f71594d7f3e00 310040427f7f40400000 3200627359496f660000 3300226349497f360000\n3400181c16537f7f5000 3500276745457d390000 36003c7e4b4979300000 3700030371790f070000 3800367f49497f360000\n3900064f49693f1e0000 3a000000666600000000 3b000080e66600000000 3c00081c366341000000 3d002424242424240000\n3e00004163361c080000 3f00020351590f060000 40003e7f415d5d1f1e00 41007c7e13137e7c0000 4200417f7f49497f3600\n43001c3e634141632200 4400417f7f41633e1c00 4500417f7f495d416300 4600417f7f491d010300 47001c3e634151737200\n48007f7f08087f7f0000 490000417f7f41000000 4a00307040417f3f0100 4b00417f7f081c776300 4c00417f7f4140607000\n4d007f7f0e1c0e7f7f00 4e007f7f060c187f7f00 4f001c3e6341633e1c00 5000417f7f49090f0600 51001e3f21717f5e0000\n5200417f7f09197f6600 5300266f4d5973320000 540003417f7f41030000 55007f7f40407f7f0000 56001f3f60603f1f0000\n57007f7f3018307f7f00 580043673c183c674300 5900074f78784f070000 5a00476371594d677300 5b00007f7f4141000000\n5c000103060c18306000 5d000041417f7f000000 5e00080c0603060c0800 5f008080808080808080 60000000030704000000\n6100207454543c784000 6200417f3f4848783000 6300387c44446c280000 6400307848493f7f4000 6500387c54545c180000\n6600487e7f4903020000 670098bca4a4f87c0400 6800417f7f08047c7800 690000447d7d40000000 6a0060e08080fd7d0000\n6b00417f7f10386c4400 6c0000417f7f40000000 6d007c7c18381c7c7800 6e007c7c04047c780000 6f00387c44447c380000\n700084fcf8a4243c1800 7100183c24a4f8fc8400 7200447c784c041c1800 7300485c545474240000 740000043e7f44240000\n75003c7c40403c7c4000 76001c3c60603c1c0000 77003c7c7038707c3c00 7800446c3810386c4400 79009cbca0a0fc7c0000\n7a004c64745c4c640000 7b0008083e7741410000 7c000000007777000000 7d004141773e08080000 7e000203010302030100\n7f000000000000000000\n`\n    }\n\n    export function doubledFont(f: Font): Font {\n        if (f.doubledCache) return f.doubledCache\n        let byteHeight = (f.charHeight + 7) >> 3\n        let sz = f.charWidth * byteHeight\n        let numChars = f.data.length / (sz + 2)\n        let newByteHeight = ((f.charHeight * 2) + 7) >> 3\n        let nsz = f.charWidth * 2 * newByteHeight\n        let data = control.createBuffer((nsz + 2) * numChars)\n        let tmp = control.createBuffer(4 + sz)\n        tmp[0] = 0xe1\n        tmp[1] = f.charWidth\n        tmp[2] = f.charHeight\n        let dst = 0\n        for (let i = 0; i < f.data.length; i += 2 + sz) {\n            tmp.write(4, f.data.slice(i + 2, sz))\n            let dbl = image.doubledIcon(tmp).slice(4)\n            data[dst] = f.data[i]\n            data[dst + 1] = f.data[i + 1]\n            data.write(dst + 2, dbl)\n            dst += 2 + dbl.length\n        }\n        f.doubledCache = {\n            charWidth: f.charWidth * 2,\n            charHeight: f.charHeight * 2,\n            data: data\n        }\n        return f.doubledCache\n    }\n\n    //% whenUsed\n    export const font5: Font = {\n        charWidth: 6,\n        charHeight: 5,\n        // source https://github.com/lancaster-university/microbit-dal/blob/master/source/core/MicroBitFont.cpp\n        data: hex`\n2000000000000000 2100001700000000 2200000300030000 23000a1f0a1f0a00 24000a17151d0a00 2500130904121900\n26000a15150a1000 2700000300000000 2800000e11000000 290000110e000000 2a00000a040a0000 2b0000040e040000\n2c00001008000000 2d00000404040000 2e00000800000000 2f00100804020100 30000e11110e0000 310000121f100000\n3200191515120000 33000911150b0000 34000c0a091f0800 3500171515150900 3600081416150800 3700110905030100\n38000a1515150a00 390002150d050200 3a00000a00000000 3b0000100a000000 3c0000040a110000 3d00000a0a0a0000\n3e0000110a040000 3f00020115050200 40000e1115090e00 41001e05051e0000 42001f15150a0000 43000e1111110000\n44001f11110e0000 45001f1515110000 46001f0505010000 47000e1111150c00 48001f04041f0000 4900111f11000000\n4a000911110f0100 4b001f040a110000 4c001f1010100000 4d001f0204021f00 4e001f0204081f00 4f000e11110e0000\n50001f0505020000 5100060919160000 52001f05050a1000 5300121515090000 540001011f010100 55000f10100f0000\n5600070810080700 57001f0804081f00 58001b04041b0000 590001021c020100 5a00191513110000 5b00001f11110000\n5c00010204081000 5d000011111f0000 5e00000201020000 5f00101010101000 6000000102000000 61000c12121e1000\n62001f1414080000 63000c1212120000 64000814141f0000 65000e1515120000 6600041e05010000 67000215150f0000\n68001f0404180000 6900001d00000000 6a000010100d0000 6b001f040a100000 6c00000f10100000 6d001e0204021e00\n6e001e02021c0000 6f000c12120c0000 70001e0a0a040000 7100040a0a1e0000 72001c0202020000 730010140a020000\n7400000f14141000 75000e10101e1000 7600060810080600 77001e1008101e00 7800120c0c120000 7900121408040200\n7a00121a16120000 7b0000041f110000 7c00001f00000000 7d00111f04000000 7e00000404080800 d3000c1213130c00\nf3000c12130d0000 04010e05051e1000 05010609191f0800 06010c1213131200 07010c1213130000 18010f0b1b190000\n19010e151d1a0000 41011f1412100000 4201100f14120000 43011f0205081f00 44011e03031c0000 5a0110140b030200\n5b0110140b030000 7901121a17130000 7a01121a17130000 7b01121b17120000 7c01121b17120000`,\n    }\n}\n\ninterface Image {\n    //% helper=imagePrint\n    print(text: string, x: number, y: number, color?: number, font?: image.Font): void;\n\n    //% helper=imagePrintCenter\n    printCenter(text: string, y: number, color?: number, font?: image.Font): void;\n}\n\nnamespace helpers {\n    export function imagePrintCenter(img: Image, text: string, y: number, color?: number, font?: image.Font) {\n        if (!font) font = image.font8\n        let w = text.length * font.charWidth\n        let x = (screen.width - w) / 2\n        imagePrint(img, text, x, y, color, font)\n    }\n\n    export function imagePrint(img: Image, text: string, x: number, y: number, color?: number, font?: image.Font) {\n        x |= 0\n        y |= 0\n        if (!font) font = image.font8\n        if (!color) color = 1\n        let x0 = x\n        let cp = 0\n        let byteHeight = (font.charHeight + 7) >> 3\n        let charSize = byteHeight * font.charWidth\n        let imgBuf = control.createBuffer(4 + charSize)\n        let dataSize = 2 + charSize\n        let fontdata = font.data\n        let lastchar = Math.idiv(fontdata.length, dataSize) - 1\n        imgBuf[0] = 0xe1\n        imgBuf[1] = font.charWidth\n        imgBuf[2] = font.charHeight\n        while (cp < text.length) {\n            let ch = text.charCodeAt(cp++)\n            if (ch == 10) {\n                y += font.charHeight + 2\n                x = x0\n            }\n\n            if (ch < 32)\n                continue // skip control chars\n\n            // decompose Korean characters\n            let arr = [ch]\n            if (44032 <= ch && ch <= 55203) {\n                ch -= 44032\n                arr = [\n                    Math.idiv(ch, 588) + 0x1100,\n                    (Math.idiv(ch, 28) % 21) + 0x1161,\n                ]\n                ch %= 28\n                if (ch)\n                    arr.push(ch % 28 + 0x11a7)\n            }\n\n            for (let cc of arr) {\n                let l = 0\n                let r = lastchar\n                let off = 0 // this should be a space (0x0020)\n                let guess = (ch - 32) * dataSize\n                if (fontdata.getNumber(NumberFormat.UInt16LE, guess) == cc)\n                    off = guess\n                else {\n                    while (l <= r) {\n                        let m = l + ((r - l) >> 1);\n                        let v = fontdata.getNumber(NumberFormat.UInt16LE, m * dataSize)\n                        if (v == cc) {\n                            off = m * dataSize\n                            break\n                        }\n                        if (v < cc)\n                            l = m + 1\n                        else\n                            r = m - 1\n                    }\n                }\n\n                imgBuf.write(4, fontdata.slice(off + 2, charSize))\n                img.drawIcon(imgBuf, x, y, color)\n                x += font.charWidth\n            }\n        }\n    }\n}\n"
    },
    "display": {
      "display.ts": "/**\n * Basic screen display functionalities\n */\n//% weight=98 icon=\"\\uf108\" color=\"#311557\"\n//% groups='[\"Screen\", \"Charts\"]'\nnamespace display {\n    const textOffset = 4;\n    const lineOffset = 2;\n\n    /**\n     * Gets the text line height\n     */\n    export function lineHeight(): number {\n        return image.font8.charHeight + lineOffset;\n    }\n\n    /**\n     * Number of lines\n     */\n    export function lineCount(): number {\n        return ((screen.height - textOffset) / lineHeight()) >> 0\n    }\n\n    /**\n     * Show text on the screen at a specific line.\n     * @param text the text to print on the screen, eg: \"Hello world\"\n     * @param line the line number to print the text at (starting at 1), eg: 1\n     */\n    //% blockId=displayshowstring block=\"show string %text|at line %line\"\n    //% weight=98 inlineInputMode=\"inline\" blockGap=8\n    //% help=display/show-string\n    export function showString(text: string, line: number) {\n        // line indexing starts at 1.\n        line = (line - 1) >> 0;\n        const nlines = lineCount();\n        if (line < 0 || line >= nlines) return; // out of screen\n\n        const h = lineHeight();\n        const y = textOffset + h * line;\n        screen.fillRect(0, y, screen.width, h, 0); // clear background\n        screen.print(text, textOffset, y);\n    }\n\n    /**\n     * Shows a number on the screen\n     * @param value the numeric value\n     * @param line the line number to print the text at (starting at 1), eg: 1\n     */\n    //% blockId=displayshownumber block=\"show number %name|at line %line\"\n    //% weight=96 inlineInputMode=\"inline\" blockGap=8\n    //% help=display/show-number\n    //% line.min=1 line.max=10\n    export function showNumber(value: number, line: number) {\n        showString(\"\" + value, line);\n    }\n\n    /**\n     * Shows a name, value pair on the screen\n     * @param value the numeric value\n     * @param line the line number to print the text at (starting at 1), eg: 1\n     */\n    //% blockId=displayshowvalue block=\"show value %name|: %text|at line %line\"\n    //% weight=96 inlineInputMode=\"inline\" blockGap=8\n    //% help=display/show-value\n    //% line.min=1 line.max=10\n    export function showValue(name: string, value: number, line: number) {\n        value = Math.round(value * 1000) / 1000;\n        showString((name ? name + \": \" : \"\") + value, line);\n    }\n\n    /**\n     * Clear the screen\n     */\n    //% blockId=displayclear block=\"clear display\"\n    //% weight=90\n    //% help=display/clear\n    export function clear() {\n        screen.fill(0)\n    }\n\n    /**\n     * Sends the log messages to the brick screen and uses the brick up and down buttons to scroll.\n     */\n    //% blockId=displayshowconsole block=\"show console\"\n    //% weight=1\n    //% help=display/show-console\n    export function showConsole(): void {\n        display.text.scroll(0);\n    }\n}\n\nnamespace display.text {\n    export let maxLines = 200;\n    let screenLines = 1;\n    let lines: string[];\n    let scrollPosition = 0;\n\n    function init() {\n        if (!lines) {\n            lines = [];\n            console.addListener(log);\n            screenLines = display.lineCount();\n        }\n    }\n\n    function printLog() {\n        display.clear();\n        if (!lines) return;\n        screenLines = display.lineCount();\n        const h = display.lineHeight();\n        for (let i = 0; i < screenLines; ++i) {\n            const line = lines[i + scrollPosition];\n            if (line)\n                display.showString(line, i + 1);\n        }\n    }\n\n    export function scroll(pos: number) {\n        init();\n        if (!pos) return;\n\n        scrollPosition += pos >> 0;\n        if (scrollPosition >= lines.length) scrollPosition = lines.length - 1;\n        if (scrollPosition < 0) scrollPosition = 0;\n        printLog();\n    }\n\n    function log(msg: string): void {\n        lines.push(msg);\n        if (lines.length + 5 > maxLines) {\n            lines.splice(0, lines.length >> 1);\n            scrollPosition = Math.min(scrollPosition, lines.length - 1)\n        }\n        // move down scroll once it gets large than the screen\n        if (lines.length > screenLines\n            && lines.length >= scrollPosition + screenLines) {\n            scrollPosition++;\n        }\n        printLog();\n    }\n}    \n",
      "displayImage.ts": "namespace display {\n    /**\n     * Show an image on the screen\n     * @param image image to draw\n     */\n    //% blockId=displayshowimage block=\"show image %image=image_picker\"\n    //% weight=100 group=\"Screen\" blockGap=8\n    //% help=display/show-image\n    export function showImage(image: Image, duration: number = 400) {\n        screen.fill(0);\n        if (image)\n            screen.drawImage(image, 0, 0)\n        if (duration > 0)\n            pause(duration);\n    }\n}",
      "graph.ts": "namespace display {\n    class Chart {\n        // Variables used for data configuration.\n        private font: image.Font;\n        private times: number[];\n        private values: number[];\n\n        // grid\n        private gridRows: number;\n        private gridCols: number;\n        private gridWidth: number;\n        private gridHeight: number;\n\n        // chart rendering\n        private chartWidth: number;\n        private chartHeight: number;\n        private scaleXMin: number;\n        private scaleXMax: number;\n        private scaleYMin: number;\n        private scaleYMax: number;\n        private axisPaddingX: number;\n        private axisPaddingY: number;\n\n        // estimated best number of entries\n        private maxEntries: number;\n\n        public backgroundColor: number;\n        public axisColor: number;\n        public lineColor: number;\n\n        constructor() {\n            this.font = image.font5;\n            this.backgroundColor = 0;\n            this.axisColor = 1;\n            this.lineColor = 1;\n\n            this.axisPaddingX = 22;\n            this.axisPaddingY = this.font.charHeight + 4;\n            this.gridRows = 2;\n            this.gridCols = 2; // computed on the fly\n            this.times = [];\n            this.values = [];\n            this.chartWidth = screen.width - this.axisPaddingX;\n            this.chartHeight = screen.height - this.axisPaddingY;\n            this.maxEntries = (this.chartWidth - 2) / 2;\n        }\n\n        public addPoint(value: number) {\n            this.times.push(control.millis() / 1000);\n            this.values.push(value);\n            if (this.times.length > this.maxEntries * 2) {\n                this.times = this.times.slice(this.times.length - this.maxEntries - 1, this.times.length - 1);\n                this.values = this.values.slice(this.values.length - this.maxEntries - 1, this.values.length - 1);\n            }\n        }\n\n        public render() {\n            if (this.times.length < 2) return;\n            this.calculateScale();\n            screen.fill(this.backgroundColor);\n            this.drawAxes();\n            this.drawChartGrid();\n            this.drawGraphPoints();\n        }\n\n        private calculateScale() {\n            this.scaleYMax = this.values[0];\n            this.scaleYMin = this.values[0];\n            for (let j = 0, len2 = this.values.length; j < len2; j++) {\n                if (this.scaleYMax < this.values[j]) {\n                    this.scaleYMax = this.values[j];\n                }\n                if (this.scaleYMin > this.values[j]) {\n                    this.scaleYMin = this.values[j];\n                }\n            }\n\n            // avoid empty interval\n            if (this.scaleXMin === this.scaleXMax)\n                this.scaleXMax = this.scaleXMin + 1; // TODO\n            if (this.scaleYMin === this.scaleYMax)\n                this.scaleYMax = this.scaleYMin + 1; // TODO\n\n            // update axis to look better\n            let rx = generateSteps(0, this.times[this.times.length - 1] - this.times[0], 4);\n            this.scaleXMin = rx[0];\n            this.scaleXMax = rx[1];\n            this.gridCols = rx[2];\n            let ry = generateSteps(this.scaleYMin, this.scaleYMax, 6);\n            this.scaleYMin = ry[0];\n            this.scaleYMax = ry[1];\n            this.gridRows = ry[2];\n\n            // update y-axis width\n            let xl = 0;\n            const yRange = this.scaleYMax - this.scaleYMin;\n            const yUnit = yRange / this.gridRows;\n            for (let i = 0; i <= this.gridRows; ++i)\n                xl = Math.max(roundWithPrecision(this.scaleYMax - (i * yUnit), 2).toString().length, xl);\n            this.axisPaddingX = xl * this.font.charWidth + 4;\n            this.chartWidth = screen.width - this.axisPaddingX;\n            this.maxEntries = (this.chartWidth - 2) / 2;\n\n            // Calculate the grid for background / scale.\n            this.gridWidth = this.chartWidth / this.gridCols;  // This is the width of the grid cells (background and axes).\n            this.gridHeight = this.chartHeight / this.gridRows; // This is the height of the grid cells (background axes).\n        }\n\n        private drawChartGrid() {\n            const c = this.axisColor;\n            const tipLength = 3;\n\n            screen.drawRect(0, 0, this.chartWidth, this.chartHeight, c);\n\n            for (let i = 0; i < this.gridCols; i++) {\n                screen.drawLine(i * this.gridWidth, this.chartHeight, i * this.gridWidth, this.chartHeight - tipLength, c);\n                screen.drawLine(i * this.gridWidth, 0, i * this.gridWidth, tipLength, c);\n            }\n            for (let i = 0; i < this.gridRows; i++) {\n                screen.drawLine(0, i * this.gridHeight, tipLength, i * this.gridHeight, c);\n                screen.drawLine(this.chartWidth, i * this.gridHeight, this.chartWidth - tipLength, i * this.gridHeight, c);\n            }\n        }\n\n        private drawAxes() {\n            const c = this.axisColor;\n            const xRange = this.scaleXMax - this.scaleXMin;\n            const yRange = this.scaleYMax - this.scaleYMin;\n\n            const xUnit = xRange / this.gridCols;\n            const yUnit = yRange / this.gridRows;\n\n            // Draw the y-axes labels.\n            let text = '';\n            for (let i = 0; i <= this.gridRows; i++) {\n                text = roundWithPrecision(this.scaleYMax - (i * yUnit), 2).toString();\n                let y = i * this.gridHeight - this.font.charHeight / 2;\n                if (i == this.gridRows)\n                    y -= this.font.charHeight / 2;\n                else if (i == 0)\n                    y += this.font.charHeight / 2;\n                screen.print(text, this.chartWidth + 5, y, c, this.font);\n            }\n\n            // Draw the x-axis labels\n            for (let i = 0; i <= this.gridCols; i++) {\n                text = roundWithPrecision((i * xUnit), 2).toString();\n                let x = i * this.gridWidth;\n                if (i > 0)\n                    x -= this.font.charWidth / 2; // move one char to the left\n                screen.print(text, x, this.chartHeight + (this.axisPaddingY - 2 - this.font.charHeight), c, this.font);\n            }\n        }\n\n        private drawGraphPoints() {\n            const c = this.lineColor;\n            // Determine the scaling factor based on the min / max ranges.\n            const xRange = this.scaleXMax - this.scaleXMin;\n            const yRange = this.scaleYMax - this.scaleYMin;\n\n            const xFactor = this.chartWidth / xRange;\n            let yFactor = this.chartHeight / yRange;\n\n            let nextX = 0;\n            let nextY = (this.values[0] - this.scaleYMin) * yFactor;\n            const startX = nextX;\n            const startY = nextY;\n            for (let i = 1; i < this.values.length; i++) {\n                let prevX = nextX;\n                let prevY = nextY;\n                nextX = (this.times[i] - this.times[0]) * xFactor;\n                nextY = (this.values[i] - this.scaleYMin) * yFactor;\n                screen.drawLine(prevX, prevY, nextX, nextY, c);\n            }\n        }\n    }\n\n    // helpers\n    function log10(x: number): number {\n        return Math.log(x) / Math.log(10);\n    }\n\n    function roundWithPrecision(x: number, digits: number): number {\n        if (digits <= 0) return Math.round(x);\n        let d = Math.pow(10, digits);\n        return Math.round(x * d) / d;\n    }\n\n    function generateSteps(start: number, end: number, numberOfTicks: number): number[] {\n        let bases = [1, 5, 2, 3]; // Tick bases selection\n        let currentBase: number;\n        let n: number;\n        let intervalSize: number, upperBound: number, lowerBound: number;\n        let nIntervals: number, nMaxIntervals: number;\n        let the_intervalsize = 0.1;\n\n        let exponentYmax =\n            Math.floor(Math.max(log10(Math.abs(start)), log10(Math.abs(end))));\n        let mantissaYmax = end / Math.pow(10.0, exponentYmax);\n\n        // now check if numbers can be cleaned...\n        // make it pretty\n        let significative_numbers = Math.min(3, Math.abs(exponentYmax) + 1);\n\n        let expo = Math.pow(10.0, significative_numbers);\n        let start_norm = Math.abs(start) * expo;\n        let end_norm = Math.abs(end) * expo;\n        let mant_norm = Math.abs(mantissaYmax) * expo;\n\n        // trunc ends\n        let ip_start = Math.floor(start_norm * Math.sign(start));\n        let ip_end = Math.ceil(end_norm * Math.sign(end));\n\n        start = ip_start;\n        end = ip_end;\n\n        mantissaYmax = Math.ceil(mant_norm);\n\n        nMaxIntervals = 0;\n        for (let k = 0; k < bases.length; ++k) {\n            // Loop initialisation\n            currentBase = bases[k];\n            n = 4; // This value only allows results smaller than about 1000 = 10^n\n\n\n            do // Tick vector length reduction\n            {\n                --n;\n                intervalSize = currentBase * Math.pow(10.0, exponentYmax - n);\n\n                upperBound =\n                    Math.ceil(mantissaYmax * Math.pow(10.0, n) / currentBase)\n                    * intervalSize;\n\n                nIntervals =\n                    Math.ceil((upperBound - start) / intervalSize);\n                lowerBound = upperBound - nIntervals * intervalSize;\n            }\n            while (nIntervals > numberOfTicks);\n\n            if (nIntervals > nMaxIntervals) {\n                nMaxIntervals = nIntervals;\n                ip_start = ip_start = lowerBound;\n                ip_end = upperBound;\n                the_intervalsize = intervalSize;\n            }\n        }\n\n        // trunc ends\n        if (start < 0)\n            start = Math.floor(ip_start) / expo;\n        else\n            start = Math.ceil(ip_start) / expo;\n\n        if (end < 0)\n            end = Math.floor(ip_end) / expo;\n        else\n            end = Math.ceil(ip_end) / expo;\n\n        return [start, end, nMaxIntervals];\n    }\n\n\n    let chart: Chart;\n    /**\n     * Adds a new point to the trend chart and renders it to the screen.\n     */\n    //% group=\"Charts\"\n    //% blockId=graphadd block=\"graph %value\"\n    //% blockGap=8\n    export function graph(value: number) {\n        if (!chart)\n            chart = new Chart();\n\n        chart.addPoint(value);\n        chart.render();\n    }\n\n    /**\n     * Clears the trend chart and the screen\n     */\n    //% group=\"Charts\"\n    //% blockid=graphclear block=\"graph clear\"\n    export function graphClear() {\n        chart = undefined;\n        screen.fill(0);\n    }\n}\n",
      "pxt.json": "{\n    \"name\": \"display\",\n    \"description\": \"Basic display functionalitites\",\n    \"files\": [\n        \"display.ts\",\n        \"displayImage.ts\",\n        \"graph.ts\",\n        \"targetoverrides.ts\"\n    ],\n    \"dependencies\": {\n        \"screen\": \"*\"\n    },\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"0.21.27\"\n    }\n}",
      "targetoverrides.ts": "//input.buttonUp.onEvent(ButtonEvent.Up, () => display.text.scroll(-3))\n//input.buttonDown.onEvent(ButtonEvent.Down, () => display.text.scroll(3))               \n"
    },
    "serial": {
      "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum BaudRate {\n    //% block=115200\n    BaudRate115200 = 115200,\n    //% block=57600\n    BaudRate57600 = 57600,\n    //% block=38400\n    BaudRate38400 = 38400,\n    //% block=31250\n    BaudRate31250 = 31250,\n    //% block=28800\n    BaudRate28800 = 28800,\n    //% block=19200\n    BaudRate19200 = 19200,\n    //% block=14400\n    BaudRate14400 = 14400,\n    //% block=9600\n    BaudRate9600 = 9600,\n    //% block=4800\n    BaudRate4800 = 4800,\n    //% block=2400\n    BaudRate2400 = 2400,\n    //% block=1200\n    BaudRate1200 = 1200,\n    //% block=300\n    BaudRate300 = 300,\n    }\n\n// Auto-generated. Do not edit. Really.\n",
      "pxt.json": "{\n    \"name\": \"serial\",\n    \"description\": \"UART communicatoin\",\n    \"files\": [\n        \"serial.cpp\",\n        \"serial.ts\",\n        \"enums.d.ts\",\n        \"shims.d.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"targetVersions\": {\n        \"target\": \"0.21.27\"\n    },\n    \"icon\": \"/brainpad-pulse/docs/static/libs/serial.png\"\n}",
      "serial.cpp": "#include \"pxt.h\"\n\nenum class BaudRate {\n  //% block=115200\n  BaudRate115200 = 115200,\n  //% block=57600\n  BaudRate57600 = 57600,\n  //% block=38400\n  BaudRate38400 = 38400,\n  //% block=31250\n  BaudRate31250 = 31250,\n  //% block=28800\n  BaudRate28800 = 28800,\n  //% block=19200\n  BaudRate19200 = 19200,\n  //% block=14400\n  BaudRate14400 = 14400,\n  //% block=9600\n  BaudRate9600 = 9600,\n  //% block=4800\n  BaudRate4800 = 4800,\n  //% block=2400\n  BaudRate2400 = 2400,\n  //% block=1200\n  BaudRate1200 = 1200,\n  //% block=300\n  BaudRate300 = 300\n};\n\nnamespace pxt {\n  class WSerial {\n    public:\n      CODAL_SERIAL serial;\n      WSerial()\n        : serial(PIN(TX), PIN(RX))\n        {\n          serial.baud((int)BaudRate::BaudRate115200);\n        }\n  };\n\nSINGLETON(WSerial);\n\n}\n\nnamespace serial {\n    void send(const char* buffer, int length) {\n      // TODO: fix CODAL abstraction\n      // getWSerial()->serial.send((uint8_t*)buffer, length * sizeof(char));\n      getWSerial()->serial.printf(\"%s\", buffer);\n    }\n\n    /**\n     * Write some text to the serial port.\n     */\n    //% help=serial/write-string\n    //% weight=87\n    //% blockId=serial_writestring block=\"serial|write string %text\"\n    //% blockHidden=1\n    void writeString(String text) {\n      if (NULL == text) return;\n      send(text->data, text->length);\n    }\n\n    /**\n    * Send a buffer across the serial connection.\n    */\n    //% help=serial/write-buffer weight=6\n    //% blockId=serial_writebuffer block=\"serial|write buffer %buffer\"\n    void writeBuffer(Buffer buffer) {\n      if (NULL == buffer) return;\n      getWSerial()->serial.send(buffer->data, buffer->length);\n    }\n\n    /**\n      Sends the console message through the TX, RX pins\n      **/\n    //% blockId=serialsendtoconsole block=\"serial attach to console\"\n    void attachToConsole() {\n      setSendToUART(serial::send);\n    }\n\n    /**\n    Set the baud rate of the serial port\n    */\n    //% blockId=serialsetbaudrate block=\"serial set baud rate to %rate\"\n    void setBaudRate(BaudRate rate) {\n      getWSerial()->serial.baud((int)rate);\n    }\n\n    /**\n      Configure the pins used by the serial interface/\n    **/\n    /**\n    * Set the serial input and output to use pins instead of the USB connection.\n    * @param tx the new transmission pin, eg: SerialPin.P0\n    * @param rx the new reception pin, eg: SerialPin.P1\n    * @param rate the new baud rate. eg: 115200\n    */\n    //% weight=10\n    //% help=serial/redirect\n    //% blockId=serial_redirect block=\"serial|redirect to|TX %tx|RX %rx|at baud rate %rate\"\n    //% blockExternalInputs=1\n    //% tx.fieldEditor=\"gridpicker\" tx.fieldOptions.columns=3\n    //% tx.fieldOptions.tooltips=\"false\"\n    //% rx.fieldEditor=\"gridpicker\" rx.fieldOptions.columns=3\n    //% rx.fieldOptions.tooltips=\"false\"\n    //% blockGap=8 inlineInputMode=inline\n    void redirect(DigitalInOutPin tx, DigitalInOutPin rx, BaudRate rate) {\n      getWSerial()->serial.redirect((PinName)tx->name, (PinName)rx->name);\n      getWSerial()->serial.baud((int)rate);\n    }\n}",
      "serial.ts": "/**\n * Reading and writing data over a serial connection.\n */\n//% weight=2 color=#002050 icon=\"\\uf287\"\n//% advanced=true\nnamespace serial {\n    /**\n     * Write a line of text to the serial port.\n     * @param value to send over serial\n     */\n    //% weight=90\n    //% help=serial/write-line blockGap=8\n    //% blockId=serial_writeline block=\"serial|write line %text\"\n    export function writeLine(text: string): void {\n        writeString(text + \"\\r\\n\");\n    }\n\n    /**\n     * Write a number to the serial port.\n     */\n    //% help=serial/write-number\n    //% weight=89 blockGap=8\n    //% blockId=serial_writenumber block=\"serial|write number %value\"\n    export function writeNumber(value: number): void {\n        writeString(value.toString());\n    }\n\n    /**\n     * Write a name:value pair as a line of text to the serial port.\n     * @param name name of the value stream, eg: \"x\"\n     * @param value to write\n     */\n    //% weight=88 blockGap=8\n    //% help=serial/write-value\n    //% blockId=serial_writevalue block=\"serial|write value %name|= %value\"\n    export function writeValue(name: string, value: number): void {\n        const prefix = name ? name + \":\" : \"\";\n        serial.writeLine(prefix + value);\n    }\n\n}\n",
      "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace serial {\n\n    /**\n     * Write some text to the serial port.\n     */\n    //% help=serial/write-string\n    //% weight=87\n    //% blockId=serial_writestring block=\"serial|write string %text\"\n    //% blockHidden=1 shim=serial::writeString\n    function writeString(text: string): void;\n\n    /**\n     * Send a buffer across the serial connection.\n     */\n    //% help=serial/write-buffer weight=6\n    //% blockId=serial_writebuffer block=\"serial|write buffer %buffer\" shim=serial::writeBuffer\n    function writeBuffer(buffer: Buffer): void;\n\n    /**\n    Sends the console message through the TX, RX pins\n     **/\n    //% blockId=serialsendtoconsole block=\"serial attach to console\" shim=serial::attachToConsole\n    function attachToConsole(): void;\n\n    /**\n    Set the baud rate of the serial port\n     */\n    //% blockId=serialsetbaudrate block=\"serial set baud rate to %rate\" shim=serial::setBaudRate\n    function setBaudRate(rate: BaudRate): void;\n\n    /**\n     * Set the serial input and output to use pins instead of the USB connection.\n     * @param tx the new transmission pin, eg: SerialPin.P0\n     * @param rx the new reception pin, eg: SerialPin.P1\n     * @param rate the new baud rate. eg: 115200\n     */\n    //% weight=10\n    //% help=serial/redirect\n    //% blockId=serial_redirect block=\"serial|redirect to|TX %tx|RX %rx|at baud rate %rate\"\n    //% blockExternalInputs=1\n    //% tx.fieldEditor=\"gridpicker\" tx.fieldOptions.columns=3\n    //% tx.fieldOptions.tooltips=\"false\"\n    //% rx.fieldEditor=\"gridpicker\" rx.fieldOptions.columns=3\n    //% rx.fieldOptions.tooltips=\"false\"\n    //% blockGap=8 inlineInputMode=inline shim=serial::redirect\n    function redirect(tx: DigitalInOutPin, rx: DigitalInOutPin, rate: BaudRate): void;\n}\n\n// Auto-generated. Do not edit. Really.\n",
      "test.ts": "let i = 0;\nforever(function () {\n    serial.writeLine((++i).toString())\n})"
    },
    "controller": {
      "controller.ts": "enum ControllerButtonEvent {\n    //% block=\"pressed\"\n    Pressed = KEY_DOWN,\n    //% block=\"released\"\n    Released = KEY_UP,\n    //% block=\"repeat\"\n    Repeated = SYSTEM_KEY_REPEAT\n}\n\n/**\n * Access to game controls\n */\n//% weight=97 color=\"#e15f41\" icon=\"\\uf11b\"\nnamespace controller {\n    let _userEventsEnabled = true;\n    let _activeButtons: Button[];\n\n    //% fixedInstances\n    export class Button {\n        public id: number;\n        public repeatDelay: number;\n        public repeatInterval: number;\n        private _pressed: boolean;\n        private _pressedElasped: number;\n        private _repeatCount: number;\n\n        constructor(id: number, buttonId?: number, upid?: number, downid?: number) {\n            this.id = id;\n            this._pressed = false;\n            this.repeatDelay = 500;\n            this.repeatInterval = 30;\n            this._repeatCount = 0;\n            control.internalOnEvent(INTERNAL_KEY_UP, this.id, () => {\n                if (this._pressed) {\n                    this._pressed = false\n                    this.raiseButtonUp();\n                }\n            }, 16)\n            control.internalOnEvent(INTERNAL_KEY_DOWN, this.id, () => {\n                if (!this._pressed) {\n                    this._pressed = true;\n                    this._pressedElasped = 0;\n                    this._repeatCount = 0;\n                    this.raiseButtonDown();\n                }\n            }, 16)\n            if (buttonId && upid && downid) {\n                control.internalOnEvent(buttonId, upid, () => control.raiseEvent(INTERNAL_KEY_UP, this.id), 16)\n                control.internalOnEvent(buttonId, downid, () => control.raiseEvent(INTERNAL_KEY_DOWN, this.id), 16)\n            }\n\n            // register button in global list\n            if (!_activeButtons) _activeButtons = [];\n            _activeButtons.push(this);\n        }\n\n        private raiseButtonUp() {\n            if (_userEventsEnabled)\n                control.raiseEvent(KEY_UP, this.id)\n            else\n                control.raiseEvent(SYSTEM_KEY_UP, this.id);\n        }\n\n        private raiseButtonDown() {\n            if (_userEventsEnabled)\n                control.raiseEvent(KEY_DOWN, this.id)\n            else\n                control.raiseEvent(SYSTEM_KEY_DOWN, this.id)\n        }\n\n        private raiseButtonRepeat() {\n            if (_userEventsEnabled)\n                control.raiseEvent(KEY_REPEAT, this.id)\n            else\n                control.raiseEvent(SYSTEM_KEY_REPEAT, this.id)\n        }\n\n        /**\n         * Run some code when a button is pressed or released\n         */\n        //% weight=99 blockGap=8 help=controller/button/on-event\n        //% blockId=keyonevent block=\"on %button **button** %event\"\n        onEvent(event: ControllerButtonEvent, handler: () => void) {\n            control.onEvent(event, this.id, handler);\n        }\n\n        /**\n         * Pauses until a button is pressed or released\n         */\n        //% weight=98 blockGap=8 help=controller/button/pause-until\n        //% blockId=keypauseuntil block=\"pause until %button **button** is %event\"\n        pauseUntil(event: ControllerButtonEvent) {\n            control.waitForEvent(event, this.id)\n        }\n\n        /**\n         * Indicates if the button is currently pressed\n        */\n        //% weight=96 blockGap=8 help=controller/button/is-pressed\n        //% blockId=keyispressed block=\"is %button **button** pressed\"\n        isPressed() {\n            return this._pressed;\n        }\n\n        __update(dtms: number) {\n            if (!this._pressed) return;\n            this._pressedElasped += dtms;\n            // inital delay\n            if (this._pressedElasped < this.repeatDelay) \n                return;\n            \n            // do we have enough time to repeat\n            const count = Math.floor((this._pressedElasped - this.repeatDelay) / this.repeatInterval);\n            if (count != this._repeatCount) {\n                this.raiseButtonRepeat();\n                this._repeatCount = count;\n            }\n        }\n    }\n\n    //% fixedInstance block=\"any\"\n    export const anyButton = new Button(0);\n\n    /**\n     * Get the horizontal movement, given the step and state of buttons\n     * @param step the distance, eg: 100\n     */\n    //% weight=50 blockGap=8 help=controller/dx\n    //% blockId=keysdx block=\"dx (left-right buttons)||scaled by %step\"\n    //% step.defl=100\n    export function dx(step: number = 100) {\n        const ctx = control.eventContext();\n        if (!ctx) return 0;\n\n        if (controller.left.isPressed()) {\n            if (controller.right.isPressed()) return 0\n            else return -step * ctx.deltaTime;\n        }\n        else if (controller.right.isPressed()) return step * ctx.deltaTime\n        else return 0\n    }\n\n    /**\n     * Get the vertical movement, given the step and state of buttons\n     * @param step the distance, eg: 100\n     */\n    //% weight=49 help=keys/dy\n    //% blockId=keysdy block=\"dy (up-down buttons)||scaled by %step\"\n    //% step.defl=100\n    export function dy(step: number = 100) {\n        const ctx = control.eventContext();\n        if (!ctx) return 0;\n\n        if (controller.up.isPressed()) {\n            if (controller.down.isPressed()) return 0\n            else return -step * ctx.deltaTime;\n        }\n        else if (controller.down.isPressed()) return step * ctx.deltaTime\n        else return 0\n    }\n\n    /**\n     * Pause the program until a button is pressed\n     */\n    //% weight=10\n    export function pauseUntilAnyButtonIsPressed() {\n        control.waitForEvent(KEY_DOWN, 0)\n    }\n\n    export function _setUserEventsEnabled(enabled: boolean) {\n        _userEventsEnabled = enabled;\n    }\n\n    /**\n     * Called by the game engine to update and/or raise events\n     */\n    export function __update(dt: number) {\n        if (!_activeButtons) return;\n        const dtms = (dt * 1000) | 0\n        _activeButtons.forEach(btn => btn.__update(dtms));\n    }\n}",
      "enums.ts": "const KEY_UP = 2048;\nconst KEY_DOWN = 2049;\nconst INTERNAL_KEY_UP = 2050;\nconst INTERNAL_KEY_DOWN = 2051;\nconst SYSTEM_KEY_UP = 2052;\nconst SYSTEM_KEY_DOWN = 2053;\nconst KEY_REPEAT = 2054;\nconst SYSTEM_KEY_REPEAT = 2055;\n",
      "pxt.json": "{\n    \"name\": \"controller\",\n    \"description\": \"Game controller\",\n    \"files\": [\n        \"enums.ts\",\n        \"controller.ts\",\n        \"targetoverrides.ts\"\n    ],\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"screen\": \"*\"\n    },\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"0.21.27\"\n    }\n}",
      "targetoverrides.ts": "namespace controller {\n    //% fixedInstance block=\"left\"\n    export const left = new Button(1);\n    //% fixedInstance block=\"up\"\n    export const up = new Button(2);\n    //% fixedInstance block=\"right\"\n    export const right = new Button(3);\n    //% fixedInstance block=\"down\"\n    export const down = new Button(4);\n\t//% fixedInstance block=\"A\"\n    export const A = new Button(5, input.buttonA.id(), DAL.DEVICE_BUTTON_EVT_UP, DAL.DEVICE_BUTTON_EVT_DOWN);\n    //% fixedInstance block=\"B\"\n    export const B = new Button(6, input.buttonB.id(), DAL.DEVICE_BUTTON_EVT_UP, DAL.DEVICE_BUTTON_EVT_DOWN);\n}"
    },
    "game": {
      "ask.ts": "// requires controller.A, Controller.B",
      "background.ts": "enum BackgroundAlignment {\n    //% block=\"left\"\n    Left = 1,\n    //% block=\"right\"\n    Right,\n    //% block=\"top\"\n    Top,\n    //% block=\"bottom\"\n    Bottom,\n    //% block=\"center\"\n    Center\n}\n\nnamespace scene {\n    export class Background {\n        color: number;\n        _image: Image;\n        camera: Camera;\n        private _layers: BackgroundLayer[];\n\n        constructor(camera: Camera) {\n            this.color = 0;\n            this.camera = camera;\n            this._layers = [];\n        }\n\n        public addLayer(pic: Image, distance: number, alignment: BackgroundAlignment) {\n            const layer = new BackgroundLayer(distance, alignment, pic);\n            this._layers.push(layer);\n            this._layers.sort((a, b) => b.distance - a.distance);\n            return layer;\n        }\n\n        get image() {\n            if (!this._image)\n                this._image = image.create(screen.width, screen.height);\n            return this._image;\n        }\n        \n        set image(image: Image) {\n            this._image = image;\n        }\n\n        render() {\n            screen.fill(this.color);\n            if (this._image)\n                screen.drawImage(this._image, 0, 0)\n            if (this._layers) {\n                this._layers.forEach(layer => {\n                    // compute displacement based on distance\n                    const ox = Math.round(this.camera.offsetX / (1 + layer.distance));\n                    const oy = Math.round(this.camera.offsetY / (1 + layer.distance));\n                    layer.render(ox, oy);\n                });\n            }\n        }\n    }\n\n\n    export class BackgroundLayer {\n        distance: number;\n        img: Image;\n        repeatX: boolean;\n        repeatY: boolean;\n        alignX: BackgroundAlignment;\n        alignY: BackgroundAlignment;\n\n        constructor(distance: number, alignment: BackgroundAlignment, img: Image) {\n            this.distance = Math.max(1, distance);\n            this.img = img;\n            switch (alignment) {\n                case BackgroundAlignment.Center:\n                    this.repeatX = true;\n                    this.repeatY = true;\n                    this.alignX = BackgroundAlignment.Center;\n                    this.alignY = BackgroundAlignment.Center;\n                    break;\n                case BackgroundAlignment.Left:\n                case BackgroundAlignment.Right:\n                    this.repeatX = false;\n                    this.repeatY = true;\n                    this.alignX = alignment;\n                    this.alignY = BackgroundAlignment.Center;\n                    break;\n                case BackgroundAlignment.Top:\n                case BackgroundAlignment.Bottom:\n                    this.repeatX = true;\n                    this.repeatY = false;\n                    this.alignX = BackgroundAlignment.Center;\n                    this.alignY = alignment;\n                    break;\n            }\n        }\n\n        render(offsetX: number, offsetY: number) {\n            const w = screen.width;\n            const h = screen.height;\n            const pw = this.img.width;\n            const ph = this.img.height;\n\n            if (!pw || !ph) return; // empty image.\n\n            // left, top aligned\n            let rx = -offsetX;\n            let ry = -offsetY;\n\n            switch (this.alignX) {\n                case BackgroundAlignment.Right: rx -= (w + pw); break;\n                case BackgroundAlignment.Center: rx -= (w + pw) >> 1; break;\n            }\n            switch (this.alignY) {\n                case BackgroundAlignment.Bottom: ry -= (h + ph); break;\n                case BackgroundAlignment.Center: ry -= (h + ph) >> 1; break;\n            }\n\n            rx %= w; if (rx < 0) rx += w;\n            ry %= h; if (ry < 0) ry += h;\n\n            // avoid subpixel aliasing\n            rx = Math.floor(rx);\n            ry = Math.floor(ry);\n\n            let y = 0;\n            let py = 0;\n            while (y < h) {\n                py = y % ph;\n                let dh = Math.min(ph - py, h - ry);\n                let x = 0;\n                let rxl = rx;\n                while (x < w) {\n                    let px = x % pw;\n                    let dw = Math.min(pw - px, w - rxl);\n                    screen.drawImage(this.img, rxl, ry);\n                    rxl = (rxl + dw) % w;\n                    x += this.repeatX ? dw : w;\n                }\n                ry = (ry + dh) % h;\n                y += this.repeatY ? dh : h;\n            }\n        }\n    }\n}",
      "camera.ts": "namespace scene {\n    export class Camera {\n        offsetX: number;\n        offsetY: number;\n        sprite: Sprite;\n        private oldOffsetX: number;\n        private oldOffsetY: number;\n\n        constructor() {\n            this.offsetX = 0;\n            this.offsetY = 0;\n\n            this.oldOffsetX = 0;\n            this.oldOffsetY = 0;\n        }\n\n        update() {\n            const scene = game.currentScene();\n\n            // if sprite, follow sprite\n            if (this.sprite) {\n                this.offsetX = this.sprite.x - (screen.width >> 1);\n                this.offsetY = this.sprite.y - (screen.height >> 1);\n            }\n\n            // don't escape tile map\n            if (scene.tileMap) {\n                this.offsetX = scene.tileMap.offsetX(this.offsetX);\n                this.offsetY = scene.tileMap.offsetY(this.offsetY);\n            }\n\n            this.offsetX |= 0;\n            this.offsetY |= 0;\n\n            if (this.oldOffsetX != this.offsetX\n                || this.oldOffsetY != this.offsetY) {\n                this.oldOffsetX = this.offsetX;\n                this.oldOffsetY = this.offsetY;\n            }\n        }\n    }\n}",
      "controller.ts": "namespace controller {\n    interface ControlledSprite {\n        s: Sprite;\n        vx: number;\n        vy: number;\n    }\n\n    let controlledSprites: ControlledSprite[];\n\n    /**\n     * Control a sprite using the direction buttons from the controller. Note that this\n     * control will take over the vx and vy of the sprite and overwrite any changes\n     * made unless a 0 is passed.\n     *\n     * @param sprite The Sprite to control\n     * @param vx The velocity used for horizontal movement when left/right is pressed\n     * @param vy The velocity used for vertical movement when up/down is pressed\n     */\n    //% blockId=\"game_control_sprite\" block=\"control sprite $sprite=variables_get(mySprite) with vx $vx vy $vy\"\n    //% weight=100\n    //% vx.defl=100 vy.defl=100\n    //% help=controller/control-sprite\n    export function controlSprite(sprite: Sprite, vx: number, vy: number) {\n        if (!sprite) return;\n        if (!controlledSprites) {\n            controlledSprites = [];\n            game.currentScene().eventContext.registerFrameHandler(19, () => {\n                controlledSprites.forEach(controlled => {\n                    if (controlled.vx) {\n                        controlled.s.vx = 0;\n\n                        if (controller.right.isPressed()) {\n                            controlled.s.vx = controlled.vx;\n                        }\n                        if (controller.left.isPressed()) {\n                            controlled.s.vx = -controlled.vx;\n                        }\n                    }\n\n                    if (controlled.vy) {\n                        controlled.s.vy = 0;\n\n                        if (controller.down.isPressed()) {\n                            controlled.s.vy = controlled.vy;\n                        }\n                        if (controller.up.isPressed()) {\n                            controlled.s.vy = -controlled.vy;\n                        }\n                    }\n                });\n            });\n        }\n\n        for (let i = 0; i < controlledSprites.length; i++) {\n            if (controlledSprites[i].s.id === sprite.id) {\n                controlledSprites[i].vx = vx;\n                controlledSprites[i].vy = vy;\n                return;\n            }\n        }\n        controlledSprites.push({ s: sprite, vx: vx, vy: vy });\n    }\n}\n",
      "game.ts": "/**\n * Game transitions and dialog\n **/\n//% color=#008272 weight=99 icon=\"\\uf111\"\n//% groups='[\"Gameplay\", \"Prompt\"]'\nnamespace game {\n    /**\n     * Determins if diagnostics are shown\n     */\n    export let debug = false;\n    export let gameOverSound: () => void = undefined;\n\n    let _scene: scene.Scene;\n    let _sceneStack: scene.Scene[];\n\n    export function currentScene(): scene.Scene {\n        init();\n        return _scene;\n    }\n\n    let __waitAnyButton: () => void\n    let __isOver = false;\n\n    export function setWaitAnyButton(f: () => void) {\n        __waitAnyButton = f\n    }\n\n    export function waitAnyButton() {\n        if (__waitAnyButton) __waitAnyButton()\n        else pause(3000)\n    }\n\n    export function eventContext(): control.EventContext {\n        init();\n        return _scene.eventContext;\n    }\n\n    function init() {\n        if (!_scene) _scene = new scene.Scene(control.pushEventContext());\n        _scene.init();\n    }\n\n    export function pushScene() {\n        init();\n        if (!_sceneStack) _sceneStack = [];\n        _sceneStack.push(_scene);\n        _scene = undefined;\n        init();\n    }\n\n    export function popScene() {\n        init();\n        if (_sceneStack && _sceneStack.length) {\n            _scene = _sceneStack.pop();\n            control.popEventContext();\n        }\n    }\n\n    function showDialogBackground(h: number, c: number) {\n        const top = (screen.height - h) >> 1;\n        screen.fillRect(0, top, screen.width, h, 0)\n        screen.drawLine(0, top, screen.width, top, 1)\n        screen.drawLine(0, top + h - 1, screen.width, top + h - 1, 1)\n\n        return top;\n    }\n\n    export function showDialog(title: string, subtitle: string, footer?: string) {\n        init();\n        const font = image.font8;\n        let h = 8;\n        if (title)\n            h += font.charHeight;\n        if (subtitle)\n            h += 2 + font.charHeight\n        h += 8;\n        const top = showDialogBackground(h, 9)\n        if (title)\n            screen.print(title, 8, top + 8, screen.isMono ? 1 : 7, font);\n        if (subtitle)\n            screen.print(subtitle, 8, top + 8 + font.charHeight + 2, screen.isMono ? 1 : 6, font);\n        if (footer) {\n            screen.print(\n                footer,\n                screen.width - footer.length * font.charWidth - 8,\n                screen.height - font.charHeight - 2,\n                1,\n                font\n            )\n        }\n    }\n\n    function meltScreen() {\n        for (let i = 0; i < 10; ++i) {\n            for (let j = 0; j < 1000; ++j) {\n                let x = Math.randomRange(0, screen.width - 1)\n                let y = Math.randomRange(0, screen.height - 3)\n                let c = screen.getPixel(x, y)\n                screen.setPixel(x, y + 1, c)\n                screen.setPixel(x, y + 2, c)\n            }\n            pause(100)\n        }\n    }\n\n    /**\n     * Finish the game and display the score\n     */\n    //% group=\"Gameplay\"\n    //% blockId=gameOver block=\"game over||win %win\"\n    //% weight=80 help=game/over\n    export function over(win: boolean = false) {\n        init();\n        if (__isOver) return\n        __isOver = true;\n        // clear all handlers\n        control.pushEventContext();\n        // one last screenshot\n        takeScreenshot();\n        control.runInParallel(() => {\n            if (gameOverSound) gameOverSound();\n            meltScreen();\n            let top = showDialogBackground(44, 4)\n            screen.printCenter(win ? \"YOU WIN!\" : \"GAME OVER!\", top + 8, screen.isMono ? 1 : 5, image.font8)\n            if (info.hasScore()) {\n                screen.printCenter(\"Score:\" + info.score(), top + 23, screen.isMono ? 1 : 2, image.font8)\n                if (info.score() > info.highScore()) {\n                    info.saveHighScore();\n                    screen.printCenter(\"New High Score!\", top + 34, screen.isMono ? 1 : 2, image.font5);\n                } else {\n                    screen.printCenter(\"HI\" + info.highScore(), top + 34, screen.isMono ? 1 : 2, image.font8);\n                }\n            }\n            pause(2000) // wait for users to stop pressing keys\n            waitAnyButton()\n            control.reset()\n        })\n    }\n\n    /**\n     * Tells the game host to grab a screenshot\n     */\n    //% shim=game::takeScreenshot\n    declare function takeScreenshot(): void;\n\n    /**\n     * Update the position and velocities of sprites\n     * @param body code to execute\n     */\n    //% group=\"Gameplay\"\n    //% help=game/update weight=100 afterOnStart=true\n    //% blockId=gameupdate block=\"on game update\"\n    //% blockAllowMultiple=1\n    export function onUpdate(a: () => void): void {\n        init();\n        if (!a) return;\n        game.eventContext().registerFrameHandler(20, a);\n    }\n\n    /**\n     * Run code on an interval of time. This executes before game.onUpdate()\n     * @param body code to execute\n     */\n    //% group=\"Gameplay\"\n    //% help=game/interval weight=99 afterOnStart=true\n    //% blockId=gameinterval block=\"on game update every %period=timePicker ms\"\n    //% blockAllowMultiple=1\n    export function onUpdateInterval(period: number, a: () => void): void {\n        init();\n        if (!a || period < 0) return;\n        let timer = 0;\n        game.eventContext().registerFrameHandler(19, () => {\n            const time = control.millis();\n            if (timer <= time) {\n                timer = time + period;\n                a();\n            }\n        });\n    }\n\n    /**\n     * Draw on screen before sprites\n     * @param body code to execute\n     */\n    //% group=\"Gameplay\"\n    //% help=game/paint weight=10 afterOnStart=true\n    export function onPaint(a: () => void): void {\n        init();\n        if (!a) return;\n        game.eventContext().registerFrameHandler(75, a);\n    }\n}",
      "hitbox.ts": "namespace game {\n    export class Hitbox {\n        parent: Sprite;\n        ox: number;\n        oy: number;\n        width: number;\n        height: number;\n\n        constructor(parent: Sprite, width: number, height: number, ox: number, oy: number) {\n            this.width = width;\n            this.height = height;\n            this.parent = parent;\n            this.ox = ox;\n            this.oy = oy;\n        }\n\n        get left() {\n            return this.parent.left + this.ox;\n        }\n\n        get top() {\n            return this.parent.top + this.oy;\n        }\n\n        get right() {\n            return this.left + this.width - 1;\n        }\n\n        get bottom() {\n            return this.top + this.height - 1;\n        }\n    }\n\n\n    export function calculateHitBoxes(s: Sprite): Hitbox[] {\n        const i = s.image;\n        let minX = i.width;\n        let minY = i.height;\n        let maxX = 0;\n        let maxY = 0;\n\n        for (let c = 0; c < i.width; c++) {\n            for (let r = 0; r < i.height; r++) {\n                if (i.getPixel(c, r)) {\n                    minX = Math.min(minX, c);\n                    minY = Math.min(minY, r);\n                    maxX = Math.max(maxX, c);\n                    maxY = Math.max(maxY, r);\n                }\n            }\n        }\n\n        const width = maxX - minX + 1;\n        const height = maxY - minY + 1;\n        if (width <= 0 || height <= 0) {\n            return [];\n        }\n        else if (width < 16 && height < 16) {\n            return [new Hitbox(s, width, height, minX, minY)]\n        }\n\n        const rows = Math.idiv(height, 15) + 1;\n        const columns = Math.idiv(width, 15) + 1;\n        const boxes: Hitbox[] = [];\n        for (let c = 0; c < columns; c++) {\n            let boxWidth = 15;\n            if (c === columns - 1) {\n                boxWidth = width % 15;\n            }\n\n            for (let r = 0; r < rows; r++) {\n                let boxHeight = 15;\n                if (r === rows - 1) {\n                    boxHeight = height % 15;\n                }\n                if (boxWidth > 0 && boxHeight > 0)\n                    boxes.push(new Hitbox(s, boxWidth, boxHeight, minX + c * 15, minY + r * 15));\n            }\n        }\n        return boxes;\n    }\n}",
      "info.ts": "\n/**\n * Head-up display\n *\n*/\n//% color=#AA5585 weight=80 icon=\"\\uf2bb\"\nnamespace info {\n\n    enum Visibility {\n        None = 0,\n        Countdown = 1 << 0,\n        Score = 1 << 1,\n        Life = 1 << 2,\n        All = ~(~0 << 3)\n    }\n\n    let _score: number = null;\n    let _highScore: number = null;\n    let _life: number = null;\n    let _hud: boolean = false;\n    let _gameEnd: number = undefined;\n    let _heartImage: Image;\n    let _multiplierImage: Image;\n    let _bgColor: number;\n    let _borderColor: number;\n    let _fontColor: number;\n    let _countdownExpired: boolean;\n    let _visibilityFlag: number = Visibility.None;\n\n\n    let _lifeOverHandler: () => void;\n    let _countdownEndHandler: () => void;\n\n    /**\n     * Color of the HUD display\n     */\n    let color = 1;\n\n    function initHUD() {\n        if (_hud) return;\n        _hud = true;\n\n        _heartImage = _heartImage || defaultHeartImage();\n\n        _multiplierImage = _multiplierImage || img`\n        1 . . . 1\n        . 1 . 1 .\n        . . 1 . .\n        . 1 . 1 .\n        1 . . . 1\n        `;\n\n        _bgColor = screen.isMono ? 0 : 1;\n        _borderColor = screen.isMono ? 1 : 3;\n        _fontColor = screen.isMono ? 1 : 3;\n        game.eventContext().registerFrameHandler(95, () => {\n            // show score\n            if (_score !== null && _visibilityFlag & Visibility.Score) {\n                drawScore();\n            }\n            // show life\n            if (_life !== null && _visibilityFlag & Visibility.Life) {\n                drawLives();\n                if (_life <= 0) {\n                    _life = null;\n                    if (_lifeOverHandler) {\n                        _lifeOverHandler();\n                    }\n                    else {\n                        game.over();\n                    }\n                }\n            }\n            // show countdown\n            if (_gameEnd !== undefined && _visibilityFlag & Visibility.Countdown) {\n                drawTimer(_gameEnd - control.millis())\n                let t = Math.max(0, _gameEnd - control.millis()) / 1000;\n                if (t <= 0) {\n                    t = 0;\n                    if (!_countdownExpired) {\n                        _countdownExpired = true;\n                        if (_countdownEndHandler) {\n                            _countdownEndHandler();\n                        }\n                        else {\n                            game.over();\n                        }\n                    }\n                }\n            }\n        })\n    }\n\n    function defaultHeartImage() {\n        return screen.isMono ?\n        img`\n        . 1 1 . 1 1 . .\n        1 . . 1 . . 1 .\n        1 . . . . . 1 .\n        1 . . . . . 1 .\n        . 1 . . . 1 . .\n        . . 1 . 1 . . .\n        . . . 1 . . . .\n`         :\n        img`\n        . c 2 2 . 2 2 .\n        c 2 2 2 2 2 4 2\n        c 2 2 2 2 4 2 2\n        c 2 2 2 2 2 2 2\n        . c 2 2 2 2 2 .\n        . . c 2 2 2 . .\n        . . . c 2 . . .\n        `;\n\n    }\n\n    function initScore() {\n        if (_score !== null) return\n        _score = 0;\n        _highScore = updateHighScore(_score);\n        updateFlag(Visibility.Score, true);\n        initHUD();\n    }\n\n    function initLife() {\n        if (_life !== null) return\n        _life = 3;\n        updateFlag(Visibility.Life, true);\n        initHUD();\n    }\n\n    /**\n     * Get the current score if any\n     */\n    //% weight=95 blockGap=8\n    //% blockId=hudScore block=\"score\"\n    //% help=info/score\n    export function score() {\n        initScore()\n        return _score || 0;\n    }\n\n    //%\n    export function hasScore() {\n        return _score !== null\n    }\n\n    /**\n     * Get the last recorded high score\n     */\n    //% weight=94\n    //% blockId=highScore block=\"high score\"\n    //% help=info/high-score\n    export function highScore(): number {\n        initScore();\n        return _highScore || 0;\n    }\n\n    /**\n     * Set the score\n     */\n    //% weight=93 blockGap=8\n    //% blockId=hudsetScore block=\"set score to %value\"\n    //% help=info/set-score\n    export function setScore(value: number) {\n        initScore()\n        _score = value | 0\n    }\n\n    /**\n     * Change the score by the given amount\n     * @param value the amount of change, eg: 1\n     */\n    //% weight=92\n    //% blockId=hudChangeScoreBy block=\"change score by %value\"\n    //% help=info/change-score-by\n    export function changeScoreBy(value: number) {\n        initScore();\n        setScore(_score + value)\n    }\n\n    /**\n     * Updates the high score based on the current score\n     */\n    export function saveHighScore() {\n        if (_score) {\n            updateHighScore(_score);\n        }\n    }\n\n    /**\n     * Get the number of lives\n     */\n    //% weight=85 blockGap=8\n    //% blockId=hudLife block=\"life\"\n    //% help=info/life\n    export function life() {\n        initLife()\n        return _life\n    }\n\n    //%\n    export function hasLife() {\n        return _life !== null\n    }\n\n    /**\n     * Set the number of lives\n     * @param value the number of lives, eg: 3\n     */\n    //% weight=84 blockGap=8\n    //% blockId=hudSetLife block=\"set life to %value\"\n    //% help=info/set-life\n    export function setLife(value: number) {\n        initLife()\n        _life = value | 0\n    }\n\n    /**\n     * Change the lives by the given amount\n     * @param value the change of lives, eg: -1\n     */\n    //% weight=83\n    //% blockId=hudChangeLifeBy block=\"change life by %value\"\n    //% help=info/change-life-by\n    export function changeLifeBy(value: number) {\n        initLife();\n        setLife(_life + value)\n    }\n\n    /**\n     * Run code when the player's life reaches 0. If this function\n     * is not called then game.over() is called instead\n     */\n    //% weight=82\n    //% blockId=gamelifeevent block=\"on life zero\"\n    //% help=info/on-life-zero\n    export function onLifeZero(handler: () => void) {\n        _lifeOverHandler = handler;\n    }\n\n    /**\n     * Start a countdown of the given duration in seconds\n     * @param duration the duration of the countdown, eg: 10\n     */\n    //% blockId=gamecountdown block=\"start countdown %duration (s)\"\n    //% help=info/start-countdown weight=79 blockGap=8\n    export function startCountdown(duration: number) {\n        initHUD();\n        _gameEnd = control.millis() + duration * 1000;\n        updateFlag(Visibility.Countdown, true);\n        _countdownExpired = false;\n    }\n\n    /**\n     * Stop the current countdown and hides the timer display\n     */\n    //% blockId=gamestopcountdown block=\"stop countdown\" weight=78\n    //% help=info/stop-countdown\n    export function stopCountdown() {\n        _gameEnd = undefined;\n        updateFlag(Visibility.Countdown, false);\n        _countdownExpired = true;\n    }\n\n    /**\n     * Run code when the countdown reaches 0. If this function\n     * is not called then game.over() is called instead\n     */\n    //% blockId=gamecountdownevent block=\"on countdown end\" weight=77\n    //% help=info/on-countdown-end\n    export function onCountdownEnd(handler: () => void) {\n        _countdownEndHandler = handler;\n    }\n\n    /**\n     * Replaces the image used to represent the player's lives. Images\n     * should be no larger than 8x8\n     */\n    //%\n    export function setLifeImage(image: Image) {\n        _heartImage = image;\n    }\n\n    /**\n     * Set whether life should be displayed\n     * @param on if true, lives are shown; otherwise, lives are hidden\n     */\n    export function showLife(on: boolean) {\n        initLife();\n        updateFlag(Visibility.Life, on);\n    }\n\n    /**\n     * Set whether score should be displayed\n     * @param on if true, score is shown; otherwise, score is hidden\n     */\n    export function showScore(on: boolean) {\n        initScore();\n        updateFlag(Visibility.Score, on);\n    }\n\n    /**\n     * Set whether score should be displayed\n     * @param on if true, score is shown; otherwise, score is hidden\n     */\n    export function showCountdown(on: boolean) {\n        updateFlag(Visibility.Countdown, on);\n    }\n\n\n    function updateFlag(flag: Visibility, on: boolean) {\n        if (on) _visibilityFlag |= flag;\n        else _visibilityFlag &= Visibility.All ^ flag;\n    }\n\n    /**\n     * Sets the color of the borders around the score, countdown, and life\n     * elements. Defaults to 3\n     * @param color The index of the color (0-15)\n     */\n    export function setBorderColor(color: number) {\n        _borderColor = Math.min(Math.max(color, 0), 15) | 0;\n    }\n\n    /**\n     * Sets the color of the background of the score, countdown, and life\n     * elements. Defaults to 1\n     * @param color The index of the color (0-15)\n     */\n    export function setBackgroundColor(color: number) {\n        _bgColor = Math.min(Math.max(color, 0), 15) | 0;\n    }\n\n    /**\n     * Sets the color of the text used in the score, countdown, and life\n     * elements. Defaults to 3\n     * @param color The index of the color (0-15)\n     */\n    export function setFontColor(color: number) {\n        _fontColor = Math.min(Math.max(color, 0), 15) | 0;\n    }\n\n    /**\n     * Get the current color of the borders around the score, countdown, and life\n     * elements\n     */\n    export function borderColor(): number {\n        return _borderColor ? _borderColor : 3;\n    }\n\n    /**\n     * Get the current color of the background of the score, countdown, and life\n     * elements\n     */\n    export function backgroundColor(): number {\n        return _bgColor ? _bgColor : 1;\n    }\n\n    /**\n     * Get the current color of the text usded in the score, countdown, and life\n     * elements\n     */\n    export function fontColor(): number {\n        return _fontColor ? _fontColor : 3;\n    }\n    \n    function drawTimer(millis: number) {\n        if (millis < 0) millis = 0;\n        millis |= 0;\n\n        const font = image.font8;\n        const smallFont = image.font5;\n        const seconds = Math.idiv(millis, 1000);\n        const width = font.charWidth * 5 - 2;\n        let left = (screen.width >> 1) - (width >> 1) + 1;\n        let color1 = _fontColor;\n        let color2 = _bgColor;\n\n        if (seconds < 10 && (seconds & 1) && !screen.isMono) {\n            const temp = color1;\n            color1 = color2;\n            color2 = temp;\n        }\n\n        screen.fillRect(left - 3, 0, width + 6, font.charHeight + 3, _borderColor)\n        screen.fillRect(left - 2, 0, width + 4, font.charHeight + 2, color2)\n\n\n        if (seconds < 60) {\n            left += 3\n            const top = 1;\n            const remainder = Math.idiv(millis % 1000, 10);\n\n            screen.print(formatDecimal(seconds) + \".\", left, top, color1, font)\n            const decimalLeft = left + 3 * font.charWidth - 2;\n            screen.print(formatDecimal(remainder), decimalLeft, top + 2, color1, smallFont)\n        }\n        else {\n            const minutes = Math.idiv(seconds, 60);\n            const remainder = seconds % 60;\n            screen.print(formatDecimal(minutes) + \":\" + formatDecimal(remainder), left, 1, color1, font);\n        }\n    }\n\n    function drawScore() {\n        const s = score() | 0;\n\n        let font: image.Font;\n        let offsetY: number;\n        if (s >= 1000000) {\n            offsetY = 2;\n            font = image.font5;\n        }\n        else {\n            offsetY = 1;\n            font = image.font8;\n        }\n\n        const num = s.toString();\n        const width = num.length * font.charWidth;\n\n        screen.fillRect(screen.width - width - 2, 0, screen.width, image.font8.charHeight + 3, _borderColor)\n        screen.fillRect(screen.width - width - 1, 0, screen.width, image.font8.charHeight + 2, _bgColor)\n        screen.print(num, screen.width - width, offsetY, _fontColor, font);\n    }\n\n    function drawLives() {\n        if (_life <= 0) return;\n\n        const font = image.font8;\n        if (_life <= 4) {\n            screen.fillRect(0, 0, _life * (_heartImage.width + 1) + 3, _heartImage.height + 4, _borderColor);\n            screen.fillRect(0, 0, _life * (_heartImage.width + 1) + 2,  _heartImage.height + 3, _bgColor);\n            for (let i = 0; i < _life; i++) {\n                screen.drawTransparentImage(_heartImage, 1 + i * (_heartImage.width + 1), 1);\n            }\n        }\n        else {\n            const num = _life.toString();\n            const textWidth = num.length * font.charWidth - 1;\n            screen.fillRect(0, 0, _heartImage.width + _multiplierImage.width + textWidth + 5, _heartImage.height + 4, _borderColor)\n            screen.fillRect(0, 0, _heartImage.width + _multiplierImage.width + textWidth + 4, _heartImage.height + 3, _bgColor)\n            screen.drawTransparentImage(_heartImage, 1, 1);\n\n            let mult = _multiplierImage.clone();\n            mult.replace(1, _fontColor);\n\n            screen.drawTransparentImage(mult, _heartImage.width + 2,  font.charHeight - _multiplierImage.height - 1);\n            screen.print(num, _heartImage.width + 3 + _multiplierImage.width, 1, _fontColor, font);\n        }\n    }\n\n    function formatDecimal(val: number) {\n        val |= 0;\n        if (val < 10) {\n            return \"0\" + val;\n        }\n        return val.toString();\n    }\n}\n\ndeclare namespace info {\n    /**\n     * Sends the current score and the new high score\n     */\n    //% shim=info::updateHighScore\n    function updateHighScore(score: number): number;\n}\n",
      "mathUtil.ts": "namespace Math {\n    /**\n     * Returns a random boolean that is true the given percentage of the time.\n     * @param percentage The percentage chance that the returned value will be true from 0 - 100\n     */\n    //% weight=2\n    //% blockId=percentchance block=\"%percentage|\\\\% chance\"\n    //% percentage.min=0 percentage.max=100;\n    export function percentChance(percentage: number): boolean {\n        if (percentage >= 100) {\n            return true;\n        }\n        else if (percentage <= 0) {\n            return false;\n        }\n        return Math.randomRange(0, 99) < percentage;\n    }\n\n    /**\n     * Returns a random element from the given list\n     * @param list The list to choose an element from\n     */\n    //% weight=1\n    //% blockId=pickrandomarray block=\"random item from %list=variables_get\"\n    export function pickRandom<T>(list: T[]) {\n        if (!list || list.length == 0) {\n            return undefined;\n        }\n        return list[Math.randomRange(0, list.length - 1)];\n    }\n}",
      "metrics.ts": "namespace performance {\n    export let enabled = false;\n    export function track(name: string, value: number) {\n        if (enabled) console.log(`<${name} val=${value}>`);\n    }\n\n    export function startTimer(name: string) {\n        if (enabled) console.log(`<${name} start=${control.millis()}>`);\n    }\n\n    export function stopTimer(name: string) {\n        if (enabled) console.log(`<${name} end=${control.millis()}>`);\n    }\n}",
      "obstacle.ts": "namespace sprites {\n    enum ObstacleFlags {\n        Moved = 1 << 4,\n        Dead = 1 << 5\n    }\n\n    export interface Obstacle {\n        x: number;\n        y: number;\n        left: number;\n        right: number;\n        top: number;\n        bottom: number;\n        width: number;\n        height: number;\n        layer: number;\n        image: Image;\n        tileIndex: number;\n    }\n\n    export class StaticObstacle implements Obstacle {\n        layer: number;\n        image: Image;\n        tileIndex: number;\n\n        top: number;\n        left: number;\n\n        constructor(image: Image, top: number, left: number, layer: number, tileIndex?: number) {\n            this.image = image;\n            this.layer = layer;\n            this.top = top;\n            this.left = left;\n            this.tileIndex = tileIndex;\n        }\n\n        get x(): number {\n            return this.left + this.width >> 1;\n        }\n\n        get y(): number {\n            return this.top + this.height >> 1;\n        }\n\n        get height(): number {\n            return this.image.height;\n        }\n\n        get width(): number {\n            return this.image.width;\n        }\n\n        get bottom(): number {\n            return this.top + this.height;\n        }\n\n        get right(): number {\n            return this.left + this.width;\n        }\n    }\n}",
      "physics.ts": "class PhysicsEngine {\n    constructor() {\n    }\n\n    /**\n     * Adds sprite to the physics\n     * @param sprite\n     */\n    addSprite(sprite: Sprite) { }\n\n    removeSprite(sprite: Sprite) { }\n\n    moveSprite(s: Sprite, tm: tiles.TileMap, dx: number, dy: number) { }\n\n    draw() { }\n\n    /** Apply physics */\n    move(dt: number) { }\n\n    /**\n     * Apply collisions\n     */\n    collisions() { }\n\n    overlaps(sprite: Sprite): Sprite[] { return []; }\n}\n\nconst MAX_DISTANCE = 15; // pixels\nconst MAX_TIME_STEP = 0.1; // seconds\nconst MAX_VELOCITY = MAX_DISTANCE / MAX_TIME_STEP;\nconst GAP = 0.1;\n\n/**\n * A physics engine that does simple AABB bounding box check\n */\nclass ArcadePhysicsEngine extends PhysicsEngine {\n    protected sprites: Sprite[];\n    protected map: sprites.SpriteMap;\n\n    constructor() {\n        super();\n        this.sprites = [];\n    }\n\n    addSprite(sprite: Sprite) {\n        this.sprites.push(sprite);\n    }\n\n    removeSprite(sprite: Sprite) {\n        this.sprites.removeElement(sprite);\n    }\n\n    draw() {\n        if (this.map)\n            this.map.draw();\n    }\n\n    move(dt: number) {\n        dt = Math.min(MAX_TIME_STEP, dt);\n        const dt2 = dt / 2;\n\n        const tm = game.currentScene().tileMap;\n\n        for (let s of this.sprites) {\n            const ovx = constrain(s.vx);\n            const ovy = constrain(s.vy);\n\n            s.vx = constrain(s.vx + s.ax * dt)\n            s.vy = constrain(s.vy + s.ay * dt)\n\n            this.moveSprite(s, tm, (s.vx + ovx) * dt2, (s.vy + ovy) * dt2);\n        }\n    }\n\n    collisions() {\n        // 1: clear obstacles\n        for (let i = 0; i < this.sprites.length; ++i)\n            this.sprites[i].clearObstacles();\n\n        // 2: refresh non-ghost collision map\n        const colliders = this.sprites.filter(sprite => !(sprite.flags & sprites.Flag.Ghost));\n\n        if (colliders.length < 10) {\n            // not enough sprite, just brute force it\n            this.map = undefined;\n        } else {\n            if (!this.map) this.map = new sprites.SpriteMap();\n            this.map.update(colliders);\n        }\n\n        // 3: go through sprite and handle collisions\n        const scene = game.currentScene();\n        const tm = scene.tileMap;\n\n        for (const sprite of colliders) {\n            const overSprites = scene.physicsEngine.overlaps(sprite);\n            for (const overlapper of overSprites) {\n                // overlap handler\n                const tmpsprite = sprite;\n                const tmp = overlapper;\n                const oh = sprite.overlapHandler;\n                if (oh)\n                    control.runInParallel(() => oh(tmp))\n                scene.overlapHandlers\n                    .filter(h => h.type == sprite.type && h.otherType == overlapper.type)\n                    .forEach(h => control.runInParallel(() => h.handler(tmpsprite, tmp)));\n            }\n\n            const xDiff = sprite.x - sprite._lastX;\n            const yDiff = sprite.y - sprite._lastY;\n            if ((xDiff !== 0 || yDiff !== 0) && Math.abs(xDiff) < MAX_DISTANCE && Math.abs(yDiff) < MAX_DISTANCE) {\n                // Undo the move\n                sprite.x = sprite._lastX;\n                sprite.y = sprite._lastY;\n\n                // Now move it with the tilemap in mind\n                this.moveSprite(sprite, tm, xDiff, yDiff);\n            }\n        }\n    }\n\n    /**\n     * Returns sprites that overlap with the given sprite. If type is non-zero, also filter by type.\n     * @param sprite\n     * @param layer\n     */\n    overlaps(sprite: Sprite): Sprite[] {\n        if (this.map)\n            return this.map.overlaps(sprite);\n        else {\n            // brute force\n            const layer = sprite.layer;\n            const r: Sprite[] = [];\n            const n = this.sprites.length;\n            for (let i = 0; i < n; ++i) {\n                if ((layer & this.sprites[i].layer)\n                    && sprite.overlapsWith(this.sprites[i]))\n                    r.push(this.sprites[i]);\n            }\n            return r;\n        }\n    }\n\n    public moveSprite(s: Sprite, tm: tiles.TileMap, dx: number, dy: number) {\n        if (dx === 0 && dy === 0) {\n            s._lastX = s.x;\n            s._lastY = s.y;\n            return;\n        }\n\n        if (tm && !(s.flags & sprites.Flag.Ghost)) {\n            s._hitboxes.forEach(box => {\n                const t0 = box.top >> 4;\n                const r0 = box.right >> 4;\n                const b0 = box.bottom >> 4;\n                const l0 = box.left >> 4;\n\n                if (dx > 0) {\n                    let topCollide = tm.isObstacle(r0 + 1, t0);\n                    if (topCollide || tm.isObstacle(r0 + 1, b0)) {\n                        const nextRight = box.right + dx;\n                        const maxRight = ((r0 + 1) << 4) - GAP\n                        if (nextRight > maxRight) {\n                            dx -= (nextRight - maxRight);\n                            s.registerObstacle(CollisionDirection.Right, tm.getObstacle(r0 + 1, topCollide ? t0 : b0))\n                        }\n                    }\n                }\n                else if (dx < 0) {\n                    const topCollide = tm.isObstacle(l0 - 1, t0);\n                    if (topCollide || tm.isObstacle(l0 - 1, b0)) {\n                        const nextLeft = box.left + dx;\n                        const minLeft = (l0 << 4) + GAP;\n                        if (nextLeft < minLeft) {\n                            dx -= (nextLeft - minLeft);\n                            s.registerObstacle(CollisionDirection.Left, tm.getObstacle(l0 - 1, topCollide ? t0 : b0))\n                        }\n                    }\n                }\n\n                if (dy > 0) {\n                    const rightCollide = tm.isObstacle(r0, b0 + 1);\n                    if (rightCollide || tm.isObstacle(l0, b0 + 1)) {\n                        const nextBottom = box.bottom + dy;\n                        const maxBottom = ((b0 + 1) << 4) - GAP;\n                        if (nextBottom > maxBottom) {\n                            dy -= (nextBottom - maxBottom);\n                            s.registerObstacle(CollisionDirection.Bottom, tm.getObstacle(rightCollide ? r0 : l0, b0 + 1))\n                        }\n                    }\n                }\n                else if (dy < 0) {\n                    const rightCollide = tm.isObstacle(r0, t0 - 1);\n                    if (tm.isObstacle(r0, t0 - 1) || tm.isObstacle(l0, t0 - 1)) {\n                        const nextTop = box.top + dy;\n                        const minTop = (t0 << 4) + GAP;\n                        if (nextTop < minTop) {\n                            dy -= (nextTop - minTop);\n                            s.registerObstacle(CollisionDirection.Top, tm.getObstacle(rightCollide ? r0 : l0, t0 - 1))\n                        }\n                    }\n                }\n\n                // Now check each corner and bump out if necessary. This step is needed for\n                // the case where a hitbox goes diagonally into the corner of a tile.\n                const t1 = (box.top + dy) >> 4;\n                const r1 = (box.right + dx) >> 4;\n                const b1 = (box.bottom + dy) >> 4;\n                const l1 = (box.left + dx) >> 4;\n\n                if (tm.isObstacle(r1, t1)) {\n                    // bump left\n                    dx -= (box.right + dx - ((r1 << 4) - GAP))\n                    s.registerObstacle(CollisionDirection.Right, tm.getObstacle(r1, t1));\n                }\n                else if (tm.isObstacle(l1, t1)) {\n                    // bump right\n                    dx -= (box.left + dx - (((l1 + 1) << 4) + GAP));\n                    s.registerObstacle(CollisionDirection.Left, tm.getObstacle(l1, t1));\n                }\n                else {\n                    const rightCollide = tm.isObstacle(r1, b1);\n                    if (rightCollide || tm.isObstacle(l1, b1)) {\n                        // bump up because that is usually better for platformers\n                        dy -= (box.bottom + dy - ((b1 << 4) - GAP));\n                        s.registerObstacle(CollisionDirection.Bottom, tm.getObstacle(rightCollide ? r1 : l1, b1));\n                    }\n                }\n            });\n        }\n\n        s.x += dx;\n        s.y += dy;\n        s._lastX = s.x;\n        s._lastY = s.y;\n    }\n}\n\nfunction constrain(v: number) {\n    return Math.abs(v) > MAX_VELOCITY ? Math.sign(v) * MAX_VELOCITY : v;\n}",
      "prompt.ts": "// requires A, B",
      "pxt.json": "{\n    \"dependencies\": {\n        \"screen\": \"*\",\n        \"music\": \"*\",\n        \"controller\": \"*\"\n    },\n    \"name\": \"game\",\n    \"description\": \"The game and sprite library - beta\",\n    \"files\": [\n        \"controller.ts\",\n        \"hitbox.ts\",\n        \"sprites.ts\",\n        \"sprite.ts\",\n        \"spritemap.ts\",\n        \"spriteevents.ts\",\n        \"metrics.ts\",\n        \"obstacle.ts\",\n        \"physics.ts\",\n        \"info.ts\",\n        \"background.ts\",\n        \"tilemap.ts\",\n        \"camera.ts\",\n        \"scene.ts\",\n        \"scenes.ts\",\n        \"textDialogs.ts\",\n        \"game.ts\",\n        \"prompt.ts\",\n        \"ask.ts\",\n        \"targetoverrides.cpp\",\n        \"targetoverrides.ts\",\n        \"mathUtil.ts\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"0.21.27\"\n    }\n}",
      "scene.ts": "/**\n * Control the background, tiles and camera\n */\n//% groups='[\"Background\", \"Tiles\", \"Camera\"]'\nnamespace scene {\n    export enum Flag {\n        NeedsSorting = 1 << 1,\n    }\n\n    export interface SpriteHandler {\n        type: number;\n        handler: (sprite: Sprite) => void;\n    }\n\n    export interface OverlapHandler {\n        type: number;\n        otherType: number;\n        handler: (sprite: Sprite, otherSprite: Sprite) => void;\n    }\n\n    export interface CollisionHandler {\n        type: number;\n        tile: number;\n        handler: (sprite: Sprite) => void\n    }\n\n    export class Scene {\n        eventContext: control.EventContext;\n        background: Background;\n        tileMap: tiles.TileMap;\n        allSprites: SpriteLike[];\n        spritesByKind: Sprite[][];\n        physicsEngine: PhysicsEngine;\n        camera: scene.Camera;\n        flags: number;\n        destroyedHandlers: SpriteHandler[];\n        createdHandlers: SpriteHandler[];\n        overlapHandlers: OverlapHandler[];\n        collisionHandlers: CollisionHandler[];\n\n        constructor(eventContext: control.EventContext) {\n            this.eventContext = eventContext;\n            this.flags = 0;\n            this.physicsEngine = new ArcadePhysicsEngine();\n            this.camera = new scene.Camera();\n            this.background = new Background(this.camera);\n            this.destroyedHandlers = [];\n            this.createdHandlers = [];\n            this.overlapHandlers = [];\n            this.collisionHandlers = [];\n            this.spritesByKind = [];\n        }\n\n        init() {\n            if (this.allSprites) return;\n\n            this.allSprites = [];\n            scene.setBackgroundColor(0)\n            // update controller state\n            this.eventContext.registerFrameHandler(8, () => {\n                performance.startTimer(\"controller_update\")\n                const dt = this.eventContext.deltaTime;\n                controller.__update(dt);\n                performance.stopTimer(\"controller_update\")\n            })\n            // update sprites in tilemap\n            this.eventContext.registerFrameHandler(9, () => {\n                if (this.tileMap) {\n                    performance.startTimer(\"tilemap_update\")\n                    this.tileMap.update(this.camera);\n                    performance.stopTimer(\"tilemap_update\")\n                }\n            })\n            // apply physics 10\n            this.eventContext.registerFrameHandler(10, () => {\n                performance.startTimer(\"physics\")\n                const dt = this.eventContext.deltaTime;\n                this.physicsEngine.move(dt);\n                performance.stopTimer(\"physics\")\n            })\n            // user update 20\n            // apply collisions 30\n            this.eventContext.registerFrameHandler(30, () => {\n                performance.startTimer(\"collisions\")\n                const dt = this.eventContext.deltaTime;\n                this.physicsEngine.collisions();\n                this.camera.update();\n                for (const s of this.allSprites)\n                    s.__update(this.camera, dt);\n                performance.stopTimer(\"collisions\")\n            })\n            // render background 60\n            this.eventContext.registerFrameHandler(60, () => {\n                this.background.render();\n            })\n            // paint 75\n            // render sprites 90\n            this.eventContext.registerFrameHandler(90, () => {\n                if (this.flags & Flag.NeedsSorting)\n                this.allSprites.sort(function (a, b) { return a.z - b.z || a.id - b.id; })\n                performance.startTimer(\"sprite_draw\")\n                for (const s of this.allSprites)\n                    s.__draw(this.camera);\n                performance.stopTimer(\"sprite_draw\")\n            })\n            // render diagnostics\n            this.eventContext.registerFrameHandler(150, () => {\n                if (game.debug)\n                    this.physicsEngine.draw();\n                // clear flags\n                this.flags = 0;\n            });\n            // update screen\n            this.eventContext.registerFrameHandler(200, control.__screen.update);\n        }\n    }\n}",
      "scenes.ts": "/**\n * Control the background, tiles and camera\n */\n//% weight=88 color=\"#401255\" icon=\"\\uf1bb\"\n//% groups='[\"Screen\", \"Tiles\", \"Collisions\", \"Camera\"]'\n//% blockGap=8\nnamespace scene {\n    /**\n     * Get the width of the screen in pixels\n     */\n    //% blockId=scenescreenwidth block=\"screen width\"\n    //% group=\"Screen\"\n    //% weight=100 blockGap=8\n    //% help=scene/screen-width\n    export function screenWidth(): number {\n        return screen.width;\n    }\n\n    /**\n     * Gets the height of the screen in pixels\n     */\n    //% blockId=scenescreenheight block=\"screen height\"\n    //% group=\"Screen\"\n    //% weight=99\n    //% help=scene/screen-width\n    export function screenHeight(): number {\n        return screen.height;\n    }\n\n    /**\n     * Set the game background color\n     * @param color\n     */\n    //% group=\"Screen\"\n    //% weight=25\n    //% blockId=gamesetbackgroundcolor block=\"set background color to %color=colorindexpicker\"\n    //% help=scene/set-background-color\n    export function setBackgroundColor(color: number) {\n        const scene = game.currentScene();\n        scene.background.color = color;\n    }\n\n    /**\n     * Get the game background color\n     * @param color\n     */\n    //% group=\"Screen\"\n    //% weight=22\n    //% blockId=gamebackgroundcolor block=\"background color\"\n    //% help=scene/background-color\n    export function backgroundColor() : number {\n        const scene = game.currentScene();\n        return scene.background.color;\n    }\n\n    /**\n     * Set a picture as the background\n     */\n    //% group=\"Screen\"\n    //% weight=24\n    //% blockId=gamesetbackgroundimage block=\"set background image to %img=background_image_picker\"\n    //% help=scene/set-background-image\n    export function setBackgroundImage(img: Image) {\n        const scene = game.currentScene();\n        scene.background.image = img;\n    }\n\n    /**\n     * Get the current background image\n     */\n    //% weight=22\n    //% group=\"Screen\"\n    //% blockId=gamebackgroundimage block=\"background image\"\n    //% help=scene/background-image\n    export function backgroundImage(): Image {\n        const scene = game.currentScene();\n        return scene.background.image;\n    }\n\n    /**\n     * Adds a moving background layer\n     * @param distance distance of the layer which determines how fast it moves, eg: 10\n     * @param img\n     */\n    //% group=\"Screen\"\n    //% weight=10\n    export function addBackgroundLayer(image: Image, distance?: number, alignment?: BackgroundAlignment) {\n        const scene = game.currentScene();\n        if (image)\n            scene.background.addLayer(image, distance || 100, alignment || BackgroundAlignment.Bottom);\n    }\n\n    /**\n     * Set the map for placing tiles in the scene\n     * @param map\n     */\n    //% blockId=gamesettilemap block=\"set tile map to %map=tilemap_image_picker\"\n    //% group=\"Tiles\"\n    //% help=scene/set-tile-map\n    export function setTileMap(map: Image) {\n        const scene = game.currentScene();\n        if (!scene.tileMap)\n            scene.tileMap = new tiles.TileMap();\n        scene.tileMap.setMap(map);\n    }\n\n    /**\n     * Set a tile at the given index\n     * @param tile\n     * @param index\n     */\n    //% blockId=gamesettileat block=\"set %tile=gamegettile to %index=colorindexpicker\"\n    //% group=\"Tiles\"\n    //% weight=30\n    //% help=scene/set-tile-at\n    export function setTileAt(tile: tiles.Tile, index: number) {\n        const scene = game.currentScene();\n        if (!scene.tileMap)\n            scene.tileMap = new tiles.TileMap();\n        scene.tileMap.setTileAt(tile.x >> 4, tile.y >> 4, index);\n    }\n\n    /**\n     * Set an image as a tile at the given index. Tiles should be a 16x16 image\n     * @param index\n     * @param img\n     */\n    //% blockId=gamesettile block=\"set tile %index=colorindexpicker to %img=screen_image_picker||with wall %wall=toggleOnOff\"\n    //% group=\"Tiles\"\n    //% help=scene/set-tile\n    export function setTile(index: number, img: Image, wall?: boolean) {\n        const scene = game.currentScene();\n        if (!scene.tileMap)\n            scene.tileMap = new tiles.TileMap();\n        scene.tileMap.setTile(index, img, !!wall);\n    }\n\n    /**\n     * Get the tile at a position in the tile map\n     * @param col\n     * @param row\n     */\n    //% blockId=gamegettile block=\"tile col %col row %row\"\n    //% group=\"Tiles\" blockSetVariable=\"myTile\"\n    //% help=scene/get-tile\n    export function getTile(col: number, row: number): tiles.Tile {\n        const scene = game.currentScene();\n        if (!scene.tileMap)\n            scene.tileMap = new tiles.TileMap();\n        return scene.tileMap.getTile(col, row);\n    }\n\n    /**\n     * Get all tiles in the tile map with the given index.\n     * @param index\n     */\n    //% blockId=gamegettilestype block=\"array of all %index=colorindexpicker tiles\"\n    //% group=\"Tiles\" blockSetVariable=\"tile list\"\n    //% help=scene/get-tiles-by-type\n    export function getTilesByType(index: number): tiles.Tile[] {\n        const scene = game.currentScene();\n        if (!scene.tileMap)\n            scene.tileMap = new tiles.TileMap();\n        return scene.tileMap.getTilesByType(index);\n    }\n\n    /**\n     * Set the game camera to follow a sprite\n     * @param sprite\n     */\n    //% blockId=camerafollow block=\"camera follow sprite %sprite=variables_get(mySprite)\"\n    //% group=\"Camera\"\n    //% help=scene/camera-follow-sprite\n    export function cameraFollowSprite(sprite: Sprite) {\n        const scene = game.currentScene();\n        scene.camera.sprite = sprite;\n    }\n\n    /**\n     * Moves the camera center to a coordinate position\n     * @param sprite\n     */\n    //% blockId=camerapos block=\"center camera at x %x y %y\"\n    //% group=\"Camera\"\n    //% help=scene/center-camera-at\n    export function centerCameraAt(x: number, y: number) {\n        const scene = game.currentScene();\n        scene.camera.sprite = undefined;\n        scene.camera.offsetX = x - (screen.width >> 1);\n        scene.camera.offsetY = y - (screen.height >> 1);\n    }\n}",
      "sprite.ts": "enum SpriteFlag {\n    //% block=\"ghost\"\n    Ghost = sprites.Flag.Ghost,\n    //% block=\"auto destroy\"\n    AutoDestroy = sprites.Flag.AutoDestroy,\n    //% block=\"stay in screen\"\n    StayInScreen = sprites.Flag.StayInScreen\n}\n\nenum CollisionDirection {\n    //% block=\"left\"\n    Left = 0,\n    //% block=\"top\"\n    Top = 1,\n    //% block=\"right\"\n    Right = 2,\n    //% block=\"bottom\"\n    Bottom = 3\n}\n\ninterface SpriteLike {\n    z: number;\n    id: number;\n    __update(camera: scene.Camera, dt: number): void;\n    __draw(camera: scene.Camera): void;\n}\n\nenum FlipOption {\n    //% block=none\n    None,\n    //% block=\"flip x\"\n    FlipX,\n    //% block=\"flip y\"\n    FlipY,\n    //% block=\"flip x+y\"\n    FlipXY\n}\n\n/**\n * A sprite on the screen\n **/\n//% blockNamespace=sprites color=\"#4B7BEC\" blockGap=8\nclass Sprite implements SpriteLike {\n    //% group=\"Properties\" blockSetVariable=\"mySprite\"\n    //% blockCombine block=\"x (horizontal position)\"\n    x: number\n    //% group=\"Properties\" blockSetVariable=\"mySprite\"\n    //% blockCombine block=\"y (vertical position)\"\n    y: number\n    private _z: number\n    //% group=\"Properties\" blockSetVariable=\"mySprite\"\n    //% blockCombine block=\"vx (velocity x)\"\n    vx: number\n    //% group=\"Properties\" blockSetVariable=\"mySprite\"\n    //% blockCombine block=\"vy (velocity y)\"\n    vy: number\n    //% group=\"Properties\" blockSetVariable=\"mySprite\"\n    //% blockCombine block=\"ax (acceleration x)\"\n    ax: number\n    //% group=\"Properties\" blockSetVariable=\"mySprite\"\n    //% blockCombine block=\"ay (acceleration y)\"\n    ay: number\n\n    _type: number;\n\n    /**\n     * A bitset of layer. Each bit is a layer, default is 1.\n     */\n    //% group=\"Properties\"\n    layer: number;\n\n    _lastX: number;\n    _lastY: number;\n\n    _action: number; //Used with animation library\n\n    /**\n     * Time to live in game ticks. The lifespan decreases by 1 on each game update\n     * and the sprite gets destroyed when it reaches 0.\n     */\n    //% group=\"Properties\" blockSetVariable=\"mySprite\"\n    //% blockCombine block=\"lifespan\"\n    lifespan: number;\n    private _image: Image;\n    private _obstacles: sprites.Obstacle[];\n\n    private updateSay: (dt: number, camera: scene.Camera) => void;\n    private sayBubbleSprite: Sprite;\n\n    _hitboxes: game.Hitbox[];\n\n    flags: number\n    id: number\n\n    overlapHandler: (other: Sprite) => void;\n    collisionHandlers: (() => void)[][];\n    private destroyHandler: () => void;\n\n    constructor(img: Image) {\n        this.x = screen.width >> 1;\n        this.y = screen.height >> 1;\n        this._z = 0\n        this._lastX = this.x;\n        this._lastY = this.y;\n        this.vx = 0\n        this.vy = 0\n        this.ax = 0\n        this.ay = 0\n        this.flags = 0\n        this.setImage(img);\n        this.type = -1; // not a member of any type by default\n        this.layer = 1; // by default, in layer 1\n        this.lifespan = undefined;\n    }\n\n    /**\n     * Gets the current image\n     */\n    //% group=\"Lifecycle\"\n    //% blockId=spriteimage block=\"%sprite(mySprite) image\"\n    //% weight=8\n    get image(): Image {\n        return this._image;\n    }\n\n    /**\n     * Sets the image on the sprite\n     */\n    //% group=\"Lifecycle\"\n    //% blockId=spritesetimage block=\"set %sprite(mySprite) image to %img=screen_image_picker\"\n    //% weight=7 help=sprites/sprite/set-image\n    setImage(img: Image) {\n        if (!img) return; // don't break the sprite\n\n        // Identify old upper left corner\n        let oMinX = img.width;\n        let oMinY = img.height;\n        let oMaxX = 0;\n        let oMaxY = 0;\n\n        for (let i = 0; this._hitboxes && i < this._hitboxes.length; ++i) {\n            let box = this._hitboxes[i];\n            oMinX = Math.min(oMinX, box.ox);\n            oMinY = Math.min(oMinY, box.oy);\n            oMaxX = Math.max(oMaxX, box.ox + box.width - 1);\n            oMaxY = Math.max(oMaxY, box.oy + box.height - 1);\n        }\n\n        this._image = img;\n        this._hitboxes = game.calculateHitBoxes(this);\n\n        // Identify new upper left corner\n        let nMinX = img.width;\n        let nMinY = img.height;\n        let nMaxX = 0;\n        let nMaxY = 0;\n\n        for (let i = 0; i < this._hitboxes.length; ++i) {\n            let box = this._hitboxes[i];\n            nMinX = Math.min(nMinX, box.ox);\n            nMinY = Math.min(nMinY, box.oy);\n            nMaxX = Math.max(nMaxX, box.ox + box.width - 1);\n            nMaxY = Math.max(nMaxY, box.oy + box.height - 1);\n        }\n\n        const minXDiff = oMinX - nMinX;\n        const minYDiff = oMinY - nMinY;\n        const maxXDiff = oMaxX - nMaxX;\n        const maxYDiff = oMaxY - nMaxY;\n\n        const scene = game.currentScene();\n        const tmap = scene.tileMap;\n\n        if (scene.tileMap && this.width <= 16 && this.height <= 16) {\n            const l = (nMinX + this.left) >> 4;\n            const r = (nMaxX + this.left) >> 4;\n            const t = (nMinY + this.top) >> 4;\n            const b = (nMaxY + this.top) >> 4;\n\n            if (tmap.isObstacle(l, t) && (minXDiff > 0 || minYDiff > 0)) {\n                scene.physicsEngine.moveSprite(this, scene.tileMap, minXDiff, minYDiff);\n            } else if (tmap.isObstacle(r, t) && (maxXDiff < 0 || minYDiff > 0)) {\n                scene.physicsEngine.moveSprite(this, scene.tileMap, maxXDiff, minYDiff);\n            } else if (tmap.isObstacle(l, b) && (minXDiff > 0 || maxYDiff < 0)) {\n                scene.physicsEngine.moveSprite(this, scene.tileMap, minXDiff, maxYDiff);\n            } else if (tmap.isObstacle(r, b) && (maxXDiff < 0 || maxYDiff < 0)) {\n                scene.physicsEngine.moveSprite(this, scene.tileMap, maxXDiff, maxYDiff);\n            }\n        }\n    }\n\n    //% group=\"Properties\" blockSetVariable=\"mySprite\"\n    //% blockCombine block=\"z (depth)\"\n    get z(): number {\n        return this._z;\n    }\n\n    //% group=\"Properties\" blockSetVariable=\"mySprite\"\n    //% blockCombine block=\"z (depth)\"\n    set z(value: number) {\n        if (value != this._z) {\n            this._z = value;\n            game.currentScene().flags |= scene.Flag.NeedsSorting;\n        }\n    }\n\n    //% group=\"Properties\" blockSetVariable=\"mySprite\"\n    //% blockCombine block=\"width\"\n    get width() {\n        return this._image.width\n    }\n    //% group=\"Properties\" blockSetVariable=\"mySprite\"\n    //% blockCombine block=\"height\"\n    get height() {\n        return this._image.height\n    }\n    //% group=\"Properties\" blockSetVariable=\"mySprite\"\n    //% blockCombine block=\"left\"\n    get left() {\n        return this.x - (this.width >> 1)\n    }\n    //% group=\"Properties\" blockSetVariable=\"mySprite\"\n    //% blockCombine block=\"left\"\n    set left(value: number) {\n        this.x = value + (this.width >> 1);\n    }\n    //% group=\"Properties\" blockSetVariable=\"mySprite\"\n    //% blockCombine block=\"right\"\n    get right() {\n        return this.left + this.width\n    }\n    //% group=\"Properties\" blockSetVariable=\"mySprite\"\n    //% blockCombine block=\"right\"\n    set right(value: number) {\n        this.x = value - (this.width >> 1);\n    }\n    //% group=\"Properties\" blockSetVariable=\"mySprite\"\n    //% blockCombine\n    get top() {\n        return this.y - (this.height >> 1)\n    }\n    //% group=\"Properties\" blockSetVariable=\"mySprite\"\n    //% blockCombine\n    set top(value: number) {\n        this.y = value + (this.height >> 1);\n    }\n    //% group=\"Properties\" blockSetVariable=\"mySprite\"\n    //% blockCombine block=\"bottom\"\n    get bottom() {\n        return this.top + this.height\n    }\n    //% group=\"Properties\" blockSetVariable=\"mySprite\"\n    //% blockCombine block=\"bottom\"\n    set bottom(value: number) {\n        this.y = value - (this.height >> 1);\n    }\n    /**\n     * The type of sprite\n     */\n    //% group=\"Properties\" blockSetVariable=\"mySprite\"\n    //% blockCombine block=\"kind\"\n    get type() {\n        return this._type;\n    }\n    /**\n     * The type of sprite\n     */\n    //% group=\"Properties\" blockSetVariable=\"mySprite\"\n    //% blockCombine block=\"kind\"\n    set type(value: number) {\n        if (value == undefined || this._type === value) return;\n\n        const spritesByKind = game.currentScene().spritesByKind;\n        if (this._type >= 0 && spritesByKind[this._type])\n            spritesByKind[this._type].removeElement(this);\n\n        if (value >= 0) {\n            if (!spritesByKind[value]) spritesByKind[value] = [];\n            spritesByKind[value].push(this);\n        }\n\n        this._type = value;\n    }\n\n    /**\n     * Set the sprite position\n     * @param x horizontal position\n     * @param y vertical position\n     */\n    //% group=\"Properties\"\n    //% weight=100\n    //% blockId=spritesetpos block=\"set %sprite(mySprite) position to x %x y %y\"\n    //% help=sprites/sprite/set-position\n    setPosition(x: number, y: number): void {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Display a speech bubble with the text, for the given time\n     * @param text the text to say, eg: \":)\"\n     * @param time time to keep text on\n     */\n    //% group=\"Properties\"\n    //% blockId=spritesay block=\"%sprite(mySprite) say %text||for %millis ms\"\n    //% inlineInputMode=inline\n    //% help=sprites/sprite/say\n    say(text: string, timeOnScreen?: number, textColor = 15, textBoxColor = 1) {\n\n        if (!text) {\n            this.updateSay = undefined;\n            if (this.sayBubbleSprite) {\n                this.sayBubbleSprite.destroy();\n            }\n            return;\n        }\n\n        \n\n        let pixelsOffset = 0;\n        let holdTextSeconds = 1.5;\n        let bubblePadding = 4;\n        let maxTextWidth = 100;\n        let font = image.font8;\n        let startX = 2;\n        let startY = 2;\n        let bubbleWidth = text.length * font.charWidth + bubblePadding;\n        let maxOffset = text.length * font.charWidth - maxTextWidth;\n        let bubbleOffset: number;\n        // sets the defaut scroll speed in pixels per second\n        let speed = 45;\n\n        // Calculates the speed of the scroll if scrolling is needed and a time is specified\n        if (timeOnScreen && maxOffset > 0) {\n            speed = (maxOffset + (2 * maxTextWidth)) / (timeOnScreen / 1000);\n            speed = Math.max(speed, 45);\n            holdTextSeconds = maxTextWidth / speed;\n            holdTextSeconds = Math.min(holdTextSeconds, 1.5);\n        } \n\n        if (timeOnScreen) {\n            timeOnScreen = timeOnScreen + control.millis();\n        }\n\n        if (!this._hitboxes || this._hitboxes.length == 0) {\n            bubbleOffset = 0;\n        } else {\n            bubbleOffset = this._hitboxes[0].top;\n            for (let i = 0; i < this._hitboxes.length; i++) {\n                bubbleOffset = Math.min(bubbleOffset, this._hitboxes[i].top);\n            }\n\n            // Gets the length from sprites location to its highest hitbox\n            bubbleOffset = this.y - bubbleOffset;\n        }\n\n\n        if (bubbleWidth > maxTextWidth + bubblePadding) {\n            bubbleWidth = maxTextWidth + bubblePadding;\n        } else {\n            maxOffset = -1;\n        }\n\n        // Destroy previous sayBubbleSprite to prevent leaking\n        if (this.sayBubbleSprite) {\n            this.sayBubbleSprite.destroy();\n        }\n\n        this.sayBubbleSprite = sprites.create(image.create(bubbleWidth, font.charHeight + bubblePadding), -1);\n\n        this.sayBubbleSprite.setFlag(SpriteFlag.Ghost, true);\n        this.updateSay = (dt, camera) => {\n            // Update box stuff as long as timeOnScreen doesn't exist or it can still be on the screen\n            if (!timeOnScreen || timeOnScreen > control.millis()) {\n                this.sayBubbleSprite.image.fill(textBoxColor);\n                // The minus 2 is how much transparent padding there is under the sayBubbleSprite\n                this.sayBubbleSprite.y = this.y - bubbleOffset - ((font.charHeight + bubblePadding) >> 1) - 2;\n                this.sayBubbleSprite.x = this.x;\n\n                if (!this.isOutOfScreen(camera)) {\n                    const ox = camera.offsetX;\n                    const oy = camera.offsetY;\n\n                    if (this.sayBubbleSprite.left - ox < 0) {\n                        this.sayBubbleSprite.left = 0;\n                    }\n\n                    if (this.sayBubbleSprite.right - ox > screen.width) {\n                        this.sayBubbleSprite.right = screen.width;\n                    }\n\n                    // If sprite bubble above the sprite gets cut off on top, place the bubble below the sprite\n                    if (this.sayBubbleSprite.top - oy < 0) {\n                        this.sayBubbleSprite.y = (this.sayBubbleSprite.y - 2 * this.y) * -1;\n                    }\n                }\n\n                // Pauses at beginning of text for holdTextSeconds length\n                if (holdTextSeconds > 0) {\n                    holdTextSeconds -= game.eventContext().deltaTime;\n                    // If scrolling has reached the end, start back at the beginning\n                    if (holdTextSeconds <= 0 && pixelsOffset > 0) {\n                        pixelsOffset = 0;\n                        holdTextSeconds = maxTextWidth / speed;\n                    }\n                } else {\n                    pixelsOffset += dt * speed;\n\n                    // Pause at end of text for holdTextSeconds length\n                    if (pixelsOffset >= maxOffset) {\n                        pixelsOffset = maxOffset;\n                        holdTextSeconds = maxTextWidth / speed;\n                    }\n                }\n                // If maxOffset is negative it won't scroll\n                if (maxOffset < 0) {\n                    this.sayBubbleSprite.image.print(text, startX, startY, textColor, font);\n                } else {\n                    this.sayBubbleSprite.image.print(text, startX - pixelsOffset, startY, textColor, font);\n                }\n\n                // Left side padding\n                this.sayBubbleSprite.image.fillRect(0, 0, bubblePadding >> 1, font.charHeight + bubblePadding, textBoxColor);\n                // Right side padding\n                this.sayBubbleSprite.image.fillRect(bubbleWidth - (bubblePadding >> 1), 0, bubblePadding >> 1, font.charHeight + bubblePadding, textBoxColor);\n                // Corners removed\n                this.sayBubbleSprite.image.setPixel(0, 0, 0);\n                this.sayBubbleSprite.image.setPixel(bubbleWidth - 1, 0, 0);\n                this.sayBubbleSprite.image.setPixel(0, font.charHeight + bubblePadding - 1, 0);\n                this.sayBubbleSprite.image.setPixel(bubbleWidth - 1, font.charHeight + bubblePadding - 1, 0);\n            } else {\n                // If can't update because of timeOnScreen then destroy the sayBubbleSprite and reset updateSay\n                this.sayBubbleSprite.destroy();\n                this.updateSay = undefined;\n            }\n        }\n    }\n\n    /**\n     * Indicates if the sprite is outside the screen\n     */\n    //%\n    isOutOfScreen(camera: scene.Camera): boolean {\n        const ox = camera.offsetX;\n        const oy = camera.offsetY;\n        return this.right - ox < 0 || this.bottom - oy < 0 || this.left - ox > screen.width || this.top - oy > screen.height;\n    }\n\n    __draw(camera: scene.Camera) {\n        if (this.isOutOfScreen(camera)) return;\n\n        const l = this.left - camera.offsetX;\n        const t = this.top - camera.offsetY;\n        const font = image.font8;\n        screen.drawTransparentImage(this._image, l, t)\n\n        // debug info\n        if (game.debug) {\n            let color = 1;\n            this._hitboxes.forEach(box => {\n                this._image.drawRect(box.ox, box.oy, box.width, box.height, color);\n                color++;\n                if (color >= 15) color = 1;\n            });\n        }\n    }\n\n    __update(camera: scene.Camera, dt: number) {\n        if (this.lifespan !== undefined) {\n            this.lifespan -= dt * 1000;\n            if (this.lifespan <= 0) {\n                this.lifespan = undefined;\n                this.destroy();\n            }\n        }\n        if ((this.flags & sprites.Flag.AutoDestroy)\n            && this.isOutOfScreen(camera)) {\n            this.destroy()\n        }\n\n        if (this.flags & sprites.Flag.StayInScreen) {\n            if (this.left < camera.offsetX) {\n                this.left = camera.offsetX;\n            }\n            else if (this.right > camera.offsetX + screen.width) {\n                this.right = camera.offsetX + screen.width;\n            }\n\n            if (this.top < camera.offsetY) {\n                this.top = camera.offsetY;\n            }\n            else if (this.bottom > camera.offsetY + screen.height) {\n                this.bottom = camera.offsetY + screen.height;\n            }\n        }\n        // Say text\n        if (this.updateSay) {\n            this.updateSay(dt, camera);\n        }\n    }\n\n    /**\n     * Set a sprite flag\n     */\n    //% group=\"Properties\"\n    //% blockId=spritesetsetflag block=\"set %sprite(mySprite) %flag %on=toggleOnOff\"\n    //% flag.defl=SpriteFlag.StayInScreen\n    //% help=sprites/sprite/set-flag\n    setFlag(flag: SpriteFlag, on: boolean) {\n        if (on) this.flags |= flag\n        else this.flags = ~(~this.flags | flag);\n    }\n\n    /**\n     * Check if this sprite overlaps another sprite\n     * @param other\n     */\n    //% group=\"Overlaps\"\n    //% blockId=spriteoverlapswith block=\"%sprite(mySprite) overlaps with %other=variables_get(otherSprite)\"\n    //% help=sprites/sprite/overlaps-with\n    overlapsWith(other: Sprite) {\n        if (other == this) return false;\n        if (this.flags & sprites.Flag.Ghost)\n            return false\n        if (other.flags & sprites.Flag.Ghost)\n            return false\n        return other._image.overlapsWith(this._image, this.left - other.left, this.top - other.top)\n    }\n\n    /**\n     * Registers code when the sprite overlaps with another sprite\n     * @param spriteType sprite type to match\n     * @param handler\n     */\n    //% group=\"Overlaps\"\n    //% afterOnStart=true\n    //% help=sprites/sprite/on-overlap\n    onOverlap(handler: (other: Sprite) => void) {\n        this.overlapHandler = handler;\n    }\n\n    /**\n     * Registers code when the sprite collides with an obstacle\n     * @param direction\n     * @param handler\n     */\n    //% blockNamespace=\"scene\" group=\"Collisions\"\n    onCollision(direction: CollisionDirection, tileIndex: number, handler: () => void) {\n        if (!this.collisionHandlers)\n            this.collisionHandlers = [];\n\n        direction = Math.max(0, Math.min(3, direction | 0));\n\n        if (!this.collisionHandlers[direction])\n            this.collisionHandlers[direction] = [];\n\n        this.collisionHandlers[direction][tileIndex] = handler;\n    }\n\n    /**\n     * Check if there is an obstacle in the given direction\n     * @param direction\n     */\n    //% blockId=spritehasobstacle block=\"is %sprite(mySprite) hitting wall %direction\"\n    //% blockNamespace=\"scene\" group=\"Collisions\"\n    //% help=sprites/sprite/is-hitting-tile\n    isHittingTile(direction: CollisionDirection): boolean {\n        return this._obstacles && !!this._obstacles[direction];\n    }\n\n    /**\n     * Get the obstacle sprite in a given direction if any\n     * @param direction\n     */\n    //% blockId=spriteobstacle block=\"%sprite(mySprite) wall hit on %direction\"\n    //% blockNamespace=\"scene\" group=\"Collisions\"\n    //% help=sprites/sprite/tile-hit-from\n    tileHitFrom(direction: CollisionDirection): number {\n        return (this._obstacles && this._obstacles[direction]) ? this._obstacles[direction].tileIndex : -1;\n    }\n\n    clearObstacles() {\n        this._obstacles = undefined;\n    }\n\n    registerObstacle(direction: CollisionDirection, other: sprites.Obstacle) {\n        if (other == undefined) return;\n        if (!this._obstacles)\n            this._obstacles = [];\n        this._obstacles[direction] = other;\n\n        const handler = (this.collisionHandlers && this.collisionHandlers[direction]) ? this.collisionHandlers[direction][other.tileIndex] : undefined;\n        if (handler)\n            control.runInParallel(handler);\n        const scene = game.currentScene();\n        scene.collisionHandlers\n            .filter(h => h.type == this.type && h.tile == other.tileIndex)\n            .forEach(h => control.runInParallel(() => h.handler(this)));\n    }\n\n    /**\n     * Run code when the sprite is destroyed\n     * @param handler\n     */\n    //% group=\"Lifecycle\"\n    //% weight=9\n    onDestroyed(handler: () => void) {\n        this.destroyHandler = handler\n    }\n\n    /**\n     * Destroy the sprite\n     */\n    //% group=\"Lifecycle\"\n    //% weight=10\n    //% blockId=spritedestroy block=\"destroy %sprite(mySprite)\"\n    //% help=sprites/sprite/destroy\n    destroy() {\n        if (this.flags & sprites.Flag.Destroyed)\n            return\n        this.flags |= sprites.Flag.Destroyed\n        const scene = game.currentScene();\n        // When current sprite is destroyed, destroys sayBubbleSprite if defined\n        if (this.sayBubbleSprite) {\n            this.sayBubbleSprite.destroy();\n        }\n        scene.allSprites.removeElement(this);\n        if (this.type >= 0 && scene.spritesByKind[this.type])\n            scene.spritesByKind[this.type].removeElement(this);\n        scene.physicsEngine.removeSprite(this);\n        if (this.destroyHandler)\n            this.destroyHandler();\n        scene.destroyedHandlers\n            .filter(h => h.type == this.type)\n            .forEach(h => h.handler(this));\n    }\n\n    toString() {\n        return `${this.id}(${this.x},${this.y})->(${this.vx},${this.vy})`;\n    }\n}",
      "spriteevents.ts": "namespace sprites {\n    /**\n     * Gets the sprite type\n     */\n    //% blockHidden=1 shim=ENUM_GET\n    //% blockId=spritetype block=\"$kind\" enumInitialMembers=\"Player,Enemy\"\n    //% enumName=SpriteKind enumMemberName=kind enumPromptHint=\"e.g. Coin, Fireball, Asteroid...\"\n    export function _spriteType(kind: number): number {\n        return kind;\n    }\n\n    /**\n     * Run code when a certain kind of sprite is created\n     * @param kind\n     * @param sprite\n     */\n    //% group=\"Lifecycle\" draggableParameters weight=97\n    //% blockId=spritesoncreated block=\"on created $sprite of kind $kind=spritetype\"\n    //% help=sprites/on-created\n    export function onCreated(kind: number, handler: (sprite: Sprite) => void): void {\n        if (!handler || kind == undefined) return;\n\n        const scene = game.currentScene();\n        scene.createdHandlers.push({\n            type: kind,\n            handler: handler\n        })\n    }\n\n    /**\n     * Run code when a certain kind of sprite is destroyed\n     * @param kind\n     * @param sprite\n     */\n    //% group=\"Lifecycle\"\n    //% weight=96 draggableParameters\n    //% blockId=spritesondestroyed block=\"on destroyed $sprite of kind $kind=spritetype \"\n    //% help=sprites/on-destroyed\n    export function onDestroyed(kind: number, handler: (sprite: Sprite) => void) {\n        if (!handler || kind == undefined) return;\n\n        const scene = game.currentScene();\n        scene.destroyedHandlers.push({\n            type: kind,\n            handler: handler\n        })\n    }\n\n    /**\n     * Run code when two kinds of sprites overlap\n     */\n    //% group=\"Overlaps\"\n    //% weight=100 draggableParameters\n    //% blockId=spritesoverlap block=\"on $sprite of kind $kind=spritetype overlaps $otherSprite of kind $otherKind=spritetype\"\n    //% help=sprites/on-overlap\n    export function onOverlap(kind: number, otherKind: number, handler: (sprite: Sprite, otherSprite: Sprite) => void) {\n        if (kind == undefined || otherKind == undefined ||!handler) return;\n\n        const scene = game.currentScene();\n        scene.overlapHandlers.push({\n            type: kind,\n            otherType: otherKind,\n            handler: handler\n        })\n    }\n}\n\nnamespace scene {\n    /**\n     * Run code when a certain kind of sprite hits a tile\n     * @param direction\n     * @param tile\n     * @param handler\n     */\n    //% group=\"Collisions\"\n    //% weight=100 draggableParameters\n    //% blockId=spritesollisions block=\"on $sprite of kind $kind=spritetype hits wall $tile=colorindexpicker\"\n    //% help=scene/on-hit-tile\n    export function onHitTile(kind: number, tile: number, handler: (sprite: Sprite) => void) {\n        if (kind == undefined || !handler) return;\n\n        const scene = game.currentScene();\n        scene.collisionHandlers.push({\n            type: kind,\n            tile: tile,\n            handler: handler\n        })\n    }\n}",
      "spritemap.ts": "namespace sprites {\n    export class SpriteMap {\n        private cellWidth: number;\n        private cellHeight: number;\n        private rowCount: number;\n        private columnCount: number;\n        private buckets: Sprite[][];\n\n        constructor() {\n            this.buckets = [];\n        }\n\n        /**\n         * Returns a potential list of neighbors\n         */\n        neighbors(sprite: Sprite): Sprite[] {\n            if (this.isOob(sprite)) return [];\n\n            const n: Sprite[] = [];\n            const layer = sprite.layer;\n            this.mergeAtKey(sprite.left, sprite.top, layer, n)\n            this.mergeAtKey(sprite.left, sprite.bottom, layer, n)\n            this.mergeAtKey(sprite.right, sprite.top, layer, n)\n            this.mergeAtKey(sprite.right, sprite.bottom, layer, n)\n            n.removeElement(sprite);\n            return n;\n        }\n\n        /**\n         * Gets the overlaping sprites if any\n         * @param sprite\n         */\n        overlaps(sprite: Sprite): Sprite[] {\n            const n = this.neighbors(sprite);\n            const o = n.filter(neighbor => sprite.overlapsWith(neighbor));\n            return o;\n        }\n\n        draw() {\n            for (let x = 0; x < this.columnCount; ++x) {\n                for (let y = 0; y < this.rowCount; ++y) {\n                    const left = x * this.cellWidth;\n                    const top = y * this.cellHeight;\n                    const k = this.key(left, top);\n                    const b = this.buckets[k];\n                    if (b && b.length)\n                        screen.drawRect(left, top, this.cellWidth, this.cellHeight, 5);\n                }\n            }\n        }\n\n        /**\n         * Recompute hashes for all objects\n         */\n        update(sprites: Sprite[]) {\n            this.buckets = [];\n\n            // rescale buckets\n            let maxWidth = 0;\n            let maxHeight = 0;\n            for (const sprite of sprites) {\n                if (sprite.width > maxWidth) maxWidth = sprite.width;\n                if (sprite.height > maxHeight) maxHeight = sprite.height;\n            }\n\n            const tMap = game.currentScene().tileMap;\n\n            const areaWidth = tMap ? tMap.areaWidth() : screen.width;\n            const areaHeight = tMap ? tMap.areaHeight() : screen.height;\n\n            this.cellWidth = Math.clamp(8, areaWidth / 4, maxWidth * 2);\n            this.cellHeight = Math.clamp(8, areaHeight / 4, maxHeight * 2);\n            this.rowCount = (areaHeight / this.cellHeight) >> 0\n            this.columnCount = (areaWidth / this.cellWidth) >> 0;\n\n\n            for (const sprite of sprites)\n                this.insertAABB(sprite);\n        }\n\n        private key(x: number, y: number): number {\n            const xi = Math.clamp(0, this.columnCount, (x / this.cellWidth) >> 0);\n            const yi = Math.clamp(0, this.rowCount, (y / this.cellHeight) >> 0);\n            return xi + yi * this.columnCount;\n        }\n\n        private insertAtKey(x: number, y: number, sprite: Sprite) {\n            const k = this.key(x, y);\n            let bucket = this.buckets[k];\n            if (!bucket)\n                bucket = this.buckets[k] = [];\n            if (bucket.indexOf(sprite) < 0)\n                bucket.push(sprite);\n        }\n\n        private isOob(sprite: Sprite): boolean {\n            const tMap = game.currentScene().tileMap;\n\n            const areaWidth = tMap ? tMap.areaWidth() : screen.width;\n            const areaHeight = tMap ? tMap.areaHeight() : screen.height;\n            return sprite.right < 0 || sprite.left > areaWidth || sprite.bottom < 0 || sprite.top > areaHeight;\n        }\n\n        private insertAABB(sprite: Sprite) {\n            // is object completely out of space?\n            if (this.isOob(sprite) || (sprite.flags & sprites.Flag.Ghost))\n                return;\n\n            const left = sprite.left;\n            const top = sprite.top;\n            const xn = Math.ceil(sprite.width / this.cellWidth)\n            const yn = Math.ceil(sprite.height / this.cellHeight);\n            for (let x = 0; x <= xn; x++)\n                for (let y = 0; y <= yn; y++)\n                    this.insertAtKey(left + Math.min(sprite.width, x * this.cellWidth), top + Math.min(sprite.height, y * this.cellHeight), sprite)\n        }\n\n        private mergeAtKey(x: number, y: number, layer: number, n: Sprite[]) {\n            const k = this.key(x, y);\n            const bucket = this.buckets[k];\n            if (bucket) {\n                for (const sprite of bucket)\n                    if ((sprite.layer & layer)\n                        && n.indexOf(sprite) < 0)\n                        n.push(sprite);\n            }\n        }\n\n        toString() {\n            return `${this.buckets.length} buckets, ${this.buckets.filter(b => !!b).length} filled`;\n        }\n    }\n}",
      "sprites.ts": "/*\nFrame handlers:\n 10 - physics and collisions\n 20 - frame()\n 60 - screen/sprite background\n 90 - drawing sprites\n 95 - drawing score\n100 - loops.menu()\n200 - screen refresh\n*/\n\n/**\n * Sprites on screen\n */\n//% weight=98 color=\"#4B7BEC\" icon=\"\\uf1d8\"\n//% groups='[\"Create\", \"Properties\", \"Overlaps\", \"Collisions\", \"Lifecycle\"]'\nnamespace sprites {\n\n    /**\n     * Create a new sprite from an image\n     * @param img the image\n     */\n    //% group=\"Create\"\n    //% blockId=spritescreate block=\"sprite %img=screen_image_picker of kind %kind=spritetype\"\n    //% expandableArgumentMode=toggle\n    //% blockSetVariable=mySprite\n    //% weight=100 help=sprites/create\n    export function create(img: Image, kind?: number): Sprite {\n        const scene = game.currentScene();\n        const sprite = new Sprite(img)\n        sprite.type = kind;\n        scene.allSprites.push(sprite)\n        sprite.id = scene.allSprites.length\n        scene.physicsEngine.addSprite(sprite);\n\n        // run on created handlers\n        scene.createdHandlers\n            .filter(h => h.type == kind)\n            .forEach(h => h.handler(sprite));\n\n        return sprite\n    }\n\n    /**\n     * Return an array of all sprites of the given kind.\n     * @param kind the target kind\n     */\n    //% blockId=allOfKind block=\"array of sprites of kind %kind=spritetype\"\n    //% blockNamespace=\"arrays\" blockSetVariable=\"sprite list\"\n    //% weight=87\n    export function allOfKind(kind: number): Sprite[] {\n        const spritesByKind = game.currentScene().spritesByKind;\n        if (!(kind >= 0) || !spritesByKind[kind]) return [];\n        else return spritesByKind[kind].slice(0, spritesByKind[kind].length);\n    }\n\n    /**\n     * Create a new sprite with given speed, and place it at the edge of the screen so it moves towards the middle.\n     * The sprite auto-destroys when it leaves the screen. You can modify position after it's created.\n     */\n    //% group=\"Create\"\n    //% blockId=spritescreateprojectile block=\"projectile %img=screen_image_picker vx %vx vy %vy of kind %kind=spritetype || from sprite %sprite=variables_get\"\n    //% weight=99 help=sprites/create-projectile\n    //% blockSetVariable=projectile\n    //% inlineInputMode=inline\n    //% expandableArgumentMode=toggle\n    export function createProjectile(img: Image, vx: number, vy: number, kind: number, sprite?: Sprite) {\n        const s = sprites.create(img, kind);\n        s.vx = vx\n        s.vy = vy\n\n        // put it at the edge of the screen so that it moves towards the middle\n\n        if (vx < 0)\n            s.x = screen.width + (s.width >> 1) - 1\n        else if (vx > 0)\n            s.x = -(s.width >> 1) + 1\n\n        if (vy < 0)\n            s.y = screen.height + (s.height >> 1) - 1\n        else if (vy > 0)\n            s.y = -(s.height >> 1) + 1\n\n        s.flags |= sprites.Flag.AutoDestroy;\n\n        if (sprite) {\n            s.x = sprite.x;\n            s.y = sprite.y;\n        }\n\n        return s\n    }\n\n    /**\n     * Creates a new sprite of the given kind and adds it to the game. Use this\n     * with the \"on sprite created\" event.\n     * @param kind the kind of sprite to create\n     */\n    //% group=\"Lifecycle\"\n    //% blockId=spritecreateempty block=\"create empty sprite of kind %kind=spritetype\"\n    //% weight=98\n    export function createEmptySprite(kind: number): void {\n        sprites.create(image.create(1, 1), kind);\n    }\n\n    export enum Flag {\n        Ghost = 1, // doesn't collide with other sprites\n        Destroyed = 2,\n        AutoDestroy = 4, // remove the sprite when no longer visible\n        StayInScreen = 8, // sprite cannot move outside the camera region\n    }\n}\n",
      "targetoverrides.cpp": "// Overriden in target\n\n#include \"pxt.h\"\n\nnamespace game {\n    //%\n    void takeScreenshot() {\n        \n    }\n}\n\nnamespace info {\n    //%\n    int updateHighScore(int score) {\n        return score;\n    }\n}",
      "targetoverrides.ts": "// This is the last thing executed before user code\n\ngame.setWaitAnyButton(controller.pauseUntilAnyButtonIsPressed)\ngame.gameOverSound = () => music.playSound(music.sounds(Sounds.Wawawawaa));\n",
      "textDialogs.ts": "// require A, B buttons",
      "tilemap.ts": "namespace tiles {\n    class TileSet {\n        image: Image;\n        obstacle: boolean;\n        constructor(image: Image, collisions: boolean) {\n            this.image = image;\n            this.obstacle = collisions;\n        }\n    }\n\n    /**\n     * A tile in the tilemap\n     **/\n    //% blockNamespace=scene color=\"#401255\" blockGap=8\n    export class Tile {\n        private _row: number;\n        private _col: number;\n        private _map: Image;\n\n        constructor(col: number, row: number, map: Image) {\n            this._col = col;\n            this._row = row;\n            this._map = map;\n        }\n\n        get x(): number {\n            return this._col << 4;\n        }\n\n        get y(): number {\n            return this._row << 4;\n        }\n\n        get tileSet(): number {\n            return this._map.getPixel(this._col, this._row);\n        }\n\n        /**\n         * Center the given sprite on this tile\n         * @param sprite\n         */\n        //% blockId=gameplaceontile block=\"on top of %tile(myTile) place %sprite=variables_get(mySprite)\"\n        //% blockNamespace=\"scene\" group=\"Tiles\"\n        //% weight=25\n        //% help=scene/place\n        place(mySprite: Sprite): void {\n            if (!mySprite) return;\n\n            mySprite.x = this.x + 8;\n            mySprite.y = this.y + 8;\n        }\n    }\n\n    export class TileMap implements SpriteLike {\n        id: number;\n        z: number;\n\n        private _layer: number;\n\n        private _map: Image;\n        private _tileSets: TileSet[];\n\n        constructor() {\n            this._map = img`1`;\n            this._tileSets = [];\n            this._layer = 1;\n\n            this.z = -1;\n\n            const sc = game.currentScene();\n            sc.allSprites.push(this);\n            sc.flags |= scene.Flag.NeedsSorting;\n            this.id = sc.allSprites.length;\n        }\n\n        offsetX(value: number) {\n            return Math.clamp(0, (this._map.width << 4) - screen.width, value);\n        }\n\n        offsetY(value: number) {\n            return Math.clamp(0, (this._map.height << 4) - screen.height, value);\n        }\n\n        areaWidth() {\n            return this._map ? (this._map.width << 4) : 0;\n        }\n\n        areaHeight() {\n            return this._map ? (this._map.height << 4) : 0;\n        }\n\n        get layer(): number {\n            return this._layer;\n        }\n\n        set layer(value: number) {\n            if (this._layer != value) {\n                this._layer = value;\n            }\n        }\n\n        setTile(index: number, img: Image, collisions?: boolean) {\n            if (this.isInvalidIndex(index)) return;\n            this._tileSets[index] = new TileSet(img, collisions);\n        }\n\n        setMap(map: Image) {\n            this._map = map;\n        }\n\n        public getTile(col: number, row: number): Tile {\n            if (this.isOutsideMap(col, row)) return undefined;\n            return new Tile(col, row, this._map);\n        }\n\n        public setTileAt(col: number, row: number, index: number): void {\n            if (!this.isOutsideMap(col, row) && !this.isInvalidIndex(index))\n                this._map.setPixel(col, row, index);\n        }\n\n        public getTilesByType(index: number): Tile[] {\n            if (this.isInvalidIndex(index)) return undefined;\n\n            let output: Tile[] = [];\n            for (let col = 0; col < this._map.width; ++col) {\n                for (let row = 0; row < this._map.height; ++row) {\n                    let currTile = this._map.getPixel(col, row);\n                    if (currTile === index) {\n                        output.push(new Tile(col, row, this._map));\n                    }\n                }\n            }\n            return output;\n        }\n\n        __update(camera: scene.Camera, dt: number): void { }\n\n        /**\n         * Draws all visible\n         */\n        __draw(camera: scene.Camera): void {\n            const offsetX = camera.offsetX & 0xf;\n            const offsetY = camera.offsetY & 0xf;\n            const x0 = Math.max(0, camera.offsetX >> 4);\n            const xn = Math.min(this._map.width, ((camera.offsetX + screen.width) >> 4) + 1);\n            const y0 = Math.max(0, camera.offsetY >> 4);\n            const yn = Math.min(this._map.height, ((camera.offsetY + screen.height) >> 4) + 1);\n\n            for (let x = x0; x <= xn; ++x) {\n                for (let y = y0; y <= yn; ++y) {\n                    const index = this._map.getPixel(x, y);\n                    const tile = this._tileSets[index] || this.generateTile(index);\n                    if (tile) {\n                        screen.drawTransparentImage(tile.image, ((x - x0) << 4) - offsetX, ((y - y0) << 4) - offsetY)\n                    }\n                }\n            }\n        }\n\n        private generateTile(index: number): TileSet {\n            if (index == 0) return undefined;\n\n            const img = image.create(16, 16);\n            img.fill(index);\n            return this._tileSets[index] = new TileSet(img, false);\n        }\n\n        private isOutsideMap(col: number, row: number): boolean {\n            return col < 0 || col >= this._map.width\n                    || row < 0 || row >= this._map.height;\n        }\n\n        private isInvalidIndex(index: number): boolean {\n            return index < 0 || index > 0xf;\n        }\n\n        render(camera: scene.Camera) {\n            if (!this._map) return;\n            if (game.debug) {\n                const offsetX = -camera.offsetX;\n                const offsetY = -camera.offsetY;\n                const x0 = Math.max(0, -(offsetX >> 4));\n                const xn = Math.min(this._map.width, (-offsetX + screen.width) >> 4);\n                const y0 = Math.max(0, -(offsetY >> 4));\n                const yn = Math.min(this._map.height, (-offsetY + screen.height) >> 4);\n                for (let x = x0; x <= xn; ++x) {\n                    screen.drawLine(\n                        (x << 4) + offsetX,\n                        offsetY,\n                        (x << 4) + offsetX,\n                        (this._map.height << 4) + offsetY, 1)\n                }\n                for (let y = y0; y <= yn; ++y) {\n                    screen.drawLine(\n                        offsetX,\n                        (y  << 4) + offsetY,\n                        (this._map.width << 4) + offsetX,\n                        (y << 4) + offsetY,\n                        1)\n                }\n            }\n        }\n\n        public update(camera: scene.Camera) {\n        }\n\n        public collisions(s: Sprite): sprites.Obstacle[] {\n            let overlappers: sprites.StaticObstacle[] = [];\n\n            if ((s.layer & this.layer) && !(s.flags & sprites.Flag.Ghost)) {\n                const x0 = Math.max(0, s.left >> 4);\n                const xn = Math.min(this._map.width, (s.right >> 4) + 1);\n                const y0 = Math.max(0, s.top >> 4);\n                const yn = Math.min(this._map.height, (s.bottom >> 4) + 1);\n\n                // let res = `x: ${x0}-${xn} y: ${y0}-${yn} HIT:`;\n                for (let x = x0; x <= xn; ++x) {\n                    const left = x << 4;\n                    for (let y = y0; y <= yn; ++y) {\n                        const index = this._map.getPixel(x, y);\n                        const tile = this._tileSets[index] || this.generateTile(index);\n                        if (tile && tile.obstacle) {\n                            const top = y << 4;\n                            if (tile.image.overlapsWith(s.image, s.left - left, s.top - top)) {\n                                overlappers.push(new sprites.StaticObstacle(tile.image, top, left, this.layer, index));\n                            }\n                        }\n                    }\n                }\n            }\n\n            return overlappers;\n        }\n\n        public isObstacle(col: number, row: number) {\n            if (!this._map) return false;\n            if (this.isOutsideMap(col, row)) return true;\n\n            return this._tileSets[this._map.getPixel(col, row)].obstacle;\n        }\n\n        public getObstacle(col: number, row: number) {\n            if (!this._map) return undefined;\n            if (this.isOutsideMap(col, row)) return undefined;\n\n            const index = this._map.getPixel(col, row);\n            const tile = this._tileSets[index] || this.generateTile(index);\n            if (tile.obstacle) {\n                return new sprites.StaticObstacle(tile.image, row << 4, col << 4, this.layer, index);\n            }\n            return undefined;\n        }\n    }\n}"
    },
    "brainpad": {
      "README.md": "# brainpad\n\nThe GHI Electronics Brain Pad library.\n\n",
      "config.ts": "// http://files.ghielectronics.com/downloads/Schematics/FEZ/BrainPad%20BP2%20Schematic.pdf\n// Chip used: STM32F401RE\n\nnamespace config {\n    export const DEFAULT_BUTTON_MODE = DAL.BUTTON_ACTIVE_LOW_PULL_UP;\n\n    //export const PIN_LIGHT = DAL.PB_1; // adc\n    // export const PIN_TEMPERATURE = DAL.PB_0; // adc\n\n    export const PIN_P3 = DAL.PA_1; // pwm\n    export const PIN_P0 = DAL.PA_5; // pwm\n    export const PIN_P4 = DAL.PA_0; // pwm\n    export const PIN_P5 = DAL.PA_7; // pwm\n    export const PIN_P6 = DAL.PA_4; // pwm\n    export const PIN_P7 = DAL.PB_0; // pwm\n    export const PIN_P1 = DAL.PA_3; // pwm\n\texport const PIN_P8 = DAL.PA_9; // pwm\n\texport const PIN_P9 = DAL.PB_1; // pwm\n\texport const PIN_P10 = DAL.PA_6; // pwm\n\texport const PIN_P11 = DAL.PB_6; // pwm\n\texport const PIN_P12 = DAL.PA_10; // pwm\n\texport const PIN_P2 = DAL.PA_2; // pwm\n\texport const PIN_P13 = DAL.PB_3; // pwm\n\texport const PIN_P14 = DAL.PB_4; // pwm\n\texport const PIN_P15 = DAL.PB_5; // pwm\n\texport const PIN_P16 = DAL.PB_12; // pwm\n\texport const PIN_P19 = DAL.PB_10; // pwm\n\texport const PIN_P20 = DAL.PB_11; // pwm\n\t\n\t\n\t\n\texport const PIN_SCL = DAL.PB_13; // pwm\n    export const PIN_SDA = DAL.PB_14; // pwm\n\t// export const PIN_SCL = DAL.PB_8; // pwm\n\t// export const PIN_SDA = DAL.PB_9; // pwm\n    // export const PIN_RX = DAL.PA_10; // pwm\n    // export const PIN_TX = DAL.PA_9; // pwm\n\n    // export const PIN_AN = DAL.PA_7; // adc\n    // export const PIN_RST = DAL.PA_6; // adc\n    // export const PIN_CS = DAL.PC_3; // adc\n    // export const PIN_PWM = DAL.PA_3; // pwm\n    //export const PIN_INT = DAL.PA_2; // adc\n\n\n    // export const PIN_SCK = DAL.PB_3; //\n    // export const PIN_MISO = DAL.PB_4; //\n    // export const PIN_MOSI = DAL.PB_5; // \n    \n    // accelerometer and screen are on the same I2C as external\n    export const PIN_ACCELEROMETER_SDA = PIN_SDA;\n    export const PIN_ACCELEROMETER_SCL = PIN_SCL;\n    export const PIN_ACCELEROMETER_INT = DAL.PA_14;\n\n    //export const PIN_SERVO_1 = DAL.PA_3;\n    // export const PIN_SERVO_2 = DAL.PA_0;    \n\n    // export const PIN_BTN_LEFT = DAL.PA_15;\n    // export const PIN_BTN_RIGHT = DAL.PC_13;\n    // export const PIN_BTN_UP = DAL.PA_5;\n    // export const PIN_BTN_DOWN = DAL.PB_10;\n\t\n\texport const PIN_BTN_A = DAL.PC_13;\n\texport const PIN_BTN_B = DAL.PB_7;\n\t\n\t//export const PIN_SHIT = DAL.PA_5;\n\t\n}\n",
      "device.d.ts": "declare namespace pins {\n    //% fixedInstance shim=pxt::getPin(PIN_P0)\n\tconst P0: PwmPin;\n\t\n\t//% fixedInstance shim=pxt::getPin(PIN_P1)\n\tconst P1: PwmPin;\n\t\n\t//% fixedInstance shim=pxt::getPin(PIN_P2)\n\tconst P2: PwmPin;\n\t\n\t//% fixedInstance shim=pxt::getPin(PIN_P3)\n\tconst P3: PwmPin;\n\t\n\t//% fixedInstance shim=pxt::getPin(PIN_P4)\n\tconst P4: PwmPin;\n\t\n\t//% fixedInstance shim=pxt::getPin(PIN_P5)\n\tconst P5: PwmPin;\n\t\n\t//% fixedInstance shim=pxt::getPin(PIN_P6)\n\tconst P6: PwmPin;\n\t\n\t//% fixedInstance shim=pxt::getPin(PIN_P7)\n\tconst P7: PwmPin;\n\t\n\t//% fixedInstance shim=pxt::getPin(PIN_P8)\n\tconst P8: PwmPin;\n\t\n\t//% fixedInstance shim=pxt::getPin(PIN_P9)\n\tconst P9: PwmPin;\n\t\n\t//% fixedInstance shim=pxt::getPin(PIN_P10)\n\tconst P10: PwmPin;\n\t\n\t//% fixedInstance shim=pxt::getPin(PIN_P11)\n\tconst P11: PwmPin;\n\t\n\t//% fixedInstance shim=pxt::getPin(PIN_P12)\n\tconst P12: PwmPin;\n\t\n\t//% fixedInstance shim=pxt::getPin(PIN_P13)\n\tconst P13: PwmPin;\n\t\n\t//% fixedInstance shim=pxt::getPin(PIN_P14)\n\tconst P14: PwmPin;\n\t\n\t//% fixedInstance shim=pxt::getPin(PIN_P15)\n\tconst P15: PwmPin;\n\t\n\t//% fixedInstance shim=pxt::getPin(PIN_P16)\n\tconst P16: PwmPin;\n    \t\n\t//% fixedInstance shim=pxt::getPin(PIN_19)\n    const SCL: PwmPin;\n    //% fixedInstance shim=pxt::getPin(PIN_20)\n    const SDA: PwmPin;\n   /*\n    //% fixedInstance shim=pxt::getPin(PIN_RX)\n    const RX1: PwmOnlyPin;\n    //% fixedInstance shim=pxt::getPin(PIN_TX)\n    const TX1: PwmOnlyPin;\n\n    //% fixedInstance shim=pxt::getPin(PA_7)\n    const AN1: AnalogPin;\n    //% fixedInstance shim=pxt::getPin(PA_6)\n    const RST1: AnalogPin;\n    //% fixedInstance shim=pxt::getPin(PC_3)\n    const CS1: AnalogPin;\n    //% fixedInstance shim=pxt::getPin(PA_8)\n    const PWM1: PwmOnlyPin;\n    //% fixedInstance shim=pxt::getPin(PA_2)\n    const INT1: PwmPin;\n\n    //% fixedInstance shim=pxt::getPin(PIN_SERVO_1)\n    const SERVO11: PwmPin;\n    //% fixedInstance shim=pxt::getPin(PIN_SERVO_2)\n    const SERVO21: PwmPin;\n\t*/\n}\n\n\ndeclare namespace input {\n    /**\n     * A button.\n     */\n    //% block=\"button A\" weight=95 fixedInstance\n    //% shim=pxt::getButtonByPin(PC_13,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonA: Button;\n\n    /**\n     * B button.\n     */\n    //% block=\"button B\" weight=94 fixedInstance\n    //% shim=pxt::getButtonByPin(PB_7,BUTTON_ACTIVE_LOW_PULL_UP)\n    const buttonB: Button;\n\n}\n",
      "images.jres": "{\n  \"*\": {\n    \"namespace\": \"images\",\n    \"mimeType\": \"image/x-mkcd-f1\",\n    \"dataEncoding\": \"base64\"\n  },\n  \"butterfly1\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AMAAAAAAAD4DwAAAAAAAPwfAAAAAAAA/P//AAAAAAD84P8HAAAAADzA/z8AAAAAPIDt/wEAAAA4BwD8A/4BADgOEMCH/w8AOB8cAM//PwAwPjww/MD/B3A+fHA4AP4fYHx8cAgA6D9g/Pz4AAAAP8D8/HAAcAA+wPj5+QB8AByA8/n5AH4AHgDx+/kAfwAeAOPz+YA/AB4AxuP5wB8AHgCG5/HgDxwPAAzD8eAPPh4AGILw8Ic/DwAYAGD4wx8PADAyQPjgDw8AYP4HMPAPBwDg/B8A8IcHAMD4/wHwgwcAgPn/P/jBAwCA8f9/MMABAADj//8A4AEAAMb//wHwAAAAjP//b3AAAACY//8/eAAgABg/ID8eACAAcAAAAA8AIABA9f+vBwAgIMD///8DAMD4+f///z8AgP//////fwAA+P//////AQD8//////8BAP3//////wDA+v3///9/ACDw8P///w8AIADA////AwAgAGBQVY0PACAAMAIAEB4AAAAY//0/PAAAAIz//394AAAAxv//AvAAAADj//8A4AEAgPH/f3DAAQDA+P8V+IEDAMD8vwDwgwcAYP4PEPAPBwAwekL44B8PADAA4PDDHw8AGILg8Ic/HgAMw/HgDz4PAI7n8+AfCB4A5vP5gD8AHgDj8/EAfwAegPH5+QB+AB6A+fn5AHgAHsD4/PAAcAA+4Pz4+AAAAD9wfHxwGAD4PzA+fDB8AP8fcB4cAM/3/wA4HhjAh/8PADgGAPwD/gEAPIDb/wAAAAB4wP8/AAAAAPz1/wMAAAAA/D8lAAAAAAD4DwAAAAAAAPADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"butterfly2\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD8AwAAAAAAAP7cbwEAAAAAHqC+fwBAAACcBwTQx/8XADgfPhgdgP0HMH5+OAAgAB/A+Px8AD8AD4Dx+XzgHwAPAIbzePAHHwcAGAAw/OCPBwAw/gcA+MMDEMD4/x184AEQgOP/fwBwABAA3P/9Hx4AEACg////AwAgePj///8HAOD//v///z8AAPz/////fwAA/v//////AAD+/////38A4P//////fwAg/Pz///8fABAQ4P///wEAEAA4+v+XBwAQAMb//y88AACA8f8/CPAAAGD8/wD4wAMAGF0CPPCPBwAMwXj4w58HAOPxeOAPAA/A+f15AD8AD2B8fHwAMAAfMD8+OB4A/R8cDwxA4/8PABwAaf8AEAAAfvu/AgAAAAD8AwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"cat1\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAA4AAD8fwAAAPgHwP//BwAA+P/g//8fAAD4//9P6D8AAPD+/wEA/wAA8OB/AAD4AQDwAQwAAPADAOABAAAAwAcAwAEAAACADwDAAwAAAAAfAMADAAAAADwAgAcAAAAAfACABwAAAAD4AAAPAAAAAPAAAA8AAAAA4AEADwAAAADgAYAHABIAAMADgAcAYwA8wAPAAwDBAHCAB8ABgOMBwIEH4AGA9wGAAQ/gAYD/AQADD+AAgP8BAAIO4ACA/wAAAh7wAAD/AAAGDvAAADwAAAIe8AAAAMABAxzwAAAAwAcDHnAAAABADgEc8AAAAMC4ATxwAAAAQPAAHHAAAADA4AA88AAAAMDwABxwAAAAQJwBHPAAAADADwMccAAAAMABAxzwAAAAgAACHvAAABQAAAYe4AAAYQAAAg7wAIDDAAADHuABgOMAAAMP4AGA/wGAAQ/AAYD/AcABD8ADgP8AeAAHwAMA/wEsgAeABwB/AADAA4AHAD4AAMADAA8AAAAA4AEADwAAAADgAQAPAAAAAPAAAA8AAAAA+ACABwAAAAB4AIAHAAAAAD4AwAMAAAAAHwDAAwAAAIAPAOABAAAAwAcA4AEQAADwBwDwwD8AAPgBAPD+/wEA/wAA8P//L/Q/AAD4//X//x8AAPgvgP//AwAAcAAA/H8AAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"cat2\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABYAAD8fwAAAPgXgP//AwAA+P/y//8fAAD4//8v6D8AAPD9/wEA/wAA8NB/AAD4AQDwAAwAAPADAOABAAAAwA8AwAEAAACAHwDAAwAAAAAeAMADAAAAAD4AgAcAAAAAeACABwAAAAD4AAAPAAAAAPAAAA8AAAAA4AEADwAAAADgAYAHADwAAMADgAcAfgA8wAPAA4D/AHCAB8ADgP8BwIAHwAGA/wGAAQ/gAYD/AQADD+AAgOMBAAIO4ACAwQAAAh7wAADDAAAGHvAAADIAAAIe8AAAAMABAxzwAAAAwAcDHvAAAADAjgE8cAAAAEC4ARxwAAAAwPAAHPAAAABAYAA8cAAAAMDwABxwAAAAQJwBHPAAAADADgMccAAAAMADAx7wAAAAgAACHvAAADwAAAYe4AAAfwAAAg7gAID/AAACDuABgP8BAAMP4AGA/wGAAQ/gAYD/AcABD8ADgOMAeIAHwAMAwQAsgAeABwDjAACAA4AHACQAAMADAA8AAAAA4AEADwAAAADgAQAPAAAAAPAAAA8AAAAA+ACABwAAAAB4AIAHAAAAAD4AwAMAAAAAHwDAAwAAAIAfAOABAAAAwAcA4AEQAADgBwDwwH8AAPwBAPD9/wEA/wAA8P//L+w/AAD4//H//x8AAPgvgP//AwAAcAAA/H8AAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"chicken\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAADAAAAAAAAABEAAAAAAAAAAAAAAAAAACAJAAAAAAAAIAsAAAAAAAAgBAAAAAAAAAADAAAAAAAAYAIAAAAAAADgAQDAAwAAAIABAH8eAAAAEAAAdzgEAABQAOCBgAcAAEwAeAIBDwAAIAB8AAAeAAAJADwAAPwHYAYAeAAA/gMQAAAwAAD+B4QAABAgZtPfTwAAAHBm+f9/AAAAcMLk/38AAIBgYPz/PwAAAANw/P8/AAAACDD+/B8AAABwMP/wHwAAAMCw/+MfAAAAALX/4x8AAAAAwP/HHwAAAADw38cfAAAAAKDNzx8AAAAA8M2GHwAAAACwDY4/AAAAAJARjz8AAAAAkLHNfwAAAAAQs5x/AAAAAPC33v8AAAAAcHPL/wAAAABw8tn/AQAAANByrv8BAAAA8Mwu/wMAAADwbS7/AAAAAOBPx/8AAAAAYE/j/wQAAADgG/sfCQAAAGDT+x+SAQAAQN7/H5QAAADg7/8PIAAAAMDvfwZQAQAAYP/fAgAIAABQ/U8DEBIAAFBz7wEgIgAAoF3jAUAAAACY3kEAgAIAAAambQCAAAAAxbU/AIABAIDA3RwAAAAAIGD+DwCAAgAQIO4NAAACAADg9gcAQAIABAD4BwBAAgBQAPYBAIAEANQBJgAAAAAArYMIAAAAAICbJwAAAAAAAJsFAAAAAAAAzwAAAAAAAABcAAAAAAAAAAwAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"cow\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAAAAAAAAIgAAAAAAAAAggAAAAAAAACBAAAAAAAAQIAAAAAAAAAwvAAAAAAA4Aj/AAAAAACAjf8AAAAAAAD//wAAAAAAgP9/AAAAAADA7z8AAAAAAMznvwAAAAAA8Ne/AAAAAADg9x8AAAAAAODvPwEAAAAAwP8/AQAAAABA/38BAAAAAAD5fwEAAAAAAPN/AgAAAAAA4jwMAAAAAAACPjAAAAAAAAY+wAAAAAAAZP8AAngAAAD0/wcIhAAAAPz/DxACAQAA/P8PIAECAAD8/w+AAAQAAPz/f0DwCAAA/v//AQgTAAD+//8BACQAAPr//wEESAAA8v//AACIAACC+38AAjABAALwDwAAQAIAAoAAAAHABwACAACAAOAHAAIAAEAAwAcAAgAAgAEAAAAC/AcABAAAAAL/BwAIAAAAgv8HACAAAACC/w8AwAAEAML/D0AAAQYA9P8/IAcEBwD8/38g+PAHAPz//yAAAwcA/P//IwA4BwD8//8jAIAAAPz//yMAAAAA/P//YwAAAAD8//9DAAAAAPz//0MAAAAA/P//QwAAAAD8//9DAAAAAPj//0MAAAAA+P//QwAAAAD4/89BAAAAAPz/D0AAAAAA/P8PQAAAAADk/8/BAAAAAIT/z4EBAAAABP+PAAEADAAE/w/YAQAOAAj/D4gAAA8ACP8PjACADACI/w8EAUAMAMj/DwQDIA8AyP8HBAMQAQDE/wGEARABAIQPAIQDxAAAhA8ABAciAAAEAAAEgRkAAAQAAARjBAAABAADDBcCAABEwAMQCQIAAMbxA/AEAQAAwv8DwIMAAACC/wOAOAAAAIb/D4ADAAAAJv4/AAEAAAB2/n8AAgAAAPL+fwAEAAAAcvw/AAgAAAAg+B8AEAAMAATADwBgAA4AAAAAAID/DAAIAIAPAAAMABDwAUD4gA0AYOAAAAE/AgCAAcDfHgAAAAD2f/gTAAAAABgA4AkAAAAAAACABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"dog1\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAPAfAAAAAAAA/z0AAAAAAPAPcAAAAAAA/wFgAAAAAPAPAGAAAAAA/wEA4AAAAMAPAADAAAAA4AEAAMABAABwAAAAwAMAADAAAADABwAAMAAAAOAfAAAwAAAAYD4AADgAAAB4fAAAMAAAAD/4AAAwAADwD/ABADAAAP8A4AEAYADwHwDAAwDggP8AAIADAMDrDwAAgAcAwP8BAQAGDwDAC2AEAAAOAOABIAwAAA4A4ABwHMAAHgDwAPAewAAcAPAA8B8ADDwAcADwHwAIPABwAOAPAAA8AHAAwIcPAD4AeAAAgh8A/wM4AADAOIABBDgAAMAwwAAIOAAA4DBgABA4AABgYDgAEDgAAGDg/t0XOAAAYPB/ABA4AADgYHwAEHgAAMAwwAAIOAAAwDiAAQxwAADCGQCTA3gAYIwfAH4AcAAgDAcAPABwAHAcAAw8APAA8B8ABBwA4ADwH8AAHADgAPAfQAAeAOAB4A8AAA4AwAPABwAEDwDAFwAAAAMHAID/AQAAgAcAgOt/AADAAwDAAf4PAOABAOAAwP8B8AEAYAAA8D/wAABgAAAAfnwAAGAAAADgPgAAcAAAAMAfAAAgAAAAgA8AAHAAAAAAAwAAYAAAAAADAADgAAAAgAMAAMAFAAAAAwAAgF8AAIABAAAA/gcAgAEAAADg/wGAAQAAAAD0H+AAAAAAAAD//wAAAAAAAOA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"dog2\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAPAPAAAAAAAA/z4AAAAAAPAfOAAAAAAA/wBwAAAAAPAfAGAAAAAA/wAA4AAAAMAfAADAAAAA4AEAAMAAAABwAAAAwAMAADAAAADABwAAMAAAAOAPAAAwAAAAcD8AABgAAABwfAAAMAAAgB/4AAAwAADoD/ABADAAAP8C4AEAYAD4DwDAAwDgAP8AAIADAMD1LwAAgAcAwP8AAQAGDwDAC+AHAAAOAOAB4A8AAB4A4ADwH8AAHADwAPAfwAAcAPAAcB8ADDwAcABwHAAIPABwAGAMAAA8AHAAQAQPAD4AeAAAwR8A/gM4AADAOIADBDgAAMAwwAAIOAAA4HBgABA4AABgYDgAEDgAAGDgf+8WOAAAYOB/ABA4AABgcHgAEDgAAMAwwAAIOAAAwDCAAQw4AIDDOQBXA3gA4I8fAHwBcADgHwYAPABwAPAfAAw8APAA8B8ABBwA4ABwHsAAHADgAWAcQAAeAMABYAwAAA4AwANABgACDwDAGwAAAAYHAID/AQAAgAcAgPc/AADAAwDAAP4fAMABAOAAwP8B8AEAYAAA8D/wAABgAAAAfnwAAGAAAADgPgAAcAAAAIAfAABgAAAAgA8AAGAAAAAAAwAAYAAAAAADAADgAAAAAAMAAMADAAAAAwAAgD8AAIABAAAA/gcAgAEAAADg/wGAAQAAAAD8X+AAAAAAAAD/9wAAAAAAAOA/AAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"eyes1\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAsAEAAAAAAADwAQAAAAAAAPhBAAAAAAAA+EEAAAAAAAD8QAAAAAAAADzgDwAAAAAAPvAfAAAAAAA+8D8AAAAAAD/w/wAAAAAAP/j/AQAAAAA//P4DAAAAgD/8gAcAAADAP/cADgAAAMD/8QAeAAAAwH/wABwAAADgf/gAOAAAAOA/+ABwAAAA4D/4AGAAAADgf/gA4AAAAOB/+ADgAAQA4H/4AMABBADAf/gPwAEEAMB/+D+AAQQAgH/4f8AhBACAf/j/gCEGAIB/+P+AIQIAAH/4/4ExAgAAf/j/gzECAAB++P+DMQMAAP74/4MRAQAA/vj/gxEBAAD++P+DmQEAAP74/4HJAAAA/Pj/gE0AAAD8+H+AbQAAAPz4P4A2AAAA/PgfwBoAAAD8+AFADwAAAPz4AeACAAAA/PgB+AAAAAD+eAE4AAAAAH54AAYAAAAAfniAAwAAAAA+cPAAAAAAAD9wfwAAAAAAH3APAAAAAAAfIAAAAAAAABggAAAAAAAEAiAAAAAAAPwDAAAAAAAA+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8AAAAAAAAAPABAAAAAAAAgAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AMAAAAAAADgBwAAAAAAAOAHAAAAAAAA4A8IAAAAAADgHxgPAAAAAMAf+HkAAAAAgB8dwAMAAACAn/0DDgAAAIDfPB4YAAAAgF888DAAAACAfzyAYQAAAIAfPACDAAAAgB88AAYBAACADzwADAMAAMAH/AMYBgAAwAf8DxAIAADAB/wfMBAAAMAH/D9gMAAA4Af8f8BgAADgB/x/wEAAAOAH/n/AwQAA8Af+f4DBAQDwB/5/gIEBAPAH/n+AgQEA+AP+P4CBAQD4A/4/gIEBAPgD/j+AgQEA+AP+H4CAAQD8A/8PgIABAPwB/wfAwAAA/AF/AMBgAAD+AR8AwCAAAP4BHwBgMAAA/gEfADAYAAD+AQ8AMA4AAP+BDwAcAwAA/4MPAAwAAAD/hQ8ABgAAAP+FD4ADAAAA/4APwAAAAAD/gA/gAAAAAP+ADzgAAAAA/wAfDwAAAAB/AP8PAAAAAH8A/wMAAAAAfwBfAAAAAAB+AAwAAAAAAH4AAAAAAAAAfAAAAAAAAAA8AAAAAAAAADwAAAAAAAAAHAAAAAAAAAAcAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"eyes2\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAsAEAAAAAAADwAQAAAAAAAPhBAAAAAAAA+EEAAAAAAAD8QAAAAAAAADzgDgAAAAAAPvAfAAAAAAA+8D8AAAAAAD/w/wAAAAAAP/j/AQAAAAA//P8DAAAAgD/8gwcAAADAPwc+DgAAAMD/AXAeAAAAwH8A4B0AAADgfwCAOwAAAOA/AABzAAAA4D8AAGcAAADgfwAA5gAAAOB/AADsAAQA4H8AAMwBBADAfwAA2AEEAMB/AADYAQQAgH8AANghBACAfwAAmCEGAIB/AAC4IQIAAH8AALgxAgAAfwAAsDECAAB+AACwMQMAAP4AALARAQAA/gAAsBEBAAD+AACwGQEAAP4AALDJAAAA/AAAsE0AAAD8AACwbQAAAPwAALA2AAAA/AAA+BoAAAD8AABYDwAAAPwAAPwDAAAA/AAAvgAAAAD+AIA5AAAAAH4AwAYAAAAAfgD4AwAAAAA+AP4AAAAAAD8AfwAAAAAAHwAPAAAAAAAfAAAAAAAAABgAAAAAAAAEAgAAAAAAAPwDAAAAAAAA+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8AAAAAAAAAPABAAAAAAAAgAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AMAAAAAAADgBwAAAAAAAOAHAAAAAAAA4A8IAAAAAADgHxgPAAAAAMAf6HEAAAAAgB8fwAMAAACAn/0DDgAAAIDfAB4YAAAAgF8A8DAAAACAfwDAYQAAAIAfAICDAAAAgB8AgAcBAACADwAADwMAAMAHAAAfBgAAwAcAABYIAADABwAAPBAAAMAHAABsMAAA4AcAAMxgAADgBwAA3EAAAOAHAADYwQAA8AcAALjBAQDwBwAAuIEBAPAHAACwgQEA+AMAALCBAQD4AwAAsIEBAPgDAACwgQEA+AMAALiBAQD8AwAAuIABAPwBAADYwAAA/AEAAN5gAAD+AQAAziAAAP4BAABnMAAA/gEAADcYAAD+AQDAMw4AAP8BAOAZAwAA/wMA+A4AAAD/BQB8BgAAAP8FAL4DAAAA/wAAzwAAAAD/AIDzAAAAAP8AwDkAAAAA/wABDgAAAAB/AP8PAAAAAH8A/wMAAAAAfwBvAAAAAAB+AAwAAAAAAH4AAAAAAAAAfAAAAAAAAAA8AAAAAAAAADwAAAAAAAAAHAAAAAAAAAAcAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"eyes3\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAsAEAAAAAAADwAQAAAAAAAPhBAAAAAAAA+EEAAAAAAAD8QAAAAAAAADzgDgAAAAAAPvAfAAAAAAA+8D8AAAAAAD/w/wAAAAAAP/j/AQAAAAA//P4DAAAAgD/8gAcAAADAP/cPDgAAAMD/8T8eAAAAwH/wfxwAAADgf/j/OAAAAOA/+P9wAAAA4D/4/2EAAADgf/j/4wAAAOB/+P/jAAQA4H/4/8MBBADAf/j/wwEEAMB/+P/DAQQAgH/4/8EhBACAf/j/gCEGAIB/+H+AIQIAAH/4P4ARAgAAf/gfgDECAAB++AGAMQMAAP74AYARAQAA/vgBgBEBAAD++AGAmQEAAP74AYDJAAAA/PgAgE0AAAD8+ACAaQAAAPz4AIA2AAAA/PgAwBoAAAD8+ABADwAAAPz4AOABAAAA/PgA+AAAAAD+eAA4AAAAAH54AAYAAAAAfniAAwAAAAA+cPAAAAAAAD9wfwAAAAAAH3APAAAAAAAfQAAAAAAAABggAAAAAAAEAiAAAAAAAPwDAAAAAAAA+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8AAAAAAAAAPABAAAAAAAAgAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AMAAAAAAADgBwAAAAAAAOAHAAAAAAAA4A8IAAAAAADgHxgPAAAAAMAf6HkAAAAAgB8fwAMAAACAn/0DDgAAAIDfPA4YAAAAgF888DAAAACAf7yDYAAAAIAf/A/DAAAAgB/8HwIBAACAD/w/DAMAAMAH/H8YBgAAwAf8fxAIAADAB/x/MBAAAMAH/H9gIAAA4Af8f8BgAADgB/x/wEAAAOAH/n/AwQAA8Af+P4DBAQDwB/4/gIEBAPAH/h+AgQEA+AP+D4CBAQD4A/4HgIEBAPgDfgCAgQEA+AM+AICBAQD8Az8AgIABAPwBPwDAwAAA/AA/AMBgAAD+AR8AwCAAAP4AHwBgMAAA/gEfABAYAAD+AQ8AOA4AAP+BDwAYAwAA/4MPAAwAAAD/hw8ABgAAAP+FD4ABAAAA/4APwAAAAAD/gA/wAAAAAP+ADzgAAAAA/wAfHwAAAAB/AP8PAAAAAH8A/wMAAAAAfwBvAAAAAAB+AAwAAAAAAH4AAAAAAAAAfAAAAAAAAAA8AAAAAAAAADwAAAAAAAAAHAAAAAAAAAAcAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"eyes4\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAsAEAAAAAAACwAQAAAAAAAPhBAAAAAAAA+EEAAAAAAAD8QAAAAAAAADzgDgAAAAAAPvAfAAAAAAA+8D8AAAAAAD/w/wAAAAAAP/j/AQAAAAA//N8DAAAAgD/8gAcAAADAP/cADgAAAMD/8QAeAAAAwH/wABwAAADgf/gAOAAAAOA/+ABwAAAA4D/4AGAAAADgf/gA4AAAAOB/+ADgAAQA4H/4AMABBADAf/gAwAEEAMB/+ADAAQQAgH/4AMAhBACAf/gAgCEGAIB/+ACAIQIAAH/4AIAxAgAAf/gHgBECAAB++B+AMQMAAP74P4ARAQAA/vh/gAEBAAD++H+AmQEAAP74/4DJAAAA/Pj/gU0AAAD8+P+BbQAAAPz4/4E2AAAA/Pj/wRoAAAD8+P9BDwAAAPz4/6ADAAAA/Ph/+AAAAAD++D84AAAAAH74HwYAAAAAfviPAwAAAAA+cPAAAAAAAD9wfwAAAAAAH3APAAAAAAAfQAAAAAAAABggAAAAAAAEAiAAAAAAAPwDAAAAAAAA+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8AAAAAAAAAPABAAAAAAAAgAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AMAAAAAAADgBwAAAAAAAOAHAAAAAAAA4A8IAAAAAADgHxAPAAAAAMAf+DkAAAAAgB8fwAMAAACAn/0DDgAAAIDfPB4YAAAAgF88cDAAAACAfzyAYQAAAIAfPACDAAAAgB88AIYBAACADzwADAMAAMAHPAAYBgAAwAc8ABAIAADABzwAMBAAAMAHPAAgIAAA4Ac8AMBAAADgBzwAwEAAAOAHPgDAwQAA8Ac+AIDBAQDwBz4AgIEBAPAHPgCAgQEA+AM+AICBAQD4A/4AgIEBAPgD/gKAgQEA+AP+B4CBAQD8A/8PgIABAPwB/x/AwAAA/AH/H8BgAAD+Af8fwCAAAP4B/x9gMAAA/gH/HyAYAAD+Af8fOA4AAP+B/x8YAwAA/4H/Dw4AAAD/h/8PBwAAAP+F/4cDAAAA/4D/wwAAAAD/gP/hAAAAAP+AHzwAAAAA/wAfHwAAAAB/AP8LAAAAAH8A/wMAAAAAfwBfAAAAAAB+AAwAAAAAAH4AAAAAAAAAfAAAAAAAAAA8AAAAAAAAADwAAAAAAAAAHAAAAAAAAAAcAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"floppy1\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8fAAAAAACA//8AAAAAAOAA8AEAAAAAcACAAQAAAAAYAIABAAAAABgAgAEAAAAADADAAAAAAAAMAGAAAAAAAA4AcAAAAAAABgAYAAAAAAAGABgAAAAAAAYADAABAAAABgAMAAIAAAAGAAwAQgAAAAYABABCAAAABgAGAEIQAAAGAAb8RxAAAAYAxv9vEAAABgDm/38YAAAMAP4H/AsAAAwAfwDkDwAAHIAfAEQPAAAYgA8ARB4AADCABwBEPAAAcOABAEh8AADg+QEASPQAAID/AABI4gEAAD4AAFjCAQAAPAAIUMIDAAAcAB5QggMAAA4AH1ABBwAADoAfAAEHAAAHwD8AAAYAAAfAPwAADgAAB8A6AAAOAAADgDAAABwAgAOAmQMAHACAAwCADwAcAIADAOAYABwAgAMAYBggGACAAwBgGFAcAIADAGAwABgAgAMAYBgAHACAAwBgMAAYAIADAGAYABwAgAMAYBgAHACAAwDKDwAcAIADgJ8PABwAAAOAvwcADgAAB8A/AAQOAAAHwD0ABQ4AAAbAOSAMDwAADoAQQBAGAAAeABlAmgcAADwAAECSAwAAOAAAQJIBAAB/AABA8gEAwP0AAEDyAADA8QEAQPIAAHDAAwBAcgAAMMAHAEB+AAAYgA8AQF8AABgAPwDARwAACAD/APCHAAAMAPYf/IUAAAwAxv//BAEADAAG/38EAQAMAAbwQwQBAAQABgBABAEABgAGAEAEAAAGAAYAQAQAAAcABgBABAAAAwAGAEAEAAADAAYAQAAAwAAABgAAAADgAAADAAAAAGAAgAEAAAAAMACAAQAAAAAwAMAAAAAAAOAf8AAAAAAAwP8/AAAAAAAA/AcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"floppy2\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/T8AAAAAAMD//wAAAAAA4ADAAQAAAABgAIABAAAAAGAAAAMAAAAA4AAAAwAAAADAAQAGAAAAAIABAAYAAAAAAAMADAAAAAAABgAMAAAAAAAGAAwAIAAAAAwADABAAAAADAAMAEAAAAAMAAwAIAgAAAgADABACAAAHAAMAEAIAAAIAAT+QwACABgAzv9/BAIAGAD2//8EAQAwAP4B/AcBADAAPwDgjwAAYIAfAECPAADggAcAQL4AAMDxBwBAegAAgP8BAEB6AAAA9AAAQPIAAAD4AABA4gEAADwAAEDiAQAAHAAAQJIDAAAeAABAkgcAAA6AGUAJBwAAB4AwQAkPAAAHwDkABA4AAAfAPwAADgCAB8A/AAAcAIADgB8AABwAgAOAHzgAHACAAwAEfgAcAIADAABHABwAgAMAAMMAGACAAQAAwwA8AIADAADDABgAwAMAAIEAHACAAQAAwwAYAIADAADDADwAgAMAAMMgHACAAwAMbiAcAIADABF8IBwAgAPAOBgAHAAAB8A5AAAOAAAHwD8AAA4AAAfAPwABDgAADoA/EAIHAAAOAB/QAgcAAB4ABBCCAwAAPwAAUMIDAMD/AABAxAEA4MABAEjkAQBwgAEASPQAADAAAwBIfAAAGAAHAEg8AAAYAA4ASB8AAAwAHgDEDwAADAD8AOQPAAAMAPwD/gkAAAwA7P9/CAAABgCM/18AAAAMAAzsQggAAAYADABEEAAABAAIAEIQAAAGABgAQhAAAAwAGABCEAAADAAwACIQAAAMAGAAQQAAAAwA4AAhAAAAGADAAUEAAAA4AIABAQAAADAAAAMBAAAAcAAAAwAAAADgAMADAAAAAMDv/wEAAAAAAP8/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"frown\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPgvAAAAAACA//8BAAAAAPAFwA8AAAAAfAAAPgAAAAAOAABwAAAAgAcAAOABAADAAQAAgAMAAOAAAAAABwAAcAAAAAAMAAAYAAAAABgAAAwAAAAAOAAADgAAAABwAAAGAAAAYGAAAAMAAABwwACAAQAAADzAAYABAAAADoABwAAAAAADAAPAACAFgAMAA8AA+H/AAAADYAD8/8AAAAZgAPz/YAAADmAA+D9gAAAEMAAAADAAAAwwAAAAMAAADDAAAAAwAAAMMAAAADAAAAwwAAAAEAAADDAAAAA4AAAMMAAAADAAAAwwAAAAMAAADDAAAAAwAAAMMAAAADAAAAwwAAAAMAAABCAAoAUgAAAOMAD8f2AAAARgAPz/YAAABmAA/P/AAAAGQADwP8AAAAPAAAAAgAEAA8ABAAAAAwADgAEAAAAHgAGAAQAAABzAAQADAAAAeMAAAAYAAABgYAAADgAAAABwAAAMAAAAADAAADgAAAAAHAAAcAAAAAAMAADgAAAAAAcAAMABAACAAwAAgAcAAMABAAAADgAAeAAAAAB8AAA+AAAAAPAFoA8AAAAAgP/9AQAAAAAA/B8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"globe\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+B8AAAAAAIAD4AAAAAAAYAAABwAAAAAMAAAYAAAAAAIAAGAAAACAAwAAgAAAAEAAAAAAAwAAMAAAAAAEAAAAAAAAAAgAAAwAAAAAEAAAAgAAAAAgAAACAAAAACAAAAEAAAAAQACAAAEAAQCAAIAAA/AfAAABQIAD/H8AAAEgxuv/vwAAAiDf////AwACkO////8HAALwx////wcABPDD////HwAE+AH+//8fAAj4APz//xgACPgA/f9/MAAIeAD7/384AAg4AP7//3gAEHwAcP1/wAEQPAB8/P/AARB8ADT8/wQBEHzAH/C/CXIQfMDI/z8I+hB8wPn/Dxj/EHzgc/8DEP8TeOAj/wEQ/wt8wAf+ABD/DzjAP1wAAP8PeMA/WAAA/w/4gH8QAAD/D/gASyAAgP8H8AVAAAAA/wfwDwYAAAD/B/AfAwAAAP8D4B8AAAAA/wPgfwAAAAD+AcBnAAAAAP4BwG8DAAAA/ACAHwYAAAD+AAD/DQAAAH4AAP8DAAAAPgAA/h8AAAAGAAD8bwAAABoAAPj/AAAACAAAkOEBAAACAABg2VcAAAEAAID7/wPAAAAAAP//ByAAAAAA/P8PGAAAAADw/x8HAAAAAID/dwAAAAAAAPAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"go\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACABAAAAAAAA/T8AAAAAAMAD4AMAAAAAMAAAHgAAAAAcAAAwAAAAAAcAAMAAAACAAQAAgAEAAMAAAAAAAwAAYAAAAAAGAAAwAAAAAAwAAAgAAAAAGAAADAAAAAAwAAAGAPr9ACAAAALA//8HQAAAA8D//w/AAAAB4P//H4AAgAHw//8/gAGAAPD//z8AAcAA8P//PwADQADwAAA8AAJAAPAADzwABmAA8D+vHwACIADwP/8fAAQgAOA//x8ABiAA4D//PwAEIADAP/8/AAQgAIA//z8ABDAAAD7rGwAMIAAAAAAAAAQgAAAAAAAABCAAAN7vAgAEIACA//8HAAQgAMD//w8ABGAA4P//HwAGQADg//8fAAJAAPD//z8AAkAA8P//PwADwADwAAA8AAGAAPAAADwAAYAB8P//P4ABAAHw//8fgAAAA+D//x/AAAAG4P//H2AAAATA//8PIAAADID//wcwAAAYAN7fARgAADAAAAAADAAAYAAAAAAGAADAAAAAAAMAAIADAACAAQAAAAYAAHAAAAAAHAAAOAAAAADwAAAGAAAAAIAH6gMAAAAAAPxfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"hSign\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAB/AAAAAAAAgOMAAAAAAADAwQAAAAAAAPiAAQAAAAAA/oABAAAAAADvgAEAAAAAgMOAAQAAAACAwYABAAAAAMDAgQAAAAAAYMCAAAAAAABgwMAAAAAAAHDgwQAAAAAAMMD/AAAAAAAwYGgAAAAAAHBxYAAAAAAA2HNgAAAAAAAYMGAAAAAAAAgwYAAAAAAADBwwAAAAAAAGWDAAAAAAAAb8MQAAAAAABhwzAAAAAAACfD4AAAAAAAPMHAAAAAAAA4y7AQAAAAADDvsDAAAAgAMGGwcAAACAAYYtDgAAAIABnwk8AAAAgIH5DPoAAACAweAGzgEAAIBhAAaGAwAAgDAAAwYDAACAEAADAwMAAIAYAAABAwAAgAiAgQEDAACACICAAQMAAIAEgIGAAwAAgARAQMAHAACABeDAwAYAAIAGQEBgBAAAgAVgYyAEAACAA/BGMAQAAMADMGwQBAAAwAMweBAEAABAATDwGQYAAEABcDgJBgAAQAPwew4CAABAA5AvDgIAAEACEOMHAgAAgAIAwgMCAACAAgAMAAIAAAAFAAgAAgAAAAcAMAACAAAAAgAgAAIAAAACACAAAgAAAAYAYAACAAAABABAAAIAAAAcAEAAAgAAABgAwAACAAAAMABAAAIAAABwAEAAAwAAAMAAQAADAAAAwABggAMAAACAAzCAAwAAAAAHEMADAAAAABwMYAYAAAAAeAcgBAAAAADwASAEAAAAAGAAAAQAAAAAwAAABAAAAADAAAAEAAAAAIABAAQAAAAAgAAABAAAAACAAQAEAAAAAIABAAQAAAAAgAEABAAAAACAAQAEAAAAAIABAAAAAAAAgAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"iSign\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9AAAAAAAA4P+/AAAAAAAwAOj/WwAAABgAAa7/AwAAGIAAgAAeAAAwgABAAHAACODfAEAAwL8fAP4fAAAA/gEAAP0PAAAEAAAAHPwDAAQAAAAGQA0AAAAAAAKAGAAAAAAAA4AYPwAAAAADwNhhAAAAAP6AeMAAAAAA/i8dgAEAAAAD/B8AAQAAgPEBMgACAACA2QcxAAEAAIDNDTEAAwAAgGUfEQABAACAH/ofgH8CAAAfcwfA7Q8AAPPhB2AADQCA4WAAMAAAAIDAAAAYAAAAwIEBAAgAAACAgQEABAAAAIAPAwAGAAAAAP4H7gMAAAAAwP9fAQAAAAAArn  \"pig\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAPAAAAAAAABB8AAAAAAAAEHwAAAAAAAA7eAAAAAAAADt8BAAAAAAAO3wEAAAAAAB7fAQAAAAAAnt8DAAAAAACe3wMAAAAAQP7fBwAAAADA/u8HAAAAAMA+/wcAAAAAwD//DwAAAADA//8PAAAAAMD//w8AAAAAwP//DwAAAADg//8LAAAAAOD//w8AAAAA8P//HwAAAADw//8fAAAAAPD//x8AAAAA+P//HwAAAAD4//8fAAAAAPz//x8AAAAA/P//HwAAAAD8//8fAAAAAP7//xcAAAAA/P//HwAAAAD+//8bAAAAAP7//xsAAAAA/v//HwAAAAD+//87AAAAAP///z8AAAAA////OwAAAAD///89AAAAAP///2sAAACA////2wAAAID///83AAAAgP////8AAACA/////wGAAcD/////D+ABwP////+/4gHA////////AMD///////8AwP///////wHA////////AcD//////38AwP////8DAADA/////w84AMD///+//z8AwP///3//HwDA//////8fAMD/////vz8AwP////8AAADA////fwAAAMD/////AAAAwP///38AAADA/////wEAAMD///+/AwAAwP///38BAADA/////wAAAMD///+/AAAAwP////8BAADA////vwEAAMD/////AwAAwP///78HAADA/////wMAAMD/////AwAAwP///78DAADA////fwMAAMD/////BwAAwP///38HAADA////fwMAAMD///9/AwAAwP///38DAADA/////wcAAMD/////AwAAwP///78DAADA/////wcAAMD////fAwAAwP////cDAADA////+wMAAMD/////BwAAwP////sDAADA/////wMAAMD////7BwAAwP////0HAADA/////w8AAMD////9D8AAwP////0P4ADA/////Q/wAMD////7D/gAwP///+cH/AKA////Xwc+A4D/////Kt8DgP//////5wOA///////5AQD///////8DAP///////wAA//////9/AAD+/////x8AAP7/////DwAA/v////8HAAD8/////wMAAPz////5AAAA+P//fwAAAAD4//8/AAAAAPD//w8AAAAA4P//DwAAAADA//8BAAAAAID//wAAAAAAAP8fAAAAAAAADgAAAAAAAAAMAAAAAAAAABQAAAAAAAAAHAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"smile\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPgvAAAAAADA//8BAAAAAOADwA8AAAAAfAAAPgAAAAAOAABwAAAAgAcAAOABAADAAQAAgAMAAOAAAAAABwAAcAAAAAAMAAAYAAAAABwAABwAAAAAOAAABgAAAAAwAAAGAADAAGAAAAMAAMAHwACAAwAAAB7AAYABAAAAGIABwAAAAAAwAAPAAIAGAGAAA8AA/H8A4AACYAD8/wDAAAZgAPz/AIABBmAA8D8AgAEOMAAAAACAAQQwAAAAAAADDDAAAAAAAAMMMAAAAAAAAwwwAAAAAAADDDAAAAAAAAMMMAAAAAAAAwwwAAAAAAACDDAAAAAAAAMMMAAAAAAAAwwwAAAAAAADDGAAwAYAAAEEYAD8fwCAAQZgAPz/AMAABmAA/H8AwAAGwADwPwBgAAPAAAAAAHAAA8AAAAAAGAABgAEAAAAegAGAAwAAgAfAAAADAADAA8AAAAYAAAAAYAAADgAAAABwAAAMAAAAADAAADgAAAAAHAAAcAAAAAAMAADgAAAAAAcAAMABAACAAwAAgAcAAOABAAAADgAAcAAAAAB8AAA+AAAAAPADwA8AAAAAgP/9AQAAAAAA/B8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"soccerBall\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9C8AAAAAAICf3wMAAAAA8AACDgAAAAAcAH84AAAAAAeA/+MAAACAAcD/jwEAAGAA4P8/BwAAMAD4//8NAAAYAP//PxgAAAzg/f8/EAAADjzw/x9gAAAPB+D/H8AAgL8BwP8fgACAfwCA/x8AAcA/AAB/GgADwB8AAAdgAALgDwAAAUAABOAPAAABgAAE8AcAgACAAQzwBwCAAAABCPgDAMAAAAII+AMAQAAABhj4AwAgAAAEGPgHACAAABwceAwAMAAAfDwcMAAQAAD8JwxgAB4AAPwnDMDAPwAA/CcEgPk/AAD+JwQA/38AAP4nBAD/fwAA/ycEAP//AAD/JwQA/v8BwP8nBAD//wP8/ycEAP///4v/JwwA//9PAP8XCAD//wMA/x8IAP//AQD+HwgA//8BAP4ZGAD//wAA/AgQAP9/AAA8CDDA/j8AADgMIGDgPwAACAxgGAAfAAAMBsAOABgAAAQCwAMAMAAAAgOAAwAgAAADAQADAEAAAIEBAAIAQACAwAAABgCAAEBAAAAMAIABYGAAABgAAAEgGAAAMAAAAxgIAABAAACmHwYAAIABAP4PAwAAAAYA//8AAAAAHMD/fwAAAADg8P8fAAAAAID//wMAAAAAANQvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"stegosaurus\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAABAAQAAAAAAAGABAAAAAAAAoAAAAAAAAADwAAAAAAAAAPgAAAAAAAAA2AAAAAAAAADoAAAAAAAAAPgAAAAAAAAAsAAAAAAAAAA+AAAAAADwgTIAAAAAAPi7FwAAAAAA+PcxAAAAAODxdxsAAAAA+OdvJAAEAAD8718OAAQAAP7fHwYAAgAA/v/PJYAFAAD+v6d/MAMAAPwf0XvdAAAA+B/81jcAAADgD710HwAAwM9HO30IAADgn8Mb+AAAAPA/8CbBAAAA8P/wT4IHAAD8/+ybAB8GAPz/+DcBbQIA/H+4LAL+AwD8P37ZAEAAAPA/PKIBAAAAwD/bRgAAAAAAANeNAAAAAPAHzzMAAAAA+I+NJwAAAAD4jysCAAAAAPzP9wQAAAAA/s9OGQAAAAD+h/sEAAAAAP9n8wsAAACA/+cMAgAAAMD/x/kDAAAA4P93AwAAAADg//v+AAAAAPD/wwEAAAAA8P8rHwAAABD4/3mAAAAAIPj/8M8AAAAQMAB8gAAAAAgAcPiPAKABKQD+EMAAsP8LAP78jwH47xsA//nPAH7/AwD/ubcB/wMAAP/VvvEPAACA//3f/wAAAID/1f8/AAAAwP/t//9vAADA//n/z78BAOD/8d8f/AME8P+Z/37QXwrw/8E/ecD/BfD/sX9AAOAA+P/B/wAAAAD4/zm/AwAAAPz/wX4CAAAA/P8g/gQAAAD8P5L/DQAAAACAR/oTAAAAAOBP2ScAAAAA8B/1DwAAAADwv6A/AAAAAPA/qj8AAAAA8P8o+gIAAADw/9H9DQAAAPD/AfUXAAAA8P9DrC8AAADw/wdQXgAAAPD/54N+AQAA4P/nH/oBAADg//f/8AMAAOD/5/+hBwAA4P/n/wkHAADg/+P/Pw8AAOD/4/99HAAA4P/g//0cAADg/8D//TkAAOA/gP/9MwAA4A+A//hhAADgBwD/+GsAAOADADzwyQAA4AEAePDdAQBgAAA44LwBAAAAAABgvAEAAAAAAAA+AwAAAAAAAPMCAAAAAAAA+QIAAAAAAID5BAAAAAAAANgEAAAAAAAAzAUAAAAAAADGBQAAAAAAAOIFAAAAAAAAcAUAAAAAAAAYBQAAAAAAAAAFAAAAAAAAwAUAAAAAAADwAQAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"stop\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4//8fAAAAAKyUkjgAAAAABgAAYAAAAAADAADAAAAAgAEAAIABAADAAAAgAAMAAGAABPAABgAAMAA/8AEMAAAYgH/gARgAAAzA84ADMAAABsDhAANgAAADwMGBA8AAgAHAwYMDgAHAAMCD5wEAA2AAgAf/AAAGMAAAB/4AAAwYAAAAEAAAGAwAAAAAAAAwBADAAQAAACAMAMAAAAAAIAQAwAEAAAAgDADA//8DADAEAMD//wEAIAwAwO3vAwAgBADAAQAAADAMAMABAAAAIAQAwAEAAAAwDAAAAAAAACAEAAAAAAAAMAwAAPgvAAAgBAAA//8AADAMAIC//gEAIAQAwAPAAwAwDADAAYADACAEAMABAAMAIAQAwAGAAwAwDADAA8ADACAEAICf/AEAIAwAAP//AAAwBAAA/D8AACAMAAAAAQAAMAQAAAAAAAAwDAAAAAAAABAYAAAqVQEAGDAAwP//AwAMYADA//8DAAbAAMDBCQEAA4ABwMEBAIABAAPAgQEAwAAABsDBAQBgAAAMwMEBADAAABiA4wEAGAAAMID/AAAMAABgAP8AAAYAAMAACAAAAwAAgAEAAIABAAAAAwAAwAAAAAAGAABgAAAAAKyqUjUAAAAA+P//HwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"trex\": \"4YBAAAAAAAAAAAAAAAAAAAAAAADAAQAAAAAAAPADAAAAAAAA8AMAAAAAAADwAwAAAAAAAPg5AAAAAAAA+HAAAAAAAAD4eQAAAAAAAGxwAAAAAAAAzjgAAAAAAABOPAAAAAAAAH8+AAAAAAAAdz8AAAAAAADrHxgAAAAAAP8fCAAAAAAA+Q84AAAAAADnDzAGAAAAAO8HYAIAAAAA/wNABgAAAAD+B2ACAAAAAPwfYAMAAAAA+P9gAwAAAID4//8DAAAAwOD//wEAAADAgP/PBAAAAMAA/ycCAAAA4AD+Hwk4AADgAPzHBHgAAOAA/H8ScAAA4AD4DwnwAABgAPD/FPAAAOAA4D8q8AwAcADg/1XwHQB8AMB/Kvg/wC8AgP9XmP//fwCA/0iM///zAAD/J2yPfwAAAP4fdgAAAAAA/I8/AAAAAAD43x8AAAAAAPj/HwAAAAAA8P8PAAAAAADg/xcAAAAAAOD/HwAAAAAAwP9/AAAAAADA//8BAAAAAID//w8AAAAAAP//DwAAAAAA/98PAAAAAAD+D34AAAAAAPwH/AAAAAAA+D/wAAAAAADwH/AAAAAAAOB/4AGAAAAAgP/HAcAAAAAA/wADwAAAAAD+HwfAAAAAAPwDDsAAAAAA+D8cwAAAAADwB3zgAAAAAOD/+PEAAAAAwB/gfwAAAACA/0M/AAAAAAB/AHwAAAAAAP4H4AAAAAAA/AEAAAAAAAD4HwAAAAAAAPAHAAAAAAAA4D8AAAAAAADgDwAAAAAAAMD/AAAAAAAAgB8AAAAAAAAA/wEAAAAAAAB/AAAAAAAAAP4AAAAAAAAA/AMAAAAAAAD4AAAAAAAAAPgBAAAAAAAA8AcAAAAAAADwAQAAAAAAAOAPAAAAAAAA4AMAAAAAAADgDwAAAAAAAMAHAAAAAAAAwAcAAAAAAACAHwAAAAAAAIAPAAAAAAAAgB8AAAAAAAAAPwAAAAAAAAAPAAAAAAAAAD8AAAAAAAAADgAAAAAAAAA+AAAAAAAAAA4AAAAAAAAAPAAAAAAAAAAcAAAAAAAAAHwAAAAAAAAAOAAAAAAAAAA4AAAAAAAAAHgAAAAAAAAAOAAAAAAAAAB4AAAAAAAAADgAAAAAAAAAOAAAAAAAAAAwAAAAAAAAADAAAAAAAAAAcAAAAAAAAABwAAAAAAAAAHAAAAAAAAAAcAAAAAAAAABwAAAAAAAAAHAAAAAAAAAAYAAAAAAAAABgAAAAAAAAAGAAAAAAAAAAYAAAAAAAAABgAAAAAAAAAGAAAAAAAAAAYAAAAAAAAABgAAAAAAAAAGAAAAAAAAAAYAAAAAAAAABgAAAAAAAAAGAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"triceratop\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAAAAAAA+B8AAAAAAADwDwAAAAAAAOAPAAAAAAAAYC4AAAAAAABgTAAAAAAAAEDOAAAAAAAAYM4AAAAAABAgzgAAAAAAIGDvAAAAAABg8OcAAAAAAEDw5wAAAAAAQPDnAAAAAADA7+8AAAAAAIDH8wAAAAAAgOP3AAAAAAAA/38AAAAAAAD+fwAAAAAAAP4/AAAAAAAA/hEAAAAAAAD/AQAAAACAgP8BAAAAAID//wcAAAAAgP//BwAAAAAA//8PAAAAAAD+/wcAAAAAAPz/BwAAAAAA+P8DAAAAAAD4/wEAAAAAAOB/AAAAAAAAwD8AAAAAAACABQAAAAAAAAADAAAAAAAAgAMAAAAAAADABwAAAAEAAJABAAAAAQAA0AEAAIADAADkBOAAgAEAgOUI/gHgAQAAehE/AJgGAAB4gv+jeQAA4Pvp/v+/AAAAvv/8/QcAAAC8/xjgAwAAQPwPAOcAAAD4328ADgABAATfgwFcgAEAAM4HAPCAAAA4DxwC4NMHAO8f4AD41QIAwf8CECB9AACAA/8PAIABAIADAAAAAAAA/B8AAAAAAMC38wEAAAAAwMAA/l8AAAAAwAEAAAAAAADuDwAAAAAAAPv8BH8AAADg8LD/AwAAACDAAAAAAAAAAP4DQA8AAACA8f5/AAAAAIDgAAAAAAAAAO8DsAAAAACAeP4fAAAAAABiAAIAAAAAAO1/AAAAAAAAcAAAAAAAAADlPwAAAAMAAGhwAACAAAAAcnMAAIABAADgMIAFwAIAAOQwwPXCAQAA5BBw/9MAAAD4ENgF/wEAAOAYDgAeAAAA4JgHABgAAACg9QEGAAAAAMAXgDcAAAAAwP9/NwAAAACA+/99ABAAAAA7ANIBHAAAAMMDYA8MAAAAHtyBOgYAAAAcUABdHwAAACwAAPwGAAAAOAAA2AcAAAA4AAAAAAAAAHAAAAAAAAAA4AAAAAAAAADAAAAAAAAAAIA3AAAAAAAAANsAAAAAAAAA/hMAAAAAAADYHwAAAAAAAED9AAAAAAAAAGABAAAAAAAAwAMAAAAAAAAADgAAAAAAAAAMAAAAAAAAADgAAAAAAAAAIAAAAAAAAABgAAAAAAAAAEAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"walker1\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAGAAAAAAAAIAYAAAAAAAAgDAAAAAAAACAEQAAAAAAAAARAAAAAAAAOBkAAAAAAAAwGQAAAAAAAGABAAAAAAAAQAAAAAAAAABABgAAAAAAAMAAAAAAAAAAQAMAAAAAAAAgAAAAAAAAACABAAAAAAAAMAAAAAAAAACgAQAAAAAAACAAAAAAAAAAoAAAAAAAAAAgAQAAAMAAAGAAAAAA4AMAoAAAAD7gBwBgAACA//AfAEAA/OH/8z8AYP7/8P/9/wBA/n/8//3/AcD/P/7//P8HgP8f/v/+/wcA/x//f///AAD/j/9//j8KgP/P/3//vw+A/8f/f/6fD4D/x////s8PgP/H///85w8A/8f///P5DwD8x///B/gPAPDH/////Q8AwMf////9DwAAz9f///0PAADMgf///Q8AAIgB/v/8DwAAgBn+//4OAAAAPfz/Hg4AAAA9/H8PAAAAABr8PwEAAAAABP6fAAAAAAAY/w8AAAAAAOD/BwAAAAAAgP8BAAAAAAAAKgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"walker2\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAAAAAAYwAAAAAAAAAjAAAAAAAAIGIAAAAAAAAgIgAAAAAAAGAzAAAAAAAAQBMAAAAAAAAgCQAAAAAAAGAAAAAAAAAAIAMAAAAAAAAwAQAAAAYAABAAAAAABwAAyAAAAIAPAABEAAAAwB8AACgAAADgPwAALAAAAPB/AAAUAAAA+H8AAAQAAAD8/wAAHgAAfv7/AQAEAMD///8BAIb/53//3wEA9v/7f/+fAQD6//1//48BAP7//r//DwAA/v/+v/8HAAD+f/8//wcAAP5//3//BwAA/n//f/4DAAD+v////gEAAP6///8BAgAA/L////8DAADwv////wMAAMC/////AwAAgL////8HAAAAvMP//wcAAAC4Af//AwAAAKAB/v8NAAAAgAH8/x0AAAAAwf3/HAAAAADi/X9+AAAAAML9f/8AAAAABPw//wEAAAD4/9//AQAAAOD/7/8AAAAAgP/zfwAAAAAAPvw/AAAAAAAA/j8AAAAAAAD8HwAAAAAAAPAPAAAAAAAAgAcAAAAAAACAAwAAAAAAAIADAAAAAAAAgAEAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"walker3\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAGAAAAAAAAIAYAAAAAAAAgBAAAAAAAACAEQAAAAAAAAgTAAAAAAAAMBEAAAAAAAAwGwAAAAAAAEABAAAAAAAAQAAAAAAAAADABgAAAAAAAEACAAAAAAAAQAAAAAAAAABAAQAAAAAAACACAAAAAAAAIAEAAAAAAABQAAAAAAAAAKABAAAAAAAAIAAAAAAAAACgAAAAAAIAACAAAAAA/gMA4AAAAAD8/wFAAAAA//h/AMDw/+D/4z8AQP7/8P/PPwBA/n/8/58/AMD/P/7/vx8AgP8f/v9/AgCA/x///w/4A4D/j///8f8DgP+P///8/wOA/4////7/A4D/x/9///8DgP/H/3///wMA/sf/f///AwD8x/9///8DAPDH/3///wMAwMf/f/7/AwAAx+H//v8DAADEgP/9/wMAAMAA//P/AwAAgBn+9/8DAAAAHf4PAAMAAAA9/H8AAwAAABr8fwACAAAABP4fAAAAAAAY/x8AAAAAAOD/BwAAAAAAwP8BAAAAAAAAPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"walker4\": \"4YBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACEAAAAAAAAAYwAAAAAAAABiAAAAAAAAIGIAAAAAAABgIgAAAAAAAGAzAAAAAAAAQBkAAAAAAAAgCAAAAAAAAGACAAAAAAAAYAEAAAAAAAAQAQAAAAAAAJAAAAAAAAAATAAAAMABAABAAAAAwAMAACwAAADwBwAALAAAAPAPAAAUAAAA/A8AAAQAAAD8HwAAHgAA//g/AAAEAMD/538AAMb/7//ffwAA/v/z/99/AADy//n/v28AAP7//v9/RwAA+v/+//9GAAD4f////wYAAPx/////AQAA/D///98BAAD8v///BwEAAP6////5AQAA/L////4HAADwv/9//gcAAMC//3//DwAAAL//f/8PAAAAvMN//x8AAAC4AX//HwAAAKAAfv8/AAAAgAH8/n8AAAAAwfn+/wAAAADi+/3/AQAAAMT5+/8DAAAACPz3/wMAAAAw/vf/AwAAAOD/5/8AAAAAgP/D/wAAAAAAfMB/AAAAAAAAgD8AAAAAAAAAHwAAAAAAAAAeAAAAAAAAAA4AAAAAAAAABwAAAAAAAIADAAAAAAAAgAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\"\n}",
      "images.ts": "namespace images {\n    //% fixedInstance jres\n    export const butterfly1 = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const butterfly2 = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const cat1 = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const cat2 = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const chicken = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const cow = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const dog1 = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const dog2 = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const eyes1 = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const eyes2 = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const eyes3 = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const eyes4 = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const floppy1 = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const floppy2 = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const frown = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const globe = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const go = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const hSign = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const iSign = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const pig = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const smile = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const soccerBall = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const stegosaurus = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const stop = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const trex = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const triceratop = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const walker1 = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const walker2 = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const walker3 = image.ofBuffer(hex``);\n    //% fixedInstance jres\n    export const walker4 = image.ofBuffer(hex``);\n}\n",
      "ns.ts": "//% color=\"#40bf4a\"\nnamespace leds {\n\n}\n\n//% color=\"#d65cd6\"\nnamespace input {\n    \n}\n\n//% color=\"#F55D3E\"\nnamespace music {\n\n}\n\n//% color=\"#1B998B\"\nnamespace control {\n\n}\n\n//% color=\"#EF2D56\"\nnamespace pins {\n\n}\n\n//% color=\"#006E90\"\nnamespace serial {\n\n}\n\n//% color=\"#006E90\"\nnamespace console {\n\n}\n\n//% color=\"#40bf4a\"\nnamespace loops {\n\n}\n\nforever(function () {\n    input.acceleration(Dimension.X);\n})\n",
      "pxt.json": "{\n    \"name\": \"brainpad\",\n    \"description\": \"The GHI Electronics Brain Pad library\",\n    \"files\": [\n        \"README.md\",\n        \"device.d.ts\",\n        \"config.ts\",\n        \"ns.ts\",\n        \"images.ts\",\n        \"images.jres\",\n        \"servos.ts\"\n    ],\n    \"dependencies\": {\n        \"base\": \"*\",\n        \"core\": \"*\",\n        \"buttons\": \"*\",\n        \"music\": \"*\",\n        \"accelerometer\": \"*\",\n        \"screen\": \"*\",\n        \"display\": \"*\",\n        \"leds\": \"*\"\n    },\n    \"palette\": [\n        \"#000000\",\n        \"#00ffff\"\n    ],\n    \"screenSize\": {\n        \"width\": 128,\n        \"height\": 64\n    },\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"0.21.27\"\n    }\n}",
      "servos.ts": "/* GHI Changed\nnamespace servos {\n    //% fixedInstance block=\"servo 1\"\n    export const servo1 = new servos.PinServo(pins.SERVO1);\n    //% fixedInstance block=\"servo 2\"\n    export const servo2 = new servos.PinServo(pins.SERVO2);\n}\n*/"
    },
    "leds": {
      "README.md": "",
      "enums.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace basic {\n}\n\n// Auto-generated. Do not edit. Really.\n",
      "leds.cpp": "#include \"pxt.h\"\n#include \"BrainPadDisplay.h\"\n\nnamespace leds {\n#define BRAINPAD_TICK_LED1 PB_14\n#define BRAINPAD_TICK_LED2 PA_10\n#define BRAINPAD_TICK_LED3 PA_14\n#define BRAINPAD_TICK_LED4 PA_15\n#define BRAINPAD_TICK_LED5 PA_8\n#define BRAINPAD_TICK_LED6 PB_13\n#define BRAINPAD_TICK_LED7 PB_15\n#define BRAINPAD_TICK_LED8 PB_6\n#define BRAINPAD_TICK_LED9 PA_13\n#define BRAINPAD_TICK_LED10 PC_14\n#define BRAINPAD_TICK_LED11 PB_12\n#define BRAINPAD_TICK_LED12 PB_2\n#define BRAINPAD_TICK_LED13 PH_3\n#define BRAINPAD_TICK_LED14 PC_15\n#define BRAINPAD_TICK_LED15 PB_8\n#define BRAINPAD_TICK_LED16 PB_1\n#define BRAINPAD_TICK_LED17 PB_0\n#define BRAINPAD_TICK_LED18 PA_4\n#define BRAINPAD_TICK_LED19 PH_1\n#define BRAINPAD_TICK_LED20 PB_9\n#define BRAINPAD_TICK_LED21 PA_7\n#define BRAINPAD_TICK_LED22 PA_6\n#define BRAINPAD_TICK_LED23 PA_1\n#define BRAINPAD_TICK_LED24 PA_0\t\n#define BRAINPAD_TICK_LED25 PH_0\n\t\n\tbool init = false;\n\tint isPulse;\n\t\n\t_mbed::Pin* pixel[25];  \n\t\n\t/**\n     * Set leds .\n     * @param leds .\n     * @param interval.\n     */\n\t//%  \n    void setMatrixLeds(int leds, bool value) {\n\t\tif (!init) {\n\t\t\t\n\t\t\tinit = true;\n\t\t\t\n\t\t\tif (pxt::IsPulse())\n\t\t\t\treturn ;\n\t\t\t\n\t\t\tauto en = lookupPin(PA_9);\t\n\t\t\t\n\t\t\ten->setDigitalValue(1);\n\t\t\t\n\t\t\tconst uint32_t pinArray[] = { BRAINPAD_TICK_LED1 , BRAINPAD_TICK_LED2 , BRAINPAD_TICK_LED3 , BRAINPAD_TICK_LED4 , BRAINPAD_TICK_LED5 ,\n\t\t\t\t\t\t\t\t  BRAINPAD_TICK_LED6 , BRAINPAD_TICK_LED7 , BRAINPAD_TICK_LED8 , BRAINPAD_TICK_LED9 , BRAINPAD_TICK_LED10,\n\t\t\t\t\t\t\t\t  BRAINPAD_TICK_LED11, BRAINPAD_TICK_LED12, BRAINPAD_TICK_LED13, BRAINPAD_TICK_LED14, BRAINPAD_TICK_LED15, \n\t\t\t\t\t\t\t\t  BRAINPAD_TICK_LED16, BRAINPAD_TICK_LED17, BRAINPAD_TICK_LED18, BRAINPAD_TICK_LED19, BRAINPAD_TICK_LED20,\n\t\t\t\t\t\t\t\t  BRAINPAD_TICK_LED21, BRAINPAD_TICK_LED22, BRAINPAD_TICK_LED23, BRAINPAD_TICK_LED24, BRAINPAD_TICK_LED25};\n\t\t\tfor (int i = 0; i < 25; i++) {\t\t\t\t\t\t\n\t\t\t\tpixel[i] = new _mbed::Pin(0, pinArray[i], PIN_CAPABILITY_DIGITAL);\n\t\t\t}\n\t\t}\n       \n\t   \n\t\tif (pxt::IsPulse())\n\t\t\treturn;\n\t\t\t\n\t\tif (leds < 0)\n\t\t\treturn;\n\n\t\tpixel[leds]->setDigitalValue(value);\n\t   \t \t  \t   \n    }\n\t\n\t\n}\n\n",
      "leds.ts": "//% color=#1E90FF weight=116 icon=\"\\uf00a\"\nnamespace leds {\n\tconst MATRIX_LED_NUM = 25;\n\t/**\n     * TODO: describe your function here\n     */\n\t//* blockId=led_set_matrix \n    //% block=\"Set leds\"\n    //% imageLiteral=1\n    //% imageLiteralColumns=12\n    //% imageLiteralRows=3\n\t//% async\n    export function __setMatrixLeds(leds: string, interval:number = 400): void {\t\t\n\t\tlet ledMatrix: string = \"\";\n\t\t\n\t\t// for (let i = 0; i < 50; i++) {\n\t\t\t// console.logValue(\"c\", leds.charCodeAt(i));\n\t\t// }\n\t\t\n\t\tfor (let i = 5; i < leds.length; i++) {\n\t\t\tlet ch = leds.charAt(i);\n\t\t\t\n\t\t\tif (ch == '.') {\n\t\t\t\tledMatrix += ch;\n\t\t\t\t\n\t\t\t}\n\t\t\telse if (ch == '#') {\n\t\t\t\tledMatrix += ch;\n\t\t\t\t\n\t\t\t}\n\n\t\t}\t\n\t\t\n\t\tlet ledWidth =  (screen.height / 5) | 0;\n\t\tlet ledHeight = (screen.height / 5) | 0;\n\t\t\n\t\t\n\t\tscreen.fill(0);\n\t\t\n\t\tfor (let led = 0; led < ledMatrix.length; led++) {\n\t\t\tlet xSrc = (led % 5) | 0;\n\t\t\tlet ySrc = (led / 5) | 0;\n\t\t\t\n\t\t\tlet xDest = xSrc * ledWidth;\n\t\t\tlet yDest = ySrc * ledHeight;\n\t\t\t\n\t\t\tif (ledMatrix.charAt(led) == '#'){\n\t\t\t\tscreen.fillRect(xDest + 34 + 1, yDest+1, ledWidth-1, ledHeight-1, 1);\t\t\t\t\n\t\t\t\tsetMatrixLeds(led, true);\n\t\t\t}\t\n\t\t\telse {\t\n\t\t\t\tsetMatrixLeds(led, false);\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t// force to update\n\t\tcontrol.__screen.update();\t\t\t\t\t\n    }\n\t\n\t/**\n     * TODO: describe your function here\n     */\n\t//* blockId=led_clear_matrix \n    //% block=\"Clear leds\"    \n    export function __ClearMatrixLeds(): void {\n\t\tscreen.fill(0);\n\t\t\n\t\tfor (let led = 0; led < MATRIX_LED_NUM; led++) {\n\t\t\tsetMatrixLeds(led, false);\t\n\t\t}\n\t}\n\n\t\n}\n",
      "ns.ts": "\n//% block=\"Leds\"\nnamespace leds {\n}",
      "pxt.json": "{\n    \"name\": \"leds\",\n    \"description\": \"Led Matrix driver\",\n    \"files\": [\n        \"README.md\",\n        \"leds.ts\",\n        \"leds.cpp\",\n        \"shims.d.ts\",\n        \"ns.ts\",\n        \"enums.d.ts\"\n    ],\n    \"public\": true,\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"targetVersions\": {\n        \"target\": \"0.21.27\"\n    }\n}",
      "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace leds {\n\n    /**\n     * Set leds .\n     * @param leds .\n     * @param interval.\n     */\n    //% shim=leds::setMatrixLeds\n    function setMatrixLeds(leds: int32, value: boolean): void;\n}\n\n// Auto-generated. Do not edit. Really.\n"
    }
  }
}